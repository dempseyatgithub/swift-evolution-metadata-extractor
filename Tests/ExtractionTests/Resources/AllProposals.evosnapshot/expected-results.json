{
  "commit" : "1adc39fd5c07d40348665aede5c4142c0c0bddc9",
  "creationDate" : "2024-03-27T15:41:19Z",
  "implementationVersions" : [
    "2.2", "3.0", "3.0.1", "3.1", "4.0", "4.1", "4.2", "5.0", "5.1", "5.2",
    "5.3", "5.4", "5.5", "5.5.2", "5.6", "5.7", "5.8", "5.9", "5.9.2", "5.10",
    "6.0"
  ],
  "proposals" : [
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0001",
      "link" : "0001-keywords-as-argument-labels.md",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "sha" : "cd0c7279af644b38860afaa6e0dba74a1d82107a",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "Argument labels are an important part of the interface of a Swift function, describing what particular arguments to the function do and improving readability. Sometimes, the most natural label for an argument coincides with a language keyword, such as `in`, `repeat`, or `defer`. Such keywords should be allowed as argument labels, allowing better expression of these interfaces.",
      "title" : "Allow (most) keywords as argument labels",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-344",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-344",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ],
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Missing review manager.",
          "stage" : "parse"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0002",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "983a674e0ca35a85532d70a3eb61e71a6d024108",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0002-remove-currying.md",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "sha" : "9761465a5ca6df727be91357c695152ed8e3361f",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Curried function declaration syntax `func foo(x: Int)(y: Int)` is of limited usefulness and creates a lot of language and implementation complexity. We should remove it.",
      "title" : "Removing currying `func` declaration syntax",
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Missing review manager.",
          "stage" : "parse"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "id" : "SE-0003",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8a5ed405bf1f92ec3fc97fa46e52528d2e8d67d9",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0003-remove-var-parameters.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jopamer",
        "name" : "Joe Pamer"
      },
      "sha" : "efcc935d078968d8be95fa0a4e041fad85f18461",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "There has been some confusion of semantics when a function parameter is marked as `inout` compared to `var`. Both give a mutable local copy of a value but parameters marked `inout` are automatically written back.",
      "title" : "Removing `var` from Function Parameters"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0004",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8e12008d2b34a605f8766310f53d5668f3d50955",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0004-remove-pre-post-inc-decrement.md",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "sha" : "c33507a66497d10d002c2b26fb33285da368e530",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The increment\/decrement operators in Swift were added very early in the development of Swift, as a carry-over from C.  These were added without much consideration, and haven't been thought about much since then.  This document provides a fresh look at them, and ultimately recommends we just remove them entirely, since they are confusing and not carrying their weight.",
      "title" : "Remove the `++` and `--` operators",
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Missing review manager.",
          "stage" : "parse"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0005",
      "link" : "0005-objective-c-name-translation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "9a494db4c343219dc589f79832d5dd95fa504d2c",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal describes how we can improve Swift's \"Clang Importer\", which is responsible for mapping C and Objective-C APIs into Swift, to translate the names of Objective-C functions, types, methods, properties, etc. into names that more closely align with the [Swift API Design Guidelines](https:\/\/swift.org\/documentation\/api-design-guidelines) being developed as part of Swift 3. Our approach focuses on the differences between the Objective-C [Coding Guidelines for Cocoa](https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Conceptual\/CodingGuidelines\/CodingGuidelines.html) and the Swift API Design Guidelines, using some simple linguistic analysis to aid the automatic translation from Objective-C names to more \"Swifty\" names.",
      "title" : "Better Translation of Objective-C APIs Into Swift"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Maxim Moiseev"
        }
      ],
      "id" : "SE-0006",
      "link" : "0006-apply-api-guidelines-to-the-standard-library.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "2b78b786bd506387c4ff56cb8b7ccb31981efba1",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "[Swift API Design Guidelines](https:\/\/swift.org\/documentation\/api-design-guidelines) being developed as part of Swift 3.  It is important that the Standard Library is an exemplar of Swift API Design Guidelines: the APIs from the Standard Library are, probably, the most frequently used Swift APIs in any application domain; the Standard Library also sets precedent for other libraries.",
      "title" : "Apply API Guidelines to the Standard Library"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0007",
      "link" : "0007-remove-c-style-for-loops.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1bef3ab55a34b4a46ab5fabe7f2fa8b0a789e099",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The C-style `for-loop` appears to be a mechanical carry-over from C rather than a genuinely Swift-specific construct. It is rarely used and not very Swift-like.",
      "title" : "Remove C-style for-loops with conditions and incrementers",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-226",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-226",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-227",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-227",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/oisdk",
          "name" : "Oisin Kidney"
        }
      ],
      "id" : "SE-0008",
      "link" : "0008-lazy-flatmap-for-optionals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "2abda3ceee0b3b46ead1246e27ada1dce702d342",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Currently, the Swift standard library has two versions of `flatMap`. One which flattens a sequence of sequences after a transformation:",
      "title" : "Add a Lazy flatMap for Sequences of Optionals",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-361",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-361",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0009",
      "link" : "0009-require-self-for-accessing-instance-members.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "626f78665eb3c01fdae0ad243f585cab5f6a801b",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "The current version of Swift (2.1) requires using `self` when accessing instance members in closures. The proposal suggests extending this to all member accesses (as is intrinsically the case in Objective-C). It has the benefit of documenting instance properties vs local variables and instance functions vs local functions or closures.",
      "title" : "Require self for accessing instance members"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        }
      ],
      "id" : "SE-0010",
      "link" : "0010-add-staticstring-unicodescalarview.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "ac3a7924449d81f0c5a1635500f0d477cd3e85ec",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "There is no way to create a substring of a `StaticString` that is still typed as `StaticString`. There should be.",
      "title" : "Add StaticString.UnicodeScalarView"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/loiclec",
          "name" : "Loïc Lecrenier"
        }
      ],
      "id" : "SE-0011",
      "link" : "0011-replace-typealias-associated.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "89d7a3d25e5fcae120a78995e2e09b0cb65d9e38",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "The `typealias` keyword is currently used to declare two kinds of types:",
      "title" : "Replace `typealias` keyword with `associatedtype` for associated type declarations",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-511",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-511",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        }
      ],
      "id" : "SE-0012",
      "link" : "0012-add-noescape-to-public-library-api.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      },
      "sha" : "9e9c0d95e6389478183b3863caef1581817d4ff3",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "",
      "title" : "Add `@noescape` to public library API"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "id" : "SE-0013",
      "link" : "0013-remove-partial-application-super.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "40cfaa459cab35007939643048585a53fed53baf",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Prior to Swift 2.2, calls to superclass methods like `super.foo()` in Native Swift classes were dispatched statically by recording a reference to the function and calling it directly by its mangled name. In Swift 2.2, class methods invoked via `super` will use dynamic dispatch. That is, the method will be looked up in the superclass's vtable at runtime. However, if the method is marked with `final`, it will use the old static dispatch, since no class will be able to override it.",
      "title" : "Remove Partial Application of Non-Final Super Methods (Swift 2.2)"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        }
      ],
      "id" : "SE-0014",
      "link" : "0014-constrained-AnySequence.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "48ddfbc8ed55e15a7e6f783ef2b7a2c43e3c8ac0",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "In order to allow `AnySequence` delegate calls to the underlying sequence, its initializer should have extra constraints.",
      "title" : "Constraining `AnySequence.init`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-474",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-474",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        }
      ],
      "id" : "SE-0015",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "408",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0015-tuple-comparison-operators.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "sha" : "9722ed2b76f1d9a16fee757a79bd29b9de84de6c",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "Implement comparison operators on tuples up to some arity.",
      "title" : "Tuple comparison operators"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/MichaelBuckley",
          "name" : "Michael Buckley"
        }
      ],
      "id" : "SE-0016",
      "link" : "0016-initializers-for-converting-unsafe-pointers-to-ints.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "6d8ed7ef1c10e9e9b6ef1051b4533b31d541c58f",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Just as users can create `Unsafe[Mutable]Pointer`s from `Int`s and `UInt`s, they should be able to create Ints and UInts from `Unsafe[Mutable]Pointer`s. This will allow users to call C functions with `intptr_t` and `uintptr_t` parameters, and will allow users to perform more advanced pointer arithmetic than is allowed by `UnsafePointer`s.",
      "title" : "Add initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1115",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1115",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        }
      ],
      "id" : "SE-0017",
      "link" : "0017-convert-unmanaged-to-use-unsafepointer.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "cc2bb6886019af6d680adc31f72cc9a7053bf868",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The standard library [`Unmanaged<Instance>` struct](https:\/\/github.com\/apple\/swift\/blob\/master\/stdlib\/public\/core\/Unmanaged.swift) provides a type-safe object wrapper that does not participate in ARC; it allows the user to make manual retain\/release calls.",
      "title" : "Change `Unmanaged` to use `UnsafePointer`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1485",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1485",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/anandabits",
          "name" : "Matthew Johnson"
        }
      ],
      "id" : "SE-0018",
      "link" : "0018-flexible-memberwise-initialization.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "9b1646ff2f633aafe582bc25df27b5dfd2dbc95a",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "The Swift compiler is currently able to generate a memberwise initializer for use in some circumstances, however there are currently many limitations to this.  This proposal builds on the idea of a compiler generated memberwise initializer, making the capability available to any initializer that opts in.",
      "title" : "Flexible Memberwise Initialization"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mxcl",
          "name" : "Max Howell"
        },
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        },
        {
          "link" : "https:\/\/github.com\/mattt",
          "name" : "Mattt Thompson"
        }
      ],
      "id" : "SE-0019",
      "link" : "0019-package-manager-testing.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      },
      "sha" : "252c9bdaa05b36ab8f9aa4c6592d9f5a3bce37bd",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Testing is an essential part of modern software development. Tight integration of testing into the Swift Package Manager will help ensure a stable and reliable packaging ecosystem.",
      "title" : "Swift Testing",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-592",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-592",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "id" : "SE-0020",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "c32fb8e7b9a67907e8b6580a46717c6a345ec7c6",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0020-if-swift-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "a59e6ad4dcd24b9cfec286161e61daa3d3fd6116",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "This proposal aims to add a new build configuration option to Swift 2.2: `#if swift`.",
      "title" : "Swift Language Version Build Configuration"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0021",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "ecfde0e71c61184989fde0f93f8d6b7f5375b99a",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0021-generalized-naming.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "20256b9ba5c0fac9c2f77c98043328ed7b996c9a",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "Swift includes support for first-class functions, such that any function (or method) can be placed into a value of function type. However, when specifying the name of a function, one can only provide the base name, (e.g., `insertSubview`) without the argument labels. For overloaded functions, this means that one must disambiguate based on type information, which is awkward and verbose. This proposal allows one to provide argument labels when referencing a function, eliminating the need to provide type context in most cases.",
      "title" : "Naming Functions with Argument Labels"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0022",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1170",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0022-objc-selectors.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "05f5d73410112b690524e190a23cd17fa42c061f",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "In Swift 2, Objective-C selectors are written as string literals (e.g., `\"insertSubview:aboveSubview:\"`) in the type context of a `Selector`. This proposal seeks to replace this error-prone approach with `Selector` initialization syntax that refers to a specific method via its Swift name.",
      "title" : "Referencing the Objective-C selector of a method"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        },
        {
          "link" : "https:\/\/github.com\/tkremenek",
          "name" : "Ted Kremenek"
        },
        {
          "link" : "http:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        },
        {
          "link" : "",
          "name" : "Alex Migicovsky"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        },
        {
          "link" : "",
          "name" : "Ali Ozer"
        },
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        }
      ],
      "id" : "SE-0023",
      "link" : "0023-api-guidelines.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "cb6b5abb0d74129cf26301d603fa4802329925c6",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The design of commonly-used libraries has a large impact on the overall feel of a programming language. Great libraries feel like an extension of the language itself, and consistency across libraries elevates the overall development experience. To aid in the construction of great Swift libraries, one of the major goals for Swift 3 is to define a set of API design guidelines and to apply those design guidelines consistently.",
      "title" : "API Design Guidelines"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jcampbell05",
          "name" : "James Campbell"
        }
      ],
      "id" : "SE-0024",
      "link" : "0024-optional-value-setter.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "98f45801cc782d83cf2aea0a91f70cf893aaa96f",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Introduce a new operator an \"Optional Value Setter\". If the optional is set via this operator then the new value is only set if there isn't an already existing value.",
      "title" : "Optional Value Setter `??=`"
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "Ilya Belenkiy"
        }
      ],
      "id" : "SE-0025",
      "link" : "0025-scoped-access-level.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "ef2900ef7e22271f4de6110dcf4e9b7b89096acb",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Scoped access level allows hiding implementation details of a class or a class extension at the class\/extension level, instead of a file. It is a concise expression of the intent that a particular part of a class or extension definition is there only to implement a public API for other classes or extensions and must not be used directly anywhere outside of the scope of the class or the extension.",
      "title" : "Scoped Access Level",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1275",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1275",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "David Scrève"
        }
      ],
      "id" : "SE-0026",
      "link" : "0026-abstract-classes-and-methods.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter\/",
        "name" : "Joe Groff"
      },
      "sha" : "c86badb14a7357474c78b8df1f4339db4fa038ea",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "When developing framework and reusable code, we need to develop classes that are partially abstract with partial implementation. Protocol and protocol extensions provide this, but they cannot have attributes as classes have. A partial class combines the behavior of a class with the requirement of implementing methods in inherited class like protocols.",
      "title" : "Abstract classes and methods"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/zwaldowski",
          "name" : "Zachary Waldowski"
        }
      ],
      "id" : "SE-0027",
      "link" : "0027-string-from-code-units.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "ddae996dba321ec860939f710e7b5e468e5950db",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Going back and forth from Strings to their byte representations is an important part of solving many problems, including object serialization, binary and text file formats, wire\/network interfaces, and cryptography. Swift has such utilities, but currently only exposed through `String.Type.fromCString(_:)` and `String.Type.fromCStringRepairingIllFormedUTF8(_:)`.",
      "title" : "Expose code unit initializers on String"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0028",
      "link" : "0028-modernizing-debug-identifiers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "6787f7208fdf36c1fc1468c53e6908ae08f27085",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "This proposal aims to eliminate Swift's use of \"[screaming snake case](https:\/\/en.wikipedia.org\/wiki\/Snake_case)\" like `__FILE__` and `__FUNCTION__` and replacing identifier instances with common [octothorpe-prefixed](https:\/\/en.wiktionary.org\/wiki\/octothorpe) lowercase `#identifier` representations.",
      "title" : "Modernizing Swift's Debugging Identifiers",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-669",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-669",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0029",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8e12008d2b34a605f8766310f53d5668f3d50955",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0029-remove-implicit-tuple-splat.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "605a7cec37fb83f0257d895a283fbde06e49b7af",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Function call expressions (which include several syntactic forms that apply an argument list to something of function type) currently have a dual nature in Swift.  Given something like:",
      "title" : "Remove implicit tuple splat behavior from function applications"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0030",
      "link" : "0030-property-behavior-decls.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "2a48404d780e92d2b52708fca6a1f4a846fd984b",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "There are property implementation patterns that come up repeatedly. Rather than hardcode a fixed set of patterns into the compiler, we should provide a general \"property behavior\" mechanism to allow these patterns to be defined as libraries.",
      "title" : "Property Behaviors"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        },
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0031",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1333",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0031-adjusting-inout-declarations.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "8dc23b285dc520aa7a400c750c1d67002a5a8a9a",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The `inout` keyword indicates copy-in\/copy-out argument behavior. In its current implementation the keyword prepends argument names. We propose to move the `inout` keyword to the right side of the colon to decorate the type instead of the parameter label.",
      "title" : "Adjusting `inout` Declarations for Type Decoration"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        }
      ],
      "id" : "SE-0032",
      "link" : "0032-sequencetype-find.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "b00f3b1bb123e5c5d40fa4b6cfeda454c70b0304",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Add a new extension method to `Sequence` called `first(where:)` that returns the found element.",
      "title" : "Add `first(where:)` method to `Sequence`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1519",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1519",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/SlaunchaMan",
          "name" : "Jeff Kelley"
        }
      ],
      "id" : "SE-0033",
      "link" : "0033-import-objc-constants.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "06e12fcb715a548bd8ca95db66032779af941c6b",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Given a list of constants in an Objective-C file, add an attribute that will enable Swift to import them as either an Enum or a Struct, using `RawRepresentable` to convert to their original type. This way, instead of passing strings around for APIs, we can use more type-safe objects and take advantage of Swift’s code completion, as well as making our Swift (and Objective-C!) code more readable and more approachable to beginners.",
      "title" : "Import Objective-C Constants as Swift Types"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0034",
      "link" : "0034-disambiguating-line.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "dbb3d1d128e093a1ae6adb1c10214bedd3b70808",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In being accepted, Swift Evolution SE-0028 (0028-modernizing-debug-identifiers.md) overloads the use of `#line` to mean both an identifier that maps to a calling site's line number within a file and acts as part of a line control statement. This proposal nominates `#setline` to replace `#line` for file and line syntactic source control.",
      "title" : "Disambiguating Line Control Statements from Debugging Identifiers",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-840",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-840",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0035",
      "link" : "0035-limit-inout-capture.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "4a44fd09ff5eabec6f6ccd942abc73162e03508b",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift's behavior when closures capture `inout` parameters and escape their enclosing context is a common source of confusion. We should disallow implicit capture of `inout` parameters except in `@noescape` closures.",
      "title" : "Limiting `inout` capture to `@noescape` contexts",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-807",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-807",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0036",
      "link" : "0036-enum-dot.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "a8e5293c9855aed2c0d71d933cd619c12c66125f",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member. This proposal introduces a rule that requires leading dots or fully qualified references (EnumType.caseMember) to provide a more consistent developer experience to clearly disambiguate static cases from instance members.",
      "title" : "Requiring Leading Dot Prefixes for Enum Instance Member Implementations",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1236",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1236",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jder",
          "name" : "Jesse Rusak"
        }
      ],
      "id" : "SE-0037",
      "link" : "0037-clarify-comments-and-operators.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "42061f70beb0291d16671a7624db24e704793e4e",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "There are several inconsistencies in how comments are treated when determining whether an operator is prefix, postfix, or infix. They are sometimes treated as whitespace, sometimes as non-whitespace, and this differs depending on whether they are to the left or right of an operator, and the contents of the comment itself. This proposal suggests a uniform set of rules for how these cases should be parsed.",
      "title" : "Clarify interaction between comments & operators",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-960",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-960",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        }
      ],
      "id" : "SE-0038",
      "link" : "0038-swiftpm-c-language-targets.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      },
      "sha" : "d86482524e3380e4bb21758bb3cfa2a9aa019aac",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This is a proposal for adding initial package manager support for the C, C++, Objective-C, and Objective-C++ languages (henceforth, simply referred to as \"C\" languages). This proposal is limited in scope to only supporting targets consisting entirely of C languages; there is no provision for supporting targets which include both C and Swift sources.",
      "title" : "Package Manager C Language Target Support",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-821",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-821",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0039",
      "link" : "0039-playgroundliterals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "31cd21031aaa207f0b8f2aaa902ef301feef1988",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Playground literals tokenize colors, files, and images. They provide drag-and-drop convenience and in-context visualizations that offer easy reference and manipulation when designing playground content. These literals are built using a simple square bracket syntax that, in the current form, conflicts with collection literals. This proposal redesigns playground literals to follow the precedent of #available and #selector.",
      "title" : "Modernizing Playground Literals",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-917",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-917",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0040",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1537",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0040-attributecolons.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "dc36461d86d76c92c1264395ecc3807c1bd33f3f",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Attribute arguments are unlike other Swift language arguments. At the call site, they use `=` instead of colons to distinguish argument names from passed values. This proposal brings attributes into compliance with Swift standard practices by replacing the use of \"=\" with \":\" in this one-off case.",
      "title" : "Replacing Equal Signs with Colons For Attribute Arguments"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/anandabits",
          "name" : "Matthew Johnson"
        },
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0041",
      "link" : "0041-conversion-protocol-conventions.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "e3af4e753fee71466b36e749d2ef77511857994c",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "We propose to expand and improve the naming conventions established by the API Guidelines and the standard library with regard to conversion related protocols. We believe common protocol naming patterns should be clear, consistent, and meaningful. The Swift standard library includes slightly north of eighty protocols. Of these, about 15% concern themselves with type initialization and conversion. This proposal assigns specific conventional suffixes to these tasks.  We present this proposal to improve overall language coherence.",
      "title" : "Updating Protocol Naming Conventions for Conversions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0042",
      "link" : "0042-flatten-method-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "3cd641166434b77711ff8279216c3b76168d6aba",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "An **unapplied method reference**, such as `Type.instanceMethod` in the following example, currently produces a curried function value of type `(Self) -> (Args...) -> Ret`:",
      "title" : "Flattening the function type of unapplied method references",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1051",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1051",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/therealbnut",
          "name" : "Andrew Bennett"
        }
      ],
      "id" : "SE-0043",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1383",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0043-declare-variables-in-case-labels-with-multiple-patterns.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "abc9390c74f8400399fc4d609bba2a8d9246bb16",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In Swift 2, it is possible to match multiple patterns in cases. However cases cannot contain multiple patterns if the case declares variables.",
      "title" : "Declare variables in 'case' labels with multiple patterns"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0044",
      "link" : "0044-import-as-member.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "a978919016aa99327a1b7b9bbf4deb50f3125009",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift imports C declarations, allowing Swift code to natively interact with C libraries and frameworks. But, such imported APIs do not feel natural to interact with in Swift. This proposal seeks to provide a mechanism for C API authors to specify the capability of importing functions and variables as members on imported Swift types. It also seeks to provide an automatic inference option for APIs that follow a consistent, disciplined naming convention.",
      "title" : "Import as member",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1053",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1053",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        }
      ],
      "id" : "SE-0045",
      "link" : "0045-scan-takewhile-dropwhile.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "143395fbdf7ba0b7f619c572ca41ad9f30369c6e",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "Add 2 new `Sequence` functions `prefix(while:)` and `drop(while:)`, with overrides as appropriate on `Collection`, `LazySequenceProtocol`, and `LazyCollectionProtocol`.",
      "title" : "Add prefix(while:) and drop(while:) to the stdlib",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1516",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1516",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/JakeCarter",
          "name" : "Jake Carter"
        },
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0046",
      "link" : "0046-first-label.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "0e1940d728d0c29253614032e0247e2903cd8a5e",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "We propose to normalize the first parameter declaration in methods and functions. In this proposal, first parameter declarations will match the existing behavior of the second and later parameters. All parameters, regardless of position, will behave uniformly. This will create a simple, consistent approach to parameter declaration throughout the Swift programming language and bring method and function declarations in-sync with initializers, which already use this standard.",
      "title" : "Establish consistent label behavior across all parameters including first labels",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-961",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-961",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/akashivskyy",
          "name" : "Adrian Kashivskyy"
        }
      ],
      "id" : "SE-0047",
      "link" : "0047-nonvoid-warn.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "6487d18d2da62b13ed504b2169c89e9855be1d76",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In Swift's current incarnation, annotating methods and functions with `@warn_unused_result` informs the compiler that a non-void return type *should be consumed*. It is an affirmative declaration. In its absence, ignored results do not raise warnings or errors.",
      "title" : "Defaulting non-Void functions so they warn on unused results",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1052",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1052",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0048",
      "link" : "0048-generic-typealias.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "4f6efecb5ad078f9740a5be2e26b70ca6bf1274c",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal aims to add generic typealiases to Swift.",
      "title" : "Generic Type Aliases"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0049",
      "link" : "0049-noescape-autoclosure-type-attrs.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "a6572f2c8293a7f0ab403d07bf89e0f8d29c971a",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal suggests moving the existing `@noescape` and `@autoclosure` attributes from being declaration attributes on a parameter to being type attributes.  This improves consistency and reduces redundancy within the language, e.g. aligning with [SE-0031](0031-adjusting-inout-declarations.md), which moved `inout`, making declaration and type syntax more consistent.",
      "title" : "Move @noescape and @autoclosure to be type attributes",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1235",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1235",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "http:\/\/github.com\/xwu",
          "name" : "Xiaodi Wu"
        }
      ],
      "id" : "SE-0050",
      "link" : "0050-floating-point-stride.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d808a9163475086e1919253981d5ef98f2c3c85f",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "",
      "title" : "Decoupling Floating Point Strides from Generic Implementations"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0051",
      "link" : "0051-stride-semantics.md",
      "reviewManager" : {
        "link" : "",
        "name" : "N\/A"
      },
      "sha" : "bb96a091506155e160f1b317ec60f5400cbd58f7",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "",
      "title" : "Conventionalizing `stride` semantics"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/PatrickPijnappel",
          "name" : "Patrick Pijnappel"
        }
      ],
      "id" : "SE-0052",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1702",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0052-iterator-post-nil-guarantee.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "7b9c287fe7cf4fc7168d4ed6f13ff23c0fe09c09",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Currently, the documentation for `IteratorType.next()` has the precondition that when calling `next()`, no preceding call to `next()` should have returned `nil`, and in fact encourages implementations to raise a `preconditionFailure()` for violations of this requirement. However, all current 27 `IteratorType` implementations in the standard library return `nil` indefinitely. Many users are likely unaware of the precondition, expecting all iterators to return `nil` indefinitely and writing code that might rely on this assumption. Such code will usually run fine, until someone does in fact pass in an iterator not repeating `nil` (it's a silent corner case).",
      "title" : "Change IteratorType post-nil guarantee"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/nirma",
          "name" : "Nicholas Maccharoli"
        }
      ],
      "id" : "SE-0053",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1812",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0053-remove-let-from-function-parameters.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "c3b22b490771fea66a28f7ae8e894ca093b6b108",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Since function parameters are immutable by default, allowing function parameters to be explicitly labeled as `let` is a bit of a syntactic redundancy that would best be removed. Not allowing function parameters to be explicitly declared as `let` would permit a more simple and uniform function declaration syntax for swift. Furthermore proposal [SE-0003​: \"Removing `var` from Function Parameters\"](0003-remove-var-parameters.md) removes `var` from function parameters removing any possible ambiguity as to whether a function parameter is immutable or not.",
      "title" : "Remove explicit use of `let` from Function Parameters"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/cwillmor",
          "name" : "Chris Willmore"
        }
      ],
      "id" : "SE-0054",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14299",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0054-abolish-iuo.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "60a562f10efe2d0d486feeee80c1d9e332e148f8",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal seeks to remove the `ImplicitlyUnwrappedOptional` type from the Swift type system and replace it with an IUO attribute on declarations. Appending `!` to the type of a Swift declaration will give it optional type and annotate the declaration with an attribute stating that it may be implicitly unwrapped when used.",
      "title" : "Abolish `ImplicitlyUnwrappedOptional` type"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jrose-apple",
          "name" : "Jordan Rose"
        }
      ],
      "id" : "SE-0055",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1878",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0055-optional-unsafe-pointers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "6c69e20408b1742140c32f93e3c38399805ca722",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In Objective-C, pointers (whether to objects or to a non-object type) can be marked as `nullable` or `nonnull`, depending on whether the pointer value can ever be null. In Swift, however, there is no such way to make this distinction for pointers to non-object types: an `UnsafePointer<Int>` might be null, or it might never be.",
      "title" : "Make unsafe pointer nullability explicit using Optional"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0056",
      "link" : "0056-trailing-closures-in-guard.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "ee77c952feab0ecfc70abcbc690f451e14182286",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Swift-evolution thread: [\"Allow trailing closures in 'guard' conditions\"](https:\/\/forums.swift.org\/t\/proposal-allow-trailing-closures-in-guard-conditions\/1909)",
      "title" : "Allow trailing closures in `guard` conditions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0057",
      "link" : "0057-importing-objc-generics.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "5b3b7892a02a364e7494299eaff9b84a458042ca",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Objective-C's *lightweight generics* feature allows Objective-C classes to be parameterized on the types they work with, similarly to Swift's generics syntax. Their adoption in Foundation's collection classes allow Objective-C APIs to be bridged more effectively into Swift. For example, an `NSArray<NSString *> *` bridges to `[String]` rather than the far-weaker `[AnyObject]`. However, parameterized Objective-C classes lose their type parameters when they are imported into Swift, so uses of type parameters outside of bridged, typed collections (`NSArray`, `NSDictionary`, `NSSet`) don't benefit in Swift. This proposal introduces a way to import the type parameters of Objective-C classes into Swift.",
      "title" : "Importing Objective-C Lightweight Generics"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/russbishop",
          "name" : "Russ Bishop"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0058",
      "link" : "0058-objectivecbridgeable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "6461ecec58729405b0ca0f0519895b184e050afd",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Provide an `ObjectiveCBridgeable` protocol that allows a Swift type to control how it is represented in Objective-C by converting into and back from an entirely separate `@objc` type. This frees library authors to create truly native Swift APIs while still supporting Objective-C.",
      "title" : "Allow Swift types to provide custom Objective-C representations"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0059",
      "link" : "0059-updated-set-apis.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1d69edb0c48e31433bc7151ad84e53d9374d0d51",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "When [SE-0006, *Apply API Guidelines to the Standard Library*](0006-apply-api-guidelines-to-the-standard-library.md) was proposed, the lack of an acceptable naming convention for some mutating\/nonmutating method pairs meant that the APIs of `SetAlgebra`, `Set<T>` and `OptionSet<T>` were not adjusted accordingly.  This proposal remedies both problems by:",
      "title" : "Update API Naming Guidelines and Rewrite Set APIs Accordingly"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0060",
      "link" : "0060-defaulted-parameter-order.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "ad7bfd59c9f920abeb3efcc6e4205801432d8cc7",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift generally follows in the Smalltalk\/Objective-C tradition of compound method names with significant, order-sensitive argument labels, but an exception is made for parameters with default arguments. We should remove this exception.",
      "title" : "Enforcing order of defaulted parameters",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1489",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1489",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/tjw",
          "name" : "Timothy J. Wood"
        }
      ],
      "id" : "SE-0061",
      "link" : "0061-autoreleasepool-signature.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "sha" : "5d81771c92aecedd864a44f515b126664ac6527a",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The `autoreleasepool` function in the standard library does not currently support a return value or error handling, making it difficult and error-prone to pass results or errors from the body to the calling context.",
      "title" : "Add Generic Result and Error Handling to autoreleasepool()",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-842",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-842",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-1394",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1394",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0062",
      "link" : "0062-objc-keypaths.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "54fa946647ae22bc2fac780debf41a6a214b4fa2",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In Objective-C and Swift, key-paths used by KVC and KVO are represented as string literals (e.g., `\"friend.address.streetName\"`). This proposal seeks to improve the safety and resilience to modification of code using key-paths by introducing a compiler-checked expression.",
      "title" : "Referencing Objective-C key-paths",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1237",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1237",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mxcl",
          "name" : "Max Howell"
        }
      ],
      "id" : "SE-0063",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "257",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0063-swiftpm-system-module-search-paths.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      "sha" : "cb11562abf3e763cea948e456c5c6bde3b1d760d",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift is able to `import` C libraries in the same manner as Swift libraries.",
      "title" : "SwiftPM System Module Search Paths"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0064",
      "link" : "0064-property-selectors.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "e3e7b61e350a0fcbf16ae21ba233b78f4d1e51f0",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Proposal [SE-0022](0022-objc-selectors.md) was accepted and implemented to provide a `#selector` expression to reference Objective-C method selectors. Unfortunately, it does not allow referencing the getter and setter methods of properties. This proposal seeks to provide a design to reference those methods for the Swift 3.0 timeframe.",
      "title" : "Referencing the Objective-C selector of property getters and setters",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1239",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1239",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Maxim Moiseev"
        }
      ],
      "id" : "SE-0065",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2108",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0065-collections-move-indices.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "ed31fb20e78ca3f16b11e9709b8b83117d0465d2",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "",
      "title" : "A New Model for Collections and Indices"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0066",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3d2b5bcc5350e1dea2ed8a0a95cd12ff5c760f24",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0066-standardize-function-type-syntax.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "e5cd1c72a7456959c43bfb5e76400f4600b9988c",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Function types in Swift use parentheses around their parameter list (aligning with the function declaration syntax, as well as the syntax used to call a function).  However, in the degenerate case of a single non-variadic, unlabeled argument with no attributes, Swift allows the parentheses to be omitted.  For example, these types:",
      "title" : "Standardize function type argument syntax to require parentheses"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0067",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2453",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0067-floating-point-protocols.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "0097be9c5bf62d5c32af9d0d18149a7aa596ab3b",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The current FloatingPoint protocol is quite limited, and provides only a small subset of the features expected of an IEEE 754 conforming type.  This proposal expands the protocol to cover most of the expected basic operations, and adds a second protocol, BinaryFloatingPoint, that provides a number of useful tools for generic programming with the most commonly used types.",
      "title" : "Enhanced Floating Point Protocols"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0068",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "22863",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0068-universal-self.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "e6dda07d6bd206f0705ba11a16d52efcb541809d",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "Within a class scope, `Self` means \"the dynamic class of `self`\". This proposal extends that courtesy to value types and to the bodies of class members by renaming `dynamicType` to `Self`. This establishes a universal and consistent way to refer to the dynamic type of the current receiver.",
      "title" : "Expanding Swift `Self` to class members and value types",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1340",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1340",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        }
      ],
      "id" : "SE-0069",
      "link" : "0069-swift-mutability-for-foundation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "e16169cf97a2cfcf9a1da7ade8e9fbb1f688bb8e",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "One of the core principles of Swift is \"mutability when you need it.\" This is espoused by Apple's official documentation about Swift:",
      "title" : "Mutability and Foundation Value Types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0070",
      "link" : "0070-optional-requirements.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "ee2d148c2bd50f6e77e6fdf3e86d074c5f9d6ae9",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift currently has support for \"optional\" requirements in Objective-C protocols, to match with the corresponding feature of Objective-C. We don't want to make optional requirements a feature of Swift protocols (for reasons described below), nor can we completely eliminate the notion of the language (for different reasons also described below). Therefore, to prevent confusion about our direction, this proposal requires an explicit '@objc' attribute on each `optional` requirement to indicate that this is an Objective-C compatibility feature.",
      "title" : "Make Optional Requirements Objective-C-only",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1395",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1395",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0071",
      "link" : "0071-member-keywords.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "3ac330d7b07c534ebee3e3bd4b5504c617d3a4b4",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The  [Swift API Design Guidelines](https:\/\/swift.org\/documentation\/api-design-guidelines\/) consider enum cases as values that use the lowerCamelCase naming conventions. This means that case names that previously did not conflict with keywords (such as `Default`, `Private`, `Repeat`) now cause conflicts, a problem that is particularly acute when the naming conventions are applied by the Clang importer (per [SE-0005](0005-objective-c-name-translation.md)). To mitigate this issue, this proposal allows the use of most keywords after a \".\", similarly to how [SE-0001](0001-keywords-as-argument-labels.md) allows keywords are argument labels.",
      "title" : "Allow (most) keywords in member references"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jopamer",
          "name" : "Joe Pamer"
        }
      ],
      "id" : "SE-0072",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2419",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0072-eliminate-implicit-bridging-conversions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "47910a312acd4a2d46c68b276e6e596e84bf8701",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In Swift 1.2, we attempted to remove all implicit bridging conversions from the language. Unfortunately, problems with how the v1.2 compiler imported various un-annotated Objective-C APIs caused us to scale back on our ambitions. In the interest of further simplifying our type system and our user model, we would like to complete this work and fully remove implicit bridging conversions from the language in Swift 3.",
      "title" : "Fully eliminate implicit bridging conversions from Swift"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/zneak",
          "name" : "Félix Cloutier"
        },
        {
          "link" : "https:\/\/github.com\/groue",
          "name" : "Gwendal Roué"
        }
      ],
      "id" : "SE-0073",
      "link" : "0073-noescape-once.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "9d1e03ea69c225d8fb1289e2e7648e29f37d3c29",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal introduces an optional `once` argument to the `@noescape` attribute. The `@noescape(once)` attribute enforces that the closure does not escape, and that it is run exactly once on any code path returning from the function. For clients, it allows the compiler to relax initialization requirements and close the gap between closure and \"inline code\" a little bit.",
      "title" : "Marking closures as executing exactly once"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lorenzoracca",
          "name" : "Lorenzo Racca"
        },
        {
          "link" : "https:\/\/github.com\/j-haj",
          "name" : "Jeff Hajewski"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0074",
      "link" : "0074-binary-search.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "e8d135e456d994624da51ca97a610488d0adf222",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Swift does not offer any way to efficiently search sorted collections. This proposal seeks to add a few different functions that implement the binary search algorithm.",
      "title" : "Implementation of Binary Search functions"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0075",
      "link" : "0075-import-test.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "2ea41c3a8c4858c66162fb04cc0a827a5d3201d2",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "Expanding the build configuration suite to test for the ability to import certain modules was [first introduced](https:\/\/forums.swift.org\/t\/idea-support-if-os-darwin-as-shorthand-for-os-ios-os-osx-os-watchos-os-tvos\/1493) on the Swift-Evolution list by Lily Ballard. Although her initial idea (checking for Darwin to differentiate Apple targets from non-Apple targets) proved problematic, developers warmly greeted the notion of an import-based configuration test. Dmitri Gribenko wrote, \"There's a direction that we want to move to a unified name for the libc module for all platform, so 'can import Darwin' might not be a viable long-term strategy.\" Testing for imports offers advantages that stand apart from this one use-case: to test for API availability before use.",
      "title" : "Adding a Build Configuration Import Test",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1560",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1560",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Jnosh",
          "name" : "Janosch Hildebrand"
        }
      ],
      "id" : "SE-0076",
      "link" : "0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "2de79eb0c0a831280269a410bc84796207f852fe",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "`UnsafeMutablePointer` includes several methods to non-destructively copy elements from memory pointed to by another `UnsafeMutablePointer` instance. I propose adding overloads of these methods to `UnsafeMutablePointer` that allow an `UnsafePointer` source.",
      "title" : "Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1490",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1490",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Anton3",
          "name" : "Anton Zhilin"
        }
      ],
      "id" : "SE-0077",
      "link" : "0077-operator-precedence.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "e5fde9f13457636aebc65f47cf8f978a4ea6a5e5",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Replace syntax of operator declaration, and replace numerical precedence with partial ordering of operators:",
      "title" : "Improved operator declarations"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        },
        {
          "link" : "https:\/\/github.com\/bolshedvorsky",
          "name" : "Sergey Bolshedvorsky"
        }
      ],
      "id" : "SE-0078",
      "link" : "0078-rotate-algorithm.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "233cab708f5f708a630ef6c36ff79d40b3bfb4d0",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This proposal is to add rotation and in-place reversing methods to Swift's standard library collections.",
      "title" : "Implement a rotate algorithm, equivalent to std::rotate() in C++"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/emaloney",
          "name" : "Evan Maloney"
        }
      ],
      "id" : "SE-0079",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15306",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0079-upgrade-self-from-weak-to-strong.md",
      "reviewManager" : {
        "link" : "",
        "name" : "TBD"
      },
      "sha" : "f5fb30488ace556b25b5ee34dde9eb216181fcca",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "When working with escaping Swift closures, it is a common pattern to have the closure capture `self` weakly to avoid creating an object reference cycle.",
      "title" : "Allow using optional binding to upgrade `self` from a weak to strong reference"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/anandabits",
          "name" : "Matthew Johnson"
        }
      ],
      "id" : "SE-0080",
      "link" : "0080-failable-numeric-initializers.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "fcc402eb2f215f1a21bd7a51350e3cfbdb58922b",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "Swift numeric types all currently have a family of conversion initializers.  In many use cases they leave a lot to be desired.  Initializing an integer type with a floating point value will truncate any fractional portion of the number.  Initializing with an out-of-range value traps.",
      "title" : "Failable Numeric Conversion Initializers",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1491",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1491",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        },
        {
          "link" : "https:\/\/github.com\/CodaFi",
          "name" : "Robert Widmann"
        },
        {
          "link" : "https:\/\/github.com\/pyrtsa",
          "name" : "Pyry Jahkola"
        }
      ],
      "id" : "SE-0081",
      "link" : "0081-move-where-expression.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "c0db347b00d67df831a75644ebb104e909b99be0",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal suggests moving the `where` clause to the end of the declaration syntax, but before the body, for readability reasons. It has been discussed at length on the following swift-evolution thread:",
      "title" : "Move `where` clause to end of declaration",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1561",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1561",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        }
      ],
      "id" : "SE-0082",
      "link" : "0082-swiftpm-package-edit.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      "sha" : "ff458171b2e2cca3dc85413885d94351e5791bf0",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "This is a proposal for changing the behavior for iterative development of a group of packages. In particular, we will change the default location to which package dependency sources are cloned, the package managers behavior around those sources, and add a new feature for allowing iterative development. These features are tightly interrelated, which is why they are combined into one proposal.",
      "title" : "Package Manager Editable Packages"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0083",
      "link" : "0083-remove-bridging-from-dynamic-casts.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "4f224f911cda8d0a72db5b5b5e7c922d57159b54",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Dynamic casts using `as?`, `as!`, and `is` are currently able to dynamically perform Cocoa bridging conversions, such as from `String` to `NSString` or from an `ErrorProtocol`-conforming type to `NSError`. This functionality should be removed to make dynamic cast behavior simpler, more efficient, and easier to understand. To replace this functionality, initializers should be added to bridged types, providing an interface for these conversions that's more consistent with the conventions of the standard library.",
      "title" : "Remove bridging conversion behavior from dynamic casts"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/grp",
          "name" : "Grant Paul"
        },
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0084",
      "link" : "0084-trailing-commas.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d930b4a84dbee4b4e0935c5268ae84916ea77531",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Swift permits trailing commas after the last element in array or dictionary literal. This proposal extends that to parameters and tuples.",
      "title" : "Allow trailing commas in parameter lists and tuples"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rballard",
          "name" : "Rick Ballard"
        },
        {
          "link" : "http:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        }
      ],
      "id" : "SE-0085",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "364",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0085-package-manager-command-name.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "b2c77357fc33900f9261e62b77ab7a2f1913d0c4",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This is a proposal for changing the command names used for invoking the Swift package manager. Instead of hanging all functionality off of `swift build` and `swift test`, we will introduce a new `swift package` command with multiple subcommands. `swift build` and `swift test` will remain as top-level commands due to their frequency of use.",
      "title" : "Package Manager Command Names"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        },
        {
          "link" : "https:\/\/github.com\/phausler",
          "name" : "Philippe Hausler"
        }
      ],
      "id" : "SE-0086",
      "link" : "0086-drop-foundation-ns.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1fb18ea38a67557d0b8920a146ab1edc17093f80",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "As part of *Swift 3 API Naming* and the introduction of *Swift Core Libraries*, we are dropping the `NS` prefix from key Foundation types in Swift.",
      "title" : "Drop NS Prefix in Swift Foundation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Anton3",
          "name" : "Anton3"
        }
      ],
      "id" : "SE-0087",
      "link" : "0087-lazy-attribute.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d6de4a104273c0657bf2e2c4a87655ac19283101",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Make `lazy` declaration modifier an attribute by renaming it to `@lazy`. Example:",
      "title" : "Rename `lazy` to `@lazy`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mwwa",
          "name" : "Matt Wright"
        }
      ],
      "id" : "SE-0088",
      "link" : "0088-libdispatch-for-swift3.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d87567e22aa47e9cd2fc8ed9ed4f3311795c878a",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The existing libdispatch module imports the C API almost verbatim. To move towards a more natural Swift interface and away from the C API, this proposal outlines changes to the libdispatch module and the motivation behind them.",
      "title" : "Modernize libdispatch for Swift 3 naming conventions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/austinzheng",
          "name" : "Austin Zheng"
        },
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        }
      ],
      "id" : "SE-0089",
      "link" : "0089-rename-string-reflection-init.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "c9230135c05fdb82b7a1b28a83077ca1419ddd79",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift's `String` type ships with a large number of initializers that take one unlabeled argument. One of these initializers, defined as `init<T>(_: T)`, is used to create a string containing the textual representation of an object. It is very easy to write code which accidentally invokes this initializer, when one of the other synonymous initializers was desired. Such code will compile without warnings and can be very difficult to detect.",
      "title" : "Renaming `String.init<T>(_: T)`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1881",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1881",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        },
        {
          "link" : "https:\/\/github.com\/tannernelson",
          "name" : "Tanner Nelson"
        }
      ],
      "id" : "SE-0090",
      "link" : "0090-remove-dot-self.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "ccbcc17a46920a059da9642fde913a26b1de5f0e",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "Swift's grammar currently requires that type references only appear as part of a constructor call `T(x)` or member access `T.x`. To get the metatype object for `T`, one must refer to the special member `T.self`. I propose allowing type references to appear freely in expressions and removing the `.self` member from the language.",
      "title" : "Remove `.self` and freely allow type references in expressions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/allevato",
          "name" : "Tony Allevato"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0091",
      "link" : "0091-improving-operators-in-protocols.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "afa8462219e8367a635b4a64d6058457365984c0",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "When a type conforms to a protocol that declares an operator as a requirement, that operator must be implemented as a global function defined outside of the conforming type. This can lead both to user confusion and to poor type checker performance since the global namespace is overcrowded with a large number of operator overloads. This proposal mitigates both of those issues by proposing that operators in protocols be declared statically (to change and clarify where the conforming type implements it) and that Swift use universal lookup for operators that finds candidates both at the global scope and within types.",
      "title" : "Improving operator requirements in protocols",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2073",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2073",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0092",
      "link" : "0092-typealiases-in-protocols.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "ec16339c47d12aa5248e331778e9cd2ed01514b3",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal is from the [Generics Manifesto](https:\/\/github.com\/apple\/swift\/blob\/master\/docs\/GenericsManifesto.md) and brings the `typealias` keyword back into protocols for type aliasing.",
      "title" : "Typealiases in protocols and protocol extensions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1539",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1539",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        }
      ],
      "id" : "SE-0093",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2929",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0093-slice-base.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "sha" : "361c42c159c65f9820d7d2413964605b3995ca32",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Slice types [provided by the standard library](https:\/\/github.com\/apple\/swift\/blob\/master\/stdlib\/public\/core\/Slice.swift.gyb) should allow public readonly access to their base collections to make efficient implementations of protocol requirements possible in conforming types.",
      "title" : "Adding a public `base` property to slices"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        },
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0094",
      "link" : "0094-sequence-function.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "8ad63f4c59222b54cea2d82804b9831e9f244745",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal introduces `sequence(first:next:)` and `sequence(state:next:)`, a pair of global functions that return (potentially-infinite) sequences of lazy applications of a closure to an initial value or a mutable state.",
      "title" : "Add sequence(first:next:) and sequence(state:next:) to the stdlib",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1622",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1622",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DevAndArtist",
          "name" : "Adrian Zubarev"
        },
        {
          "link" : "https:\/\/github.com\/austinzheng",
          "name" : "Austin Zheng"
        }
      ],
      "id" : "SE-0095",
      "link" : "0095-any-as-existential.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "94aa3fc309b87ce982653a45a6e23b4dedda74aa",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The current `protocol<>` construct, which defines an existential type consisting of zero or more protocols, should be replaced by an infix `&` type operator joining bare protocol type names.",
      "title" : "Replace `protocol<P1,P2>` syntax with `P1 & P2` syntax",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1938",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1938",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0096",
      "link" : "0096-dynamictype.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "4222d619c8ee53df111844885a45f9b9f01b350d",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal establishes `dynamicType` as a named operator rather than a property.",
      "title" : "Converting `dynamicType` from a property to an operator",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2218",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2218",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0097",
      "link" : "0097-negative-attributes.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "6a4d3c19cd973ff0622ac4fea2de64616949db84",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal normalizes naming for \"negative\" attributes by adopting a rule that replaces property names starting with `no` with adjectives starting with `non`.",
      "title" : "Normalizing naming for \"negative\" attributes"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0098",
      "link" : "0098-didset-capitalization.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d1a3cfff8e83b393e1d8be10b4fe441d26276201",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal adopts consistent conjoined keyword lowercasing.",
      "title" : "Lowercase `didSet` and `willSet` for more consistent keyword casing"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0099",
      "link" : "0099-conditionclauses.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "db41664fc6f9682e936268e070bc3baed186be68",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift condition clauses appear in `guard`, `if`, and `while` statements. This proposal re-architects the condition grammar to enable an arbitrary mix of Boolean expressions, `let` conditions (which test and unwrap optionals), general `case` clauses for arbitrary pattern matching, and availability tests.  It removes `where` clauses from optional binding conditions and case conditions, and eliminates gramatical ambiguity by using commas for separation between clauses instead of using them both to separate clauses and terms within each clause.  These modifications streamline Swift's syntax and alleviate the situation where many Swift developers don't know they can use arbitrary Boolean conditions after a value binding.",
      "title" : "Restructuring Condition Clauses"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0100",
      "link" : "0100-add-sequence-based-init-and-merge-to-dictionary.md",
      "reviewManager" : {
        "link" : "",
        "name" : "TBD"
      },
      "sha" : "441c7ca5330b679e719e4469a993b0a85f16b5e1",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "The `Dictionary` type should allow initialization from a sequence of `(Key, Value)` tuples and offer methods that merge a sequence of `(Key, Value)` tuples into a new or existing dictionary, using a closure to combine values for duplicate keys.",
      "title" : "Add sequence-based initializers and merge methods to Dictionary"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0101",
      "link" : "0101-standardizing-sizeof-naming.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "445a5447b8fccbba681ca4f7222cad0634d6e3d4",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal addresses `sizeof`, `sizeofValue`, `strideof`, `strideofValue`, `align`, and `alignOf`. It discards the value-style standalone functions and combines the remaining items into a unified structure.",
      "title" : "Reconfiguring `sizeof` and related functions into a unified `MemoryLayout` struct"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0102",
      "link" : "0102-noreturn-bottom-type.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "a500061f8ebfc5faba23ef7472b68a826408077d",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "We should remove the rarely-used `@noreturn` function type attribute and instead express functions that don't return in terms of a standard uninhabited type.",
      "title" : "Remove `@noreturn` attribute and introduce an empty `Never` type",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1953",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1953",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/tanadeau",
          "name" : "Trent Nadeau"
        }
      ],
      "id" : "SE-0103",
      "link" : "0103-make-noescape-default.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "c1982da464866d7be03768baf41bb196637745d0",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The current default of closure arguments to functions (i.e., arguments to functions that themselves have function type such as `(T) -> U`) is to be \"escaping\", meaning they can escape the function body such as saving it to a field in a struct or a global variable. In order to say that a closure argument cannot possibly escape the function body (\"non-escaping\"), the developer must explicitly add an `@noescape` annotation to the argument type.",
      "title" : "Make non-escaping closures the default",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1952",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1952",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Maxim Moiseev"
        }
      ],
      "id" : "SE-0104",
      "link" : "0104-improved-integers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "42a7b3cf899f22fa2852a7d712b4ccbceb7ad544",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal cleans up Swifts integer APIs and makes them more useful for generic programming.",
      "title" : "Protocol-oriented integers",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3196",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3196",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0105",
      "link" : "0105-remove-where-from-forin-loops.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "a3f29187a64c133dcb8337927a62564b1f333ea4",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal removes `where` clauses from `for-in` loops, where they are better expressed (and read) as guard conditions.",
      "title" : "Removing Where Clauses from For-In Loops"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0106",
      "link" : "0106-rename-osx-to-macos.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "749830720d9aa7282ac5046a7581475bcd5295aa",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Starting in Sierra, Apple's Mac-based OS (OS X) will be renamed \"macOS\". All user-facing Swift APIs must go through Swift Evolution. While this is a trivial API change, I have put together a formal proposal as is normal and usual for this process.",
      "title" : "Add a `macOS` Alias for the `OSX` Platform Configuration Test",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1823",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1823",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-1887",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1887",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        }
      ],
      "id" : "SE-0107",
      "link" : "0107-unsaferawpointer.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "22614707d9f5764c66789d5c418c6a1b72316e0b",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift enforces type safe access to memory and follows strict aliasing rules. However, code that uses unsafe APIs or imported types can circumvent the language's natural type safety. Consider the following example of *type punning* using the `UnsafePointer` type:",
      "title" : "UnsafeRawPointer API"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Douglas Gregor"
        },
        {
          "link" : "",
          "name" : "Austin Zheng"
        }
      ],
      "id" : "SE-0108",
      "link" : "0108-remove-assoctype-inference.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "082ab850736b1a2f363ee192cb6dfaab2da86134",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "In Swift, a type `T` may choose to conform to a protocol `P`, where `P` has [associated types](https:\/\/developer.apple.com\/library\/ios\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/Generics.html#\/\/apple_ref\/doc\/uid\/TP40014097-CH26-ID189) that may be used in the protocol requirements. If the associated types are used in the requirements, the types that `T` chooses to bind those associated types to can currently be inferred by the type checker by examining how `T` chooses to implement `P`'s requirements:",
      "title" : "Remove associated type inference"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Anton3",
          "name" : "Anton Zhilin"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0109",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "76cf339694a41293dbbec9672b6df87a864087f2",
          "repository" : "swift",
          "type" : "commit"
        },
        {
          "account" : "apple",
          "id" : "af30ae32226813ec14c2bef80cb090d3e6c586fb",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0109-remove-boolean.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "3b1bde8fada5c4332743b8c064bec12b56bd8e09",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "For legacy and historical reasons Swift has supported a protocol named `Boolean` for abstracting over different concrete Boolean types.  This causes problems primarily because it is pointless and very confusing to newcomers to Swift: is quite different than `Bool`, but shows up right next to it in documentation and code completion.  Once you know that it is something you don't want, you constantly ignore it.  Boolean values are simple enough that we don't need a protocol to abstract over multiple concrete implementations.",
      "title" : "Remove the `Boolean` protocol"
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "Vladimir S."
        },
        {
          "link" : "https:\/\/github.com\/austinzheng",
          "name" : "Austin Zheng"
        }
      ],
      "id" : "SE-0110",
      "link" : "0110-distinguish-single-tuple-arg.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "afe39655adc136a91acbebc297e0ad06b687e172",
      "status" : {
        "state" : "implemented",
        "version" : ""
      },
      "summary" : "Swift's type system should properly distinguish between functions that take one tuple argument, and functions that take multiple arguments.",
      "title" : "Distinguish between single-tuple and multiple-argument function types",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2008",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2008",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "Austin Zheng"
        }
      ],
      "id" : "SE-0111",
      "link" : "0111-remove-arg-label-type-significance.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "99a23db8ac9b573d2624a79d7a9c688ba9d689e7",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift's type system should not allow function argument labels to be expressed as part of a function type.",
      "title" : "Remove type system significance of function argument labels",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2009",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2009",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/CharlesJS",
          "name" : "Charles Srstka"
        }
      ],
      "id" : "SE-0112",
      "link" : "0112-nserror-bridging.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "22a428d830bbba1cec6ce1aadbd2b7d979d3206f",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift's error handling model interoperates directly with Cocoa's NSError conventions. For example, an Objective-C method with an `NSError**` parameter, e.g.,",
      "title" : "Improved NSError Bridging"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/karwa",
          "name" : "Karl Wagner"
        }
      ],
      "id" : "SE-0113",
      "link" : "0113-rounding-functions-on-floatingpoint.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "ba3daf9d22291ade430286d6ef6682a1834fe9ef",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The standard library lacks equivalents to the `floor()` and `ceil()` functions found in the standard libraries of most other languages. Currently, we need to import `Darwin` or `Glibc` in order to access the C standard library versions.",
      "title" : "Add integral rounding functions to FloatingPoint",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2010",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2010",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0114",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3374",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0114-buffer-naming.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "5db2fb369f7b03aee689c42f3c5a4a99a80354df",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal updates parameters and generic type parameters from `value` names to `header` names for `ManagedBuffer`, `ManagedProtoBuffer`, and `ManagedBufferPointer`.",
      "title" : "Updating Buffer \"Value\" Names to \"Header\" Names"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/anandabits",
          "name" : "Matthew Johnson"
        }
      ],
      "id" : "SE-0115",
      "link" : "0115-literal-syntax-protocols.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "9cb4ac44d638ef642d0275018ca0ec3a4762b3ee",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal renames the `*LiteralConvertible` protocols to `ExpressibleBy*Literal`.",
      "title" : "Rename Literal Syntax Protocols",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2054",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2054",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0116",
      "link" : "0116-id-as-any.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "36d72cd39974a3ec937c231c33c882727e049f80",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Objective-C interfaces that use `id` and untyped collections should be imported into Swift as taking the `Any` type instead of `AnyObject`.",
      "title" : "Import Objective-C `id` as Swift `Any` type"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/JaviSoto",
          "name" : "Javier Soto"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        }
      ],
      "id" : "SE-0117",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3882",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0117-non-public-subclassable-by-default.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "54f7bf61d8d142ed4d2f7ee717a098337ed8bd2c",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Since the first release of Swift, marking a class `public` has provided two capabilities: it allows other modules to instantiate and use the class, and it also allows other modules to define subclasses of it. Similarly, marking a class member (a method, property, or subscript) `public` has provided two capabilities: it allows other modules to use the member, and it also allows those modules to override it.",
      "title" : "Allow distinguishing between public access and public overridability"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Maxim Moiseev"
        }
      ],
      "id" : "SE-0118",
      "link" : "0118-closure-parameter-names-and-labels.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "0cd69955d18621c84709786b16631a04d9fff1da",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "We propose a revision to the names and argument labels of closure parameters in standard library APIs.",
      "title" : "Closure Parameter Names and Labels",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2072",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2072",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DevAndArtist",
          "name" : "Adrian Zubarev"
        }
      ],
      "id" : "SE-0119",
      "link" : "0119-extensions-access-modifiers.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "1fe24fa3a6b108b1c21fa3c93708cf2feb55fb86",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "One great goal for Swift 3 is to sort out any source breaking language changes. This proposal aims to fix access modifier inconsistency on extensions compared to other scope declarations types.",
      "title" : "Remove access modifiers from extensions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lorenzoracca",
          "name" : "Lorenzo Racca"
        },
        {
          "link" : "https:\/\/github.com\/j-haj",
          "name" : "Jeff Hajewski"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0120",
      "link" : "0120-revise-partition-method.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "49e38a78ed06106fe5ecde2864242878835411e7",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal revises the signature for the collection partition algorithm. Partitioning is a foundational API for sorting and for searching through sorted collections.",
      "title" : "Revise `partition` Method Signature",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1965",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1965",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        }
      ],
      "id" : "SE-0121",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3637",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0121-remove-optional-comparison-operators.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "44cd28bb4fed19037e7ff68f5667c534fad00c51",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift's [`Comparable` protocol](https:\/\/developer.apple.com\/reference\/swift\/comparable) requires 4 operators, [`<`, `<=`, `>`, and `>=`](https:\/\/github.com\/apple\/swift\/blob\/5868f9c597088793f7131d4655dd0f702a04dea3\/stdlib\/public\/core\/Policy.swift#L729-L763), beyond the requirements of Equatable.",
      "title" : "Remove `Optional` Comparison Operators"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/MutatingFunk",
          "name" : "James Froggatt"
        }
      ],
      "id" : "SE-0122",
      "link" : "0122-use-colons-for-subscript-type-declarations.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d21669c174626ce7d29f31622cf9da0ca6d4b501",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Currently, subscript declarations follow the following model:",
      "title" : "Use colons for subscript declarations"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rudkx",
          "name" : "Mark Lacey"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        }
      ],
      "id" : "SE-0123",
      "link" : "0123-disallow-value-to-optional-coercion-in-operator-arguments.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "39dcf33d7739678fc0e583752cdae0debb9e29c9",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Swift provides optional types as a means of achieving safety by making the notion of \"having\" or \"not having\" a value explicit.  This requires programmers to explicitly test whether a variable has a value or not prior to using that value, with the affordance that a user can explicitly *force-unwrap* the optional if desired (with the semantics that the process will trap if the optional does not have a value).",
      "title" : "Disallow coercion to optionals in operator arguments"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aschwaighofer",
          "name" : "Arnold Schwaighofer"
        }
      ],
      "id" : "SE-0124",
      "link" : "0124-bitpattern-label-for-int-initializer-objectidentfier.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "936ab9682675b8562826428de22a7f7ae08445a6",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "`Int.init(ObjectIdentifier)` and `UInt.init(ObjectIdentifier)` should have a 'bitPattern:’ label to make it clear at the use site that we interpret the value as a bit pattern.",
      "title" : "`Int.init(ObjectIdentifier)` and `UInt.init(ObjectIdentifier)` should have a `bitPattern:` label",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2064",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2064",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aschwaighofer",
          "name" : "Arnold Schwaighofer"
        }
      ],
      "id" : "SE-0125",
      "link" : "0125-remove-nonobjectivecbase.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "03e8844dc91d4bcd1492a724d36be9519ad856aa",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Remove `NonObjectiveCBase` and `isUniquelyReferenced<T: NonObjectiveCBase>(_ object: T)`. `isUniquelyReferenced` can be replaced by `isUniquelyReferencedNonObjC<T: AnyObject>(_ object: T)`. This replacement is as performant as the call to `isUniquelyReferenced` in cases where the compiler has static knowledge that the type of `object` is a native Swift class and dynamically has the same semantics for native swift classes. This change will remove surface API. Rename `isUniquelyReferencedNonObjC` to `isKnownUniquelyReferenced` and no longer promise to return false for `@objc` class instances. Cleanup the `ManagedBufferPointer` API by renaming `holdsUniqueReference` to `isUniqueReference` and removing `holdsUniqueOrPinnedReference`.",
      "title" : "Remove `NonObjectiveCBase` and `isUniquelyReferenced`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1962",
          "link" : "http:\/\/bugs.swift.org\/browse\/SR-1962",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DevAndArtist",
          "name" : "Adrian Zubarev"
        },
        {
          "link" : "https:\/\/github.com\/Anton3",
          "name" : "Anton Zhilin"
        }
      ],
      "id" : "SE-0126",
      "link" : "0126-refactor-metatypes-repurpose-t-dot-self-and-mirror.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "3fc1d08d208d2bfb52511ed8a476a6572a5fa2d9",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "This proposal wants to revise metatypes `T.Type`, repurpose *public* `T.self` notation to return a new `Type<T>` type instance rather than a metatype, merge **SE-0101** into `Type<T>`, rename the global function from **SE-0096** to match the changes of this proposal and finally rename current `Mirror` type to introduce a new (lazy) `Mirror` type.",
      "title" : "Refactor Metatypes, repurpose `T.self` and `Mirror`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/charlieMonroe",
          "name" : "Charlie Monroe"
        }
      ],
      "id" : "SE-0127",
      "link" : "0127-cleaning-up-stdlib-ptr-buffer.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "bc7461188a777f0df68ff92e0082306648f4eabc",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal deals with three routines and one class related to pointers and buffers. The goal of this proposal is to update the API to match new API guidelines and remove redundant identifiers.",
      "title" : "Cleaning up stdlib Pointer and Buffer Routines",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1937",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1937",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-1955",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1955",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-1957",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1957",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/trentxintong",
          "name" : "Xin Tong"
        }
      ],
      "id" : "SE-0128",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3662",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0128-unicodescalar-failable-initializer.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "88cb74f1482319d80e8dd786c5f11ac06964bdae",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal aims to change some `UnicodeScalar` initializers (ones that are non-failable) from non-failable to failable. i.e., in case a `UnicodeScalar` can not be constructed, nil is returned.",
      "title" : "Change failable UnicodeScalar initializers to failable"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        }
      ],
      "id" : "SE-0129",
      "link" : "0129-package-manager-test-naming-conventions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "f3e218b70c63b0bda98063e72c059a96a3e50798",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "The Swift Package Manager uses a convention-based rather than a declarative approach for various aspects of package configuration.  This is as true of the naming and structure of tests as of other kinds of targets.",
      "title" : "Package Manager Test Naming Conventions"
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "Roman Levenstein"
        }
      ],
      "id" : "SE-0130",
      "link" : "0130-string-initializers-cleanup.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "3f70b278840a2a811ab2d032ab3b2888c7a1067f",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal suggest replacing String initializers taking Character or UnicodeScalar as a repeating value by a more general initializer that takes a String as a repeating value. This is done to avoid the ambiguities in the current String API, which can be only resolved by explicit casting. It is also proposed to remove one of the String.append APIs to match these changes.",
      "title" : "Replace repeating `Character` and `UnicodeScalar` forms of String.init"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        }
      ],
      "id" : "SE-0131",
      "link" : "0131-anyhashable.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "9c9045989571e2d8fa6658a1a95bcb19fec3c777",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "We propose to add a type-erased `AnyHashable` container to the standard library.",
      "title" : "Add `AnyHashable` to the standard library"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0132",
      "link" : "0132-sequence-end-ops.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "f61db449e4fd1ca15296dfe89edc430c185c3f25",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Sequence and Collection offer many special operations which access or manipulate its first or last elements, but they are plagued by inconsistent naming which can make it difficult to find inverses or remember what the standard library offers. We propose that we standardize these names so they follow consistent, predictable patterns.",
      "title" : "Rationalizing Sequence end-operation names"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        }
      ],
      "id" : "SE-0133",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3809",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "3838",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "3839",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0133-rename-flatten-to-joined.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "8386e527b8d8a27976dd02679af91b65b04c3088",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Swift currently defines two similar functions, `joined(separator:)` and `flatten()`. `joined(separator:)` has a specialized implementation for Strings, and `flatten()` has implementations for various kinds of collections.",
      "title" : "Rename `flatten()` to `joined()`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xwu",
          "name" : "Xiaodi Wu"
        },
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0134",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3816",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0134-rename-string-properties.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "5e41274c4ab30f7d8e7e49d58ea51f050cf78a04",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal removes `nulTerminatedUTF8` and renames `nulTerminatedUTF8CString` to enhance clarity and reduce mismatch between user expectations and the Swift programming language.",
      "title" : "Rename two UTF8-related properties on String"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        }
      ],
      "id" : "SE-0135",
      "link" : "0135-package-manager-support-for-differentiating-packages-by-swift-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "ef8c7fbad46868dfb1f6e21b60a30e130fda068a",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "As new, source-incompatible versions of Swift come into use, there is a growing need for packages to be authored in a way that makes them usable from multiple versions of Swift.  While package authors want to adopt new Swift versions as soon as possible, they also need to support their existing clients.",
      "title" : "Package Manager Support for Differentiating Packages by Swift version"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xwu",
          "name" : "Xiaodi Wu"
        }
      ],
      "id" : "SE-0136",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "4041",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0136-memory-layout-of-values.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "sha" : "9705baaa850bf1b3cfebb2012578b0ded2f58a13",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "This proposal is to introduce, as a bugfix, a replacement for `sizeofValue(_:)` and related functions.",
      "title" : "Memory layout of values"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        }
      ],
      "id" : "SE-0137",
      "link" : "0137-avoiding-lock-in.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "43136b648add45eef0b50c5ce76db86dcbfff519",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "We propose to deprecate or move protocols that shouldn't be a part of the standard library's public API going forward.",
      "title" : "Avoiding Lock-In to Legacy Protocol Designs"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        }
      ],
      "id" : "SE-0138",
      "link" : "0138-unsaferawbufferpointer.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "sha" : "74f3c7b0a5ef4976c9d2a07050f6d93993cfd9cb",
      "status" : {
        "state" : "implemented",
        "version" : "3.0.1"
      },
      "summary" : "This is a purely additive proposal to improve the Swift 3 migration experience.",
      "title" : "UnsafeRawBufferPointer"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0139",
      "link" : "0139-bridge-nsnumber-and-nsvalue.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "c6d3a65d1b0fa724c9574cb4d7b8c5ab73c85826",
      "status" : {
        "state" : "implemented",
        "version" : "3.0.1"
      },
      "summary" : "A handful of Swift numeric types are bridged to `NSNumber` when passed into Objective-C object contexts. We should extend this bridging behavior to all Swift numeric types. We should also bridge common Cocoa structs such as `NSRange` by boxing them into `NSValue` objects.",
      "title" : "Bridge Numeric Types to `NSNumber` and Cocoa Structs to `NSValue`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0140",
      "link" : "0140-bridge-optional-to-nsnull.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "e5eca4d8a57caac20f073e11548a49803a24cd3b",
      "status" : {
        "state" : "implemented",
        "version" : "3.0.1"
      },
      "summary" : "`Optional`s can be used as values of `Any` type. After [SE-0116](0116-id-as-any.md), this means you can pass an `Optional` to an Objective-C method expecting nonnull `id`:",
      "title" : "Warn when `Optional` converts to `Any`, and bridge `Optional` As Its Payload Or `NSNull`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/graydon",
          "name" : "Graydon Hoare"
        }
      ],
      "id" : "SE-0141",
      "link" : "0141-available-by-swift-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "b3bc4fda3e937aa46f37e0c435ea779627356e74",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "Swift's existing `@available(...)` attribute indicates the lifecycle of a given declaration, either unconditionally or relative to a particular platform or OS version range.",
      "title" : "Availability by Swift version",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-2709",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-2709",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        },
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0142",
      "link" : "0142-associated-types-constraints.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "86792f029541cf1921c0457765766645a1779db1",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal seeks to introduce a `where` clause to associated type declarations and improvements to protocol constraints to bring associated types the same expressive power as generic type parameters.",
      "title" : "Permit where clauses to constrain associated types",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4506",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4506",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0143",
      "link" : "0143-conditional-conformances.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "732b27e72f5484718e97a314c6d0fe8757baca81",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "Conditional conformances express the notion that a generic type will conform to a particular protocol only when its type arguments meet certain requirements. For example, the `Array` collection can implement the `Equatable` protocol only when its elements are themselves `Equatable`, which can be expressed via the following conditional conformance on `Equatable`:",
      "title" : "Conditional conformances"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ankurp",
          "name" : "Ankur Patel"
        }
      ],
      "id" : "SE-0144",
      "link" : "0144-allow-single-dollar-sign-as-valid-identifier.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "b12e2dc645ff469b8137d2c4255dd2a0b71afdad",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "The mainline Swift compiler emits an error message when the `$` character (U+0024) is used as an identifier by itself, which is a source breaking change from Swift 3.0.  For example:",
      "title" : "Allow Single Dollar Sign as a Valid Identifier"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        },
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        },
        {
          "link" : "https:\/\/github.com\/graydon",
          "name" : "Graydon Hoare"
        }
      ],
      "id" : "SE-0145",
      "link" : "0145-package-manager-version-pinning.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      "sha" : "f29d0c195f0e316420210180d1158f36b1b28c18",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "This is a proposal for adding package manager features to \"pin\" or \"lock\" package dependencies to particular versions.",
      "title" : "Package Manager Version Pinning"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        }
      ],
      "id" : "SE-0146",
      "link" : "0146-package-manager-product-definitions.md",
      "reviewManager" : {
        "link" : "",
        "name" : "Daniel Dunbar"
      },
      "sha" : "ce87eeb8feda08210c4844218de25d7816917739",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal introduces the concept of *products* to the Swift Package Manager, and proposes enhancements to the `Package.swift` syntax to let packages define products that can be referenced by other packages.",
      "title" : "Package Manager Product Definitions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3606",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3606",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0147",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "6601",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0147-move-unsafe-initialize-from.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "b40479613ea922e8a3957d3ee92409a960b47a7e",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "The version of `UnsafeMutablePointer.initialize(from:)` that takes a `Collection` should be deprecated in favor of a new method on `UnsafeMutableBufferPointer` that takes a `Sequence`, with a goal of improving memory safety and enabling faster initialization of memory from sequences. Similarly, `UnsafeMutableRawPointer.initializeMemory(as:from:)` should be deprecated in favor of a new `UnsafeMutableRawBufferPointer.initialize(as:from:)`.",
      "title" : "Move UnsafeMutablePointer.initialize(from:) to UnsafeMutableBufferPointer"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/chriseidhof",
          "name" : "Chris Eidhof"
        }
      ],
      "id" : "SE-0148",
      "link" : "0148-generic-subscripts.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "6cda991f13d14af81c018846a20a1e43e630f47a",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "Make it possible to have generic subscripts. Example:",
      "title" : "Generic Subscripts",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-115",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-115",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/neonichu",
          "name" : "Boris Bügling"
        }
      ],
      "id" : "SE-0149",
      "link" : "0149-package-manager-top-of-tree.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "8b30f65cde10fed7e52c2093bb144f205af1635b",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal adds enhancements to `swift package edit` to support development of packages without strict versioning (\"top of tree\" development).",
      "title" : "Package Manager Support for Top of Tree development",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3709",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3709",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/neonichu",
          "name" : "Boris Bügling"
        }
      ],
      "id" : "SE-0150",
      "link" : "0150-package-manager-branch-support.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "6fa969c889096cd9e5ad382b20172d69066b10d8",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal adds enhancements to the package manifest to support development of packages without strict versioning. This is one of two features, along with \"Package Manager Support for Top of Tree development\", being proposed to enable use of SwiftPM to develop on \"top of tree\" of related packages.",
      "title" : "Package Manager Support for branches",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-666",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-666",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        },
        {
          "link" : "http:\/\/github.com\/rballard",
          "name" : "Rick Ballard"
        }
      ],
      "id" : "SE-0151",
      "link" : "0151-package-manager-swift-language-compatibility-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      "sha" : "e94c203f6ab4f01fb9f55649a34bcd85ae11b345",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "This proposal adds support for the Swift compiler's new \"language compatibility version\" feature to the package manager.",
      "title" : "Package Manager Swift Language Compatibility Version",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3964",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3964",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rballard",
          "name" : "Rick Ballard"
        }
      ],
      "id" : "SE-0152",
      "link" : "0152-package-manager-tools-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      "sha" : "92394f41569c9cb010e119858bf99aa66720bd2d",
      "status" : {
        "state" : "implemented",
        "version" : "3.1"
      },
      "summary" : "This proposal introduces a \"Swift tools version\" which is declared for each Swift package. The tools version declares the minimum version of the Swift tools required to use the package, determines what version of the PackageDescription API should be used in the Package.swift manifest, and determines which Swift language compatibility version should be used to parse the Package.swift manifest.",
      "title" : "Package Manager Tools Version",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3965",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3965",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/TorinKwok",
          "name" : "Torin Kwok"
        }
      ],
      "id" : "SE-0153",
      "link" : "0153-compensate-for-the-inconsistency-of-nscopyings-behaviour.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "f5005565bd6ca35db59a497a4e0ead863e447f64",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "First of all, in Swift, the Objective-C `copy` property attribute translates to `@NSCopying`.",
      "title" : "Compensate for the inconsistency of `@NSCopying`'s behaviour",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4538",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4538",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0154",
      "link" : "0154-dictionary-key-and-value-collections.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "f5ad8d6d71c93b3900d1e9ceafeaf925e8c4bf8d",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal addresses significant unexpected performance gaps when using dictionaries. It introduces type-specific collections for a `Dictionary` instance's `keys` and `values` properties.",
      "title" : "Provide Custom Collections for Dictionary Keys and Values"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dduan",
          "name" : "Daniel Duan"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0155",
      "link" : "0155-normalize-enum-case-representation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "d004bed25ac9114c5f4a91153c5e8c9efa9f221b",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "In Swift 3, associated values of an enum case are represented by a tuple. This implementation causes inconsistencies in case declaration, construction and pattern matching in several places.",
      "title" : "Normalize Enum Case Representation",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4691",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4691",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-12206",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-12206",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-12229",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-12229",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/hartbit",
          "name" : "David Hart"
        },
        {
          "link" : "http:\/\/github.com\/austinzheng",
          "name" : "Austin Zheng"
        }
      ],
      "id" : "SE-0156",
      "link" : "0156-subclass-existentials.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "24a705bdc70454cb72ffffb5d6557dfefefa113a",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal brings more expressive power to the type system by allowing Swift to represent existentials of classes and subtypes which conform to protocols.",
      "title" : "Class and Subtype existentials",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4296",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4296",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Douglas Gregor"
        },
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/austinzheng",
          "name" : "Austin Zheng"
        }
      ],
      "id" : "SE-0157",
      "link" : "0157-recursive-protocol-constraints.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "cfb14c042ab1cb1f03ab7dfc9df7cdf4f9caf326",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "This proposal lifts restrictions on associated types in protocols. Their constraints will be allowed to reference any protocol, including protocols that depend on the enclosing one (recursive constraints).",
      "title" : "Support recursive constraints on associated types",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1445",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1445",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0158",
      "link" : "0158-package-manager-manifest-api-redesign.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      },
      "sha" : "dfd15e53475659d19c6f607dc4edaa1d20ba12fe",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This is a proposal for redesigning the `Package.swift` manifest APIs provided by Swift Package Manager.   This proposal only redesigns the existing public APIs and does not add any new functionality; any API to be added for new functionality will happen in separate proposals.",
      "title" : "Package Manager Manifest API Redesign",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3949",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3949",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0159",
      "link" : "0159-fix-private-access-levels.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "75aaecac6d53f6fb85ce90ba911809f7e65557f5",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal presents the problems that came with the the access level modifications in [SE-0025](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0025-scoped-access-level.md) and proposes reverting to Swift 2 behaviour.",
      "title" : "Fix Private Access Levels"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0160",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8379",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0160-objc-inference.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "54683f879f08816f315c08867751a3092aa60949",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "One can explicitly write `@objc` on any Swift declaration that can be expressed in Objective-C. As a convenience, Swift also *infers* `@objc` in a number of places to improve interoperability with Objective-C and eliminate boilerplate. This proposal scales back the inference of `@objc` to only those cases where the declaration *must* be available to Objective-C to maintain semantic coherence of the model, e.g., when overriding an `@objc` method or implementing a requirement of an `@objc` protocol. Other cases currently supported (e.g., a method declared in a subclass of `NSObject`) would no longer infer `@objc`, but one could continue to write it explicitly to produce Objective-C entry points.",
      "title" : "Limiting `@objc` inference",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4481",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4481",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Catfish-Man",
          "name" : "David Smith"
        },
        {
          "link" : "https:\/\/github.com\/mlehew",
          "name" : "Michael LeHew"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0161",
      "link" : "0161-key-paths.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "4df7fee45ccb71011a9e62ae88bc6a7ba966c88f",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "We propose a family of concrete *Key Path* types that represent uninvoked references to properties that can be composed to form paths through many values and directly get\/set their underlying values.",
      "title" : "Smart KeyPaths: Better Key-Value Coding for Swift"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0162",
      "link" : "0162-package-manager-custom-target-layouts.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      },
      "sha" : "9cce18f915ddf7060f828f424107476b6d21917e",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal enhances the `Package.swift` manifest APIs to support custom target layouts, and removes a convention which allowed omission of targets from the manifest.",
      "title" : "Package Manager Custom Target Layouts",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-29",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-29",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "http:\/\/github.com\/dabrahams\/",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0163",
      "link" : "0163-string-revision-1.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "885e6407687b8c92f474c0b1a04756bb39f0a4e1",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal is to implement a subset of the changes from the  [Swift 4 String Manifesto](https:\/\/github.com\/apple\/swift\/blob\/master\/docs\/StringManifesto.md).",
      "title" : "String Revision: Collection Conformance, C Interop, Transcoding"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/KingOfBrian",
          "name" : "Brian King"
        }
      ],
      "id" : "SE-0164",
      "link" : "0164-remove-final-support-in-protocol-extensions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "5e807e4bd3fdcccfc768fd6e491510cd349fe8dc",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal disallows the `final` keyword when declaring functions in protocol extensions.",
      "title" : "Remove final support in protocol extensions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1762",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1762",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0165",
      "link" : "0165-dict.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "1b4cc21cec0f02e0cd3479801d88f0fe3b0de0a1",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal comprises a variety of commonly (and less commonly) suggested improvements to the standard library's `Dictionary` type, from merging initializers to dictionary-specific `filter` and `mapValues` methods. The proposed additions to `Dictionary`, and the corresponding changes to `Set`, are detailed in the sections below.",
      "title" : "Dictionary & Set Enhancements"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/itaiferber",
          "name" : "Itai Ferber"
        },
        {
          "link" : "https:\/\/github.com\/mlehew",
          "name" : "Michael LeHew"
        },
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        }
      ],
      "id" : "SE-0166",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "9004",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0166-swift-archival-serialization.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "53a9a69229d5f987d32ee5350865565ff2f99f28",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "Foundation's current archival and serialization APIs (`NSCoding`, `NSJSONSerialization`, `NSPropertyListSerialization`, etc.), while fitting for the dynamism of Objective-C, do not always map optimally into Swift. This document lays out the design of an updated API that improves the developer experience of performing archival and serialization in Swift.",
      "title" : "Swift Archival & Serialization"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/itaiferber",
          "name" : "Itai Ferber"
        },
        {
          "link" : "https:\/\/github.com\/mlehew",
          "name" : "Michael LeHew"
        },
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        }
      ],
      "id" : "SE-0167",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "9005",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0167-swift-encoders.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "223aa7f3909303bb43cf18c17f6238cbd484cf45",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "As part of the proposal for a Swift archival and serialization API ([SE-0166](0166-swift-archival-serialization.md)), we are also proposing new API for specific new encoders and decoders, as well as introducing support for new `Codable` types in `NSKeyedArchiver` and `NSKeyedUnarchiver`.",
      "title" : "Swift Encoders"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/johnno1962",
          "name" : "John Holdsworth"
        },
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        },
        {
          "link" : "https:\/\/github.com\/TheArtOfEngineering",
          "name" : "Tyler Cloutier"
        }
      ],
      "id" : "SE-0168",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8813",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0168-multi-line-string-literals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "bf8baa4a2a1dc47aae12d7d4284c0eccc7e71235",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal introduces multi-line string literals to Swift source code. This has been discussed a few times on swift-evolution most recently putting forward a number of different syntaxes that could achieve this goal each of which has their own use case and constituency for discussion.",
      "title" : "Multi-Line String Literals",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-170",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-170",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-4701",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4701",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-4708",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4708",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-4874",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4874",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/hartbit",
          "name" : "David Hart"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0169",
      "link" : "0169-improve-interaction-between-private-declarations-and-extensions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "88a73860c3c077d6e323f89338483ed47e2ba84a",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "In Swift 3, a declaration marked `private` may be accessed by anything nested in the scope of the private declaration. For example, a private property or method defined on a struct may be accessed by other methods defined within that struct.",
      "title" : "Improve Interaction Between `private` Declarations and Extensions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4616",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4616",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/phausler",
          "name" : "Philippe Hausler"
        }
      ],
      "id" : "SE-0170",
      "link" : "0170-nsnumber_bridge.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "3dff41e9b77d93ffd8a3330e817fbe630ae3bc9b",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "`NSNumber` has been a strange duck in the Swift world especially when it has come to bridging and interacting with other protocols. An attempt was made to make a type preserving `NSNumber` subclass; however that defeated numerous optimizations in Foundation and also caused some rather unfortunate disparity between where and how the NSNumbers were created.",
      "title" : "NSNumber bridging and Numeric types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/chriseidhof",
          "name" : "Chris Eidhof"
        }
      ],
      "id" : "SE-0171",
      "link" : "0171-reduce-with-inout.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "d1ab3d448c42864e55c60a7755952d085daf87ec",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "A new variant of `reduce` should be added to the standard library. Instead of taking a `combine` function that is of type `(A, Iterator.Element) -> A`, the full type and implementation of the added `reduce` will be:",
      "title" : "Reduce with `inout`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        }
      ],
      "id" : "SE-0172",
      "link" : "0172-one-sided-ranges.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "83286f50cd8d9260c8ddd824f8d5f246a2ae04ec",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal introduces the concept of a \"one-sided\" range, created via prefix\/postfix versions of the existing range operators.",
      "title" : "One-sided Ranges"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0173",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "9119",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0173-swap-indices.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "edf2cd57ed2905436138d31d67418878f43725ac",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "As part of the introduction of the Law of Exclusivity, the current `swap(_:_:)` function must be addressed, as this most common uses of `swap` directly violate the law. This proposal introduces an alternative: a method on `MutableCollection` that takes two indices for swapping two elements in the same collection.",
      "title" : "Add `MutableCollection.swapAt(_:_:)`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0174",
      "link" : "0174-filter-range-replaceable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1edd946141d0c18c1b05c0716ec71dce2574ff7e",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal implements the `filter` operation on `RangeReplaceableCollection` to return the same type as the filtered collection.",
      "title" : "Change `RangeReplaceableCollection.filter` to return `Self`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3444",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3444",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rballard",
          "name" : "Rick Ballard"
        }
      ],
      "id" : "SE-0175",
      "link" : "0175-package-manager-revised-dependency-resolution.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      },
      "sha" : "9f1b53264fd85ffd04859d4a5a827c272bebd400",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal makes the package manager's dependency resolution behavior clearer and more intuitive. It removes the pinning commands (`swift package pin` & `swift package unpin`), replaces the `swift package fetch` command with a new `swift package resolve` command with improved behavior, and replaces the optional `Package.pins` file with a `Package.resolved` file which is always created during dependency resolution.",
      "title" : "Package Manager Revised Dependency Resolution"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        }
      ],
      "id" : "SE-0176",
      "link" : "0176-enforce-exclusive-access-to-memory.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "3a23331c3d8a9815c69b42133946a36b9997032d",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "In Swift 3, it is possible to modify a variable while it's being used or modified by another part of the program.  This can lead to unexpected and confusing results.  It also forces a great deal of conservatism onto the implementation of the compiler and the standard libraries, which must generally ensure the basic soundness of the program (no crashes or undefined behavior) even in unusual circumstances.",
      "title" : "Enforce Exclusive Access to Memory"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Nirma",
          "name" : "Nicholas Maccharoli"
        }
      ],
      "id" : "SE-0177",
      "link" : "0177-add-clamped-to-method.md",
      "reviewManager" : {
        "link" : "",
        "name" : "TBD"
      },
      "sha" : "37d3dfafc35b6dbf8d93878e982f9669af7f4cb5",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This proposal aims to add functionality to the standard library for clamping a value to a provided `Range`. The proposed function would allow the user to specify a range to clamp a value to where if the value fell within the range, the value would be returned as is, if the value being clamped exceeded the upper or lower bound then the upper or lower bound would be returned respectively.",
      "title" : "Add clamp(to:) to the stdlib"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0178",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "9675",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0178-character-unicode-view.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "64264a6e97f8c466e28228a80e1ba6b62b580126",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal adds a `unicodeScalars` view to `Character`, similar to that on `String`.",
      "title" : "Add `unicodeScalars` property to `Character`"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/hartbit\/",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0179",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1187",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0179-swift-run-command.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "c06189e391be7e1b5e638a9b825f8fb9b73653fd",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "The proposal introduces a new `swift run` command to build and run an executable defined in the current package.",
      "title" : "Swift `run` Command"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0180",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "9806",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0180-string-index-overhaul.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "26325c9ed8061476d76306631e88999b54f1818a",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "Today `String` shares an `Index` type with its `CharacterView` but not with its `UTF8View`, `UTF16View`, or `UnicodeScalarView`.  This proposal redefines `String.UTF8View.Index`, `String.UTF16View.Index`, and `String.CharacterView.Index` as typealiases for `String.Index`, and exposes a public `encodedOffset` property and initializer that can be used to serialize and deserialize positions in a `String` or `Substring`.",
      "title" : "String Index Overhaul"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0181",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1264",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0181-package-manager-cpp-language-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      "sha" : "5fd52c8f02a4af59b04af43df51f7282327abfcd",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal adds support for declaring the language standard for C and C++ targets in a SwiftPM package.",
      "title" : "Package Manager C\/C++ Language Standard Support"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/johnno1962",
          "name" : "John Holdsworth"
        },
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        },
        {
          "link" : "https:\/\/github.com\/DevAndArtist",
          "name" : "Adrian Zubarev"
        }
      ],
      "id" : "SE-0182",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "11080",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0182-newline-escape-in-strings.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "6f3cfb9fc952c1bdf7188cdb4b656840dacf13cc",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal is a refinement of [SE-0168](0168-multi-line-string-literals.md) which introduces the ability to escape newlines in single and multi-line strings to improve readability and maintenance of source material containing excessively long lines.",
      "title" : "String Newline Escaping"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0183",
      "link" : "0183-substring-affordances.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "854ec865ef5f40048e7719f4e7e586098f6f5f71",
      "status" : {
        "state" : "implemented",
        "version" : "4.0"
      },
      "summary" : "This proposal modifies a small number of methods in the standard library that are commonly used with the `Substring` type:",
      "title" : "Substring performance affordances",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-4933",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-4933",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/tayloraswift",
          "name" : "Dianna Ma (“Taylor Swift”)"
        }
      ],
      "id" : "SE-0184",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12200",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0184-unsafe-pointers-add-missing.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "772376bbdbaf9f7f8dc83173bbd3a1aabaae9af3",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "*This document is a spin-off from a much larger [original proposal](https:\/\/github.com\/tayloraswift\/swift-evolution\/blob\/e888af466c9993de977f6999a131eadd33291b06\/proposals\/0184-unsafe-pointers-add-missing.md), which covers only those aspects of SE-0184 which do not deal with partial buffer memory state. Designing the partial buffer memory state API clearly requires more work, and has been left out of the scope of this document.*",
      "title" : "Unsafe[Mutable][Raw][Buffer]Pointer: add missing methods, adjust existing labels for clarity, and remove deallocation size"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/allevato",
          "name" : "Tony Allevato"
        }
      ],
      "id" : "SE-0185",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "9619",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0185-synthesize-equatable-hashable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "40a20d97d88e984c0f9a7c822e2ff8ce21c97fd4",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "Developers have to write large amounts of boilerplate code to support equatability and hashability of complex types. This proposal offers a way for the compiler to automatically synthesize conformance to `Equatable` and `Hashable` to reduce this boilerplate, in a subset of scenarios where generating the correct implementation is known to be possible.",
      "title" : "Synthesizing `Equatable` and `Hashable` conformance"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gspiers",
          "name" : "Greg Spiers"
        }
      ],
      "id" : "SE-0186",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "11744",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0186-remove-ownership-keyword-support-in-protocols.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "7ec3fa019402f92615d453b80c983e6840538f9f",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "This proposal removes support for the keywords `weak` and `unowned` for property declarations in a protocol.",
      "title" : "Remove ownership keyword support in protocols",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-479",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-479",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        }
      ],
      "id" : "SE-0187",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12819",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0187-introduce-filtermap.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "58fc221b71ebd07a2c8159f5f20d5e254da597ac",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "We propose to deprecate the controversial version of a `Sequence.flatMap` method and provide the same functionality under a different, and potentially more descriptive, name.",
      "title" : "Introduce Sequence.compactMap(_:)"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0188",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12777",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0188-stdlib-index-types-hashable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "a1e2c5a83c3ad689fda554e64fe10a4df4670a48",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "Key-path expressions can now include subscripts to reference individual positions in collections and other subscriptable types, but only when the subscript parameters are `Hashable`. To provide maximum utility, the standard library index types should all have `Hashable` conformance added.",
      "title" : "Make Standard Library Index Types Hashable"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jrose-apple",
          "name" : "Jordan Rose"
        }
      ],
      "id" : "SE-0189",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12834",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0189-restrict-cross-module-struct-initializers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "a587ec18c401d81c93eb70b5f30afe429e1fc2ff",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "Adding a property to a public struct in Swift ought to not be a source-breaking change. However, a client in another target can currently extend a struct with a new initializer that directly initializes the struct's fields. This proposal forbids that, requiring any cross-target initializers to use `self.init(…)` or assign to `self` instead. This matches an existing restriction for classes, where cross-module initializers must be convenience initializers.",
      "title" : "Restrict Cross-module Struct Initializers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/graydon",
          "name" : "Graydon Hoare"
        }
      ],
      "id" : "SE-0190",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12964",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0190-target-environment-platform-condition.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "8de170fe27b3ae36d8799544b54e4eb7b372d349",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "This proposal introduces a platform condition to differentiate device and simulator builds. This condition subsumes a common pattern of conditional compilation for Metal, Keychain, and AVFoundation Camera code.",
      "title" : "Target environment platform condition"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0191",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12641",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0191-eliminate-indexdistance.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "917cbf034014a87161ad8aa597eb207bab11f855",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "Eliminate the associated type `IndexDistance` from `Collection`, and modify all uses to the concrete type `Int` instead.",
      "title" : "Eliminate `IndexDistance` from `Collection`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jrose-apple",
          "name" : "Jordan Rose"
        }
      ],
      "id" : "SE-0192",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14945",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0192-non-exhaustive-enums.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "e14acb3eb47bca3d432967e7cd4a3ec6d73160ba",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "Currently, adding a new case to an enum is a source-breaking change, something that's at odds with Apple's established process for evolving APIs. This proposal aims to distinguish between enums that are *frozen* (meaning they will never get any new cases) and those that are *non-frozen,* and to ensure that clients handle any future cases when dealing with the latter.",
      "title" : "Handling Future Enum Cases"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/slavapestov",
          "name" : "Slava Pestov"
        }
      ],
      "id" : "SE-0193",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15787",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0193-cross-module-inlining-and-specialization.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "7daee5b463e0fa70953a2447ce3a38baae2840f9",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "We propose introducing a pair of new attributes, `@inlinable` and `@usableFromInline`. The `@inlinable` attribute exports the body of a function as part of a module's interface, making it available to the optimizer when referenced from other modules. The `@usableFromInline` attribute marks an internal declaration as being part of the binary interface of a module, allowing it to be used from `@inlinable` code without exposing it as part of the module's source interface.",
      "title" : "Cross-module inlining and specialization"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : "Jacob Bandes-Storch"
        },
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        },
        {
          "link" : "https:\/\/github.com\/CodaFi",
          "name" : "Robert Widmann"
        }
      ],
      "id" : "SE-0194",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "13655",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0194-derived-collection-of-enum-cases.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "ee60a8d2fb5af1d9e28d1085ac554f6fe19bd0dc",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "[Enumeration types](https:\/\/developer.apple.com\/library\/content\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/Enumerations.html) without associated values (henceforth referred to as \"*simple enums*\") have a finite, fixed number of cases, yet working with them programmatically is challenging. It would be natural to enumerate all the cases, count them, determine the highest `rawValue`, or produce a Collection of them. However, despite the fact that both the Swift compiler and the Swift runtime are aware of this information, there is no safe and sanctioned way for users to retrieve it. Users must resort to various [workarounds](#workarounds) in order to iterate over all cases of a simple enum.",
      "title" : "Derived Collection of Enum Cases",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-7151",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-7151",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-7152",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-7152",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0195",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14546",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0195-dynamic-member-lookup.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "55b18c7acb3d73cb15c7d4b15713ba4cc870eae5",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal introduces a new `@dynamicMemberLookup` attribute.  Types that use it provide \"dot\" syntax for arbitrary names which are resolved at runtime - in a **completely type safe** way.  This provides syntactic sugar that allows the user to write:",
      "title" : "Introduce User-defined \"Dynamic Member Lookup\" Types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/harlanhaskins",
          "name" : "Harlan Haskins"
        }
      ],
      "id" : "SE-0196",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14048",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0196-diagnostic-directives.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "9d6a940864e839f7bbf893f3d40f7001a348f245",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal introduces `#warning` and `#error` directives that will cause the Swift compiler to emit a custom warning or an error during compilation.",
      "title" : "Compiler Diagnostic Directives"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0197",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "11576",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0197-remove-where.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "e74c332e92b7865f2e0c50b5e08a4b8b32f9e303",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "It is common to want to remove all occurrences of a certain element from a collection. This proposal is to add a `removeAll` algorithm to the standard library, which will remove all entries in a collection in-place matching a given predicate.",
      "title" : "Adding in-place `removeAll(where:)` to the Standard Library"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/cwakamo",
          "name" : "Connor Wakamo"
        }
      ],
      "id" : "SE-0198",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "13911",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "21",
          "repository" : "swift-xcode-playground-support",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "14252",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "1415",
          "repository" : "swift-corelibs-foundation",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "20",
          "repository" : "swift-xcode-playground-support",
          "type" : "pull"
        }
      ],
      "link" : "0198-playground-quicklook-api-revamp.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift\/",
        "name" : "Ben Cohen"
      },
      "sha" : "59b4d0722fddb276479416299affc59c6edf61c0",
      "status" : {
        "state" : "implemented",
        "version" : "4.1"
      },
      "summary" : "The standard library currently includes API which allows a type to customize its description in Xcode playgrounds and Swift Playgrounds. This API takes the form of the `PlaygroundQuickLook` enum which enumerates types which are supported for quick looks, and the `CustomPlaygroundQuickLookable` protocol which allows a type to return a custom `PlaygroundQuickLook` value for an instance.",
      "title" : "Playground QuickLook API Revamp"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/chriseidhof",
          "name" : "Chris Eidhof"
        }
      ],
      "id" : "SE-0199",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14586",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0199-bool-toggle.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift\/",
        "name" : "Ben Cohen"
      },
      "sha" : "b9a4c223846fc8092ef8aeaf46cb1a5e6f356880",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "I propose adding a `mutating func toggle` to `Bool`. It toggles the `Bool`.",
      "title" : "Adding `toggle` to `Bool`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/johnno1962",
          "name" : "John Holdsworth"
        },
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        },
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "id" : "SE-0200",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "17668",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0200-raw-string-escaping.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1c4d4b574571b43cde72caa91cbf3af2f5fb02f2",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "Like many computer languages, Swift uses an escape character (`\\`) to create a special interpretation of subsequent characters within a string literal. Escape character sequences represent a set of predefined, non-printing characters as well as string delimiters (the double quote), the escape character (the backslash itself), and (uniquely in Swift) to allow in-string expression interpolation.",
      "title" : "Enhancing String Literals Delimiters to Support Raw Text",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-6362",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-6362",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0201",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1583",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0201-package-manager-local-dependencies.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "de681db9e558dfabb833ecd3920cca7ffcf5bb45",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal adds a new API in `PackageDescription` to support declaring dependency on a package using its path on disk instead of the git URL.",
      "title" : "Package Manager Local Dependencies",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-7433",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-7433",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0202",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12772",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0202-random-unification.md",
      "reviewManager" : {
        "link" : "http:\/\/github.com\/AirspeedSwift\/",
        "name" : "Ben Cohen"
      },
      "sha" : "81744c6ea425df5532bec557d3ed8150f6390892",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal's main focus is to create a unified random API, and a secure random API for all platforms.",
      "title" : "Random Unification"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xwu",
          "name" : "Xiaodi Wu"
        }
      ],
      "id" : "SE-0203",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "12884",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0203-rename-sequence-elements-equal.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "4d5391bee184d4bfd9f86792e45d5c612614ef63",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "The behavior of `Sequence.elementsEqual` is confusing to users given its name. Having surveyed alternative solutions to this problem, it is proposed that the method be renamed to `Sequence.elementsEqualInIterationOrder`.",
      "title" : "Rename Sequence.elementsEqual",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-6102",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-6102",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0204",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "13337",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0204-add-last-methods.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "559e60c55a46da0665d4e232d3a906cd442a4220",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "The standard library should include methods for finding the last element in a sequence, and the index of the last element in a collection, that match a given predicate.",
      "title" : "Add `last(where:)` and `lastIndex(where:)` Methods",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1504",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1504",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0205",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15608",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0205-withUnsafePointer-for-lets.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "f85cd48bcd738a135d6a82beb42354fb0f99c3d7",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "We propose to extend the toplevel `withUnsafePointer(to:_:)` and `withUnsafeBytes(of:_:)` functions to work with read-only values.",
      "title" : "`withUnsafePointer(to:_:)` and `withUnsafeBytes(of:_:)` for immutable values"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lorentey",
          "name" : "Karoy Lorentey"
        },
        {
          "link" : "https:\/\/github.com\/regexident",
          "name" : "Vincent Esche"
        }
      ],
      "id" : "SE-0206",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14913",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "16009",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "16073",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0206-hashable-enhancements.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "ce6a0d5106469ea5a118f5495b60587680ae58fd",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal introduces a new `Hasher` type representing the standard library's universal hash function, and it extends the `Hashable` protocol with a new `hash(into:)` requirement that expresses hashing in terms of `Hasher`. This new requirement is intended to replace the old `hashValue` property, which is deprecated.",
      "title" : "Hashable Enhancements"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0207",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15120",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0207-containsOnly.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "sha" : "df5aa065c7ed7614d8ed94d4145ffacee61b3a35",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "It is common to want to confirm that every element of a sequence equals a value, or matches certain criteria. Many implementations of this can be found in use on GitHub. This proposal adds such a method to `Sequence`.",
      "title" : "Add an `allSatisfy` algorithm to `Sequence`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        },
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        }
      ],
      "id" : "SE-0208",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1586",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0208-package-manager-system-library-targets.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "7c7d3226255846148054e2e4f9f077923426d874",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal introduces a new type of target \"system library target\", which moves the current system-module packages feature from package to target level.",
      "title" : "Package Manager System Library Targets",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-7434",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-7434",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0209",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1563",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0209-package-manager-swift-lang-version-update.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "def6f95c7d0bcfadd191816c658e4c42b0ed1701",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal changes the current `Package.swift` manifest API for declaring for Swift language versions from freeform Integer array to a new `SwiftVersion` enum array.",
      "title" : "Package Manager Swift Language Version API Update",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-7464",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-7464",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0210",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15519",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0210-key-path-offset.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1d7f606b679c8df7d9737d266942e64b0dcde550",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal introduces the ability for Swift code to query the in-memory layout of stored properties in aggregates using key paths. Like the `offsetof` macro in C, `MemoryLayout<T>.offset(of:)` returns the distance in bytes between a pointer to a value and a pointer to one of its fields.",
      "title" : "Add an `offset(of:)` method to `MemoryLayout`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/allevato",
          "name" : "Tony Allevato"
        }
      ],
      "id" : "SE-0211",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15593",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0211-unicode-scalar-properties.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "7ecd637a2831d6f8c3d0c028fd79ff6b4538bf60",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "We propose adding a number of properties to the `Unicode.Scalar` type to support both common and advanced text processing use cases, filling in a number of gaps in Swift's text support compared to other programming languages.",
      "title" : "Add Unicode Properties to `Unicode.Scalar`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0212",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15977",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0212-compiler-version-directive.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "a05a4e06a0a2ce015f578bc461727cc1214bacb2",
      "status" : {
        "state" : "implemented",
        "version" : "4.2"
      },
      "summary" : "This proposal introduces a `compiler` directive that is syntactically equivalent to the `#if swift` version check but checks against the version of the compiler, regardless of which compatibility mode it's currently running in.",
      "title" : "Compiler Version Directive"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0213",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "17860",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0213-literal-init-via-coercion.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "9fe4ecbd980387bca929acf63ca00bef5305b17d",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "`T(literal)` should construct T using the appropriate literal protocol if possible.",
      "title" : "Literal initialization via coercion"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "https:\/\/github.com\/masters3d",
          "name" : "Chéyo Jiménez"
        }
      ],
      "id" : "SE-0214",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "16577",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0214-DictionaryLiteral.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "763158624275e36e34bb5b727bddfd0bf7cd05ea",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal renames the confusing and misnamed [`DictionaryLiteral`](https:\/\/github.com\/apple\/swift\/blob\/c25188bafd1c775d4ceecc4a795f614f00451bf9\/stdlib\/public\/core\/Mirror.swift#L646) type to `KeyValuePairs`. This type is neither a dictionary nor a literal. It is a list of key-value pairs.",
      "title" : "Renaming the `DictionaryLiteral` type to `KeyValuePairs`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mdiep",
          "name" : "Matt Diephouse"
        }
      ],
      "id" : "SE-0215",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "16857",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0215-conform-never-to-hashable-and-equatable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "43828f15ba40eb2b7df60ee1e4308e92b3dd0214",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "Extend `Never` so it conforms to `Equatable` and `Hashable`.",
      "title" : "Conform `Never` to `Equatable` and `Hashable`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        },
        {
          "link" : "https:\/\/github.com\/dan-zheng",
          "name" : "Dan Zheng"
        }
      ],
      "id" : "SE-0216",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "20305",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0216-dynamic-callable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "4c94f6ee45b26ffcf676776848e0167c56221de1",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal is a follow-up to  [SE-0195 - Introduce User-defined \"Dynamic Member Lookup\" Types](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0195-dynamic-member-lookup.md), which shipped in Swift 4.2. It introduces a new `@dynamicCallable` attribute, which marks a type as being \"callable\" with normal syntax. It is simple syntactic sugar which allows the user to write:",
      "title" : "Introduce user-defined dynamically \"callable\" types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "https:\/\/github.com\/davedelong",
          "name" : "Dave DeLong"
        },
        {
          "link" : "https:\/\/github.com\/pcantrell",
          "name" : "Paul Cantrell"
        },
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        },
        {
          "link" : "",
          "name" : "and several other folk"
        }
      ],
      "id" : "SE-0217",
      "link" : "0217-bangbang.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "d74ce4477c52bb1985fe60dd1cd4a904778c5aab",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal introduces an annotating forced-unwrapping operator to the Swift standard library. It augments the `?`, `??`, and `!` family, adding `!!`. This \"unwrap or die\" operator provides code-sourced rationales for failed unwraps, supporting self-documentation and safer development. The `!!` operator is commonly implemented in the wider Swift Community and should be considered for official adoption.",
      "title" : "Introducing the `!!` \"Unwrap or Die\" operator to the Swift Standard Library"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/d-date",
          "name" : "Daiki Matsudate"
        }
      ],
      "id" : "SE-0218",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "15017",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0218-introduce-compact-map-values.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "f47cf887a148c39f247dfd028d9dafb03d560ce6",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal adds a combined filter\/map operation to `Dictionary`, as a companion to the `mapValues` and filter methods introduced by [SE-0165](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0165-dict.md). The new compactMapValues operation corresponds to compactMap on Sequence.",
      "title" : "Introduce `compactMapValues` to Dictionary"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0219",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1776",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0219-package-manager-dependency-mirroring.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "ecf960870f6bc7c6558bf302bacb33dbfaedbefa",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "A dependency mirror refers to an alternate source location which exactly replicates the contents of the original source. This is a proposal for adding support for dependency mirroring in SwiftPM.",
      "title" : "Package Manager Dependency Mirroring",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-8328",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-8328",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/khanlou",
          "name" : "Soroush Khanlou"
        }
      ],
      "id" : "SE-0220",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "16099",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "22289",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0220-count-where.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "17196a047e61750f1c57a1dcdaae5a42d87d0040",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "While Swift's `Sequence` models brings a lot of niceties that we didn't have access to in Objective-C, like `map` and `filter`, there are other useful operations on sequences that the standard library doesn't support yet. One current missing operation is  `count(where:)`, which counts the number of elements in a `Sequence` that pass some test.",
      "title" : "`count(where:)`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        },
        {
          "link" : "https:\/\/github.com\/allevato",
          "name" : "Tony Allevato"
        }
      ],
      "id" : "SE-0221",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "20520",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0221-character-properties.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "507f7fd9d52050102b85a25e06dbcfe5484b325f",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "@allevato (a co-author here) proposed [Add Unicode Properties to Unicode.Scalar](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0211-unicode-scalar-properties.md), which exposes Unicode properties from the [Unicode Character Database](http:\/\/unicode.org\/reports\/tr44\/). These are Unicode expert\/enthusiast oriented properties that give a finer granularity of control and answer highly-technical and specific Unicody enquiries.",
      "title" : "Character Properties"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/TellowKrinkle",
          "name" : "TellowKrinkle"
        },
        {
          "link" : "https:\/\/github.com\/weissi",
          "name" : "Johannes Weiß"
        }
      ],
      "id" : "SE-0222",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14841",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0222-lazy-compactmap-sequence.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "c5cbcdb402101cd846cdafad99ccec17c480fbe1",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Chaining multiple `.map()`s and `.filter()`s on a lazy collection leads to suboptimal codegen, as well as large, painful type names. To improve this, we propose adding a `LazyCompactMap{Sequence, Collection}` type along with some overloads on the other lazy collection types' `.map(_:)` and `.filter(_:)` functions which return this type to get better codegen and shorter type names.",
      "title" : "Lazy CompactMap Sequence"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0223",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "17389",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0223-array-uninitialized-initializer.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "024899b1580c82fba798d27ece13779cc489c30b",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "This proposal suggests a new initializer and method for `Array` and `ContiguousArray` that provide access to an array's uninitialized storage buffer.",
      "title" : "Accessing an Array's Uninitialized Buffer",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3087",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3087",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/danielmartin",
          "name" : "Daniel Martín"
        }
      ],
      "id" : "SE-0224",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "14503",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "17960",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0224-ifswift-lessthan-operator.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "3c997ee9c4aa95706d01b6a2845070815f2491e8",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal augments the functionality implemented for proposal [SE-0020](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0020-if-swift-version.md) with the introduction of a new valid operator in compilation condition: \"<\". The aim is that the syntax `#if swift(<4.2)` is supported by the language.",
      "title" : "Support 'less than' operator in compilation conditions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-6852",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-6852",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/robmaceachern",
          "name" : "Robert MacEachern"
        },
        {
          "link" : "https:\/\/github.com\/SiliconUnicorn",
          "name" : "Micah Hansonbrook"
        }
      ],
      "id" : "SE-0225",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "18689",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0225-binaryinteger-iseven-isodd-ismultiple.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "cdcb90b7e1bda68488fce36ef86b9161a67c93de",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal adds `var isEven: Bool`, `var isOdd: Bool`, and `func isMultiple(of other: Self) -> Bool` to the `BinaryInteger` protocol. `isEven` and `isOdd` are convenience properties for querying the [parity](https:\/\/en.wikipedia.org\/wiki\/Parity_(mathematics)) of the integer and `isMultiple` is a more general function to determine whether an integer is a multiple of another integer.",
      "title" : "Adding `isMultiple` to `BinaryInteger`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0226",
      "link" : "0226-package-manager-target-based-dep-resolution.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "533e5885b44624363110b64afaaa0455b1b3e8ab",
      "status" : {
        "state" : "implemented",
        "version" : "5.2"
      },
      "summary" : "This is a proposal for enhancing the package resolution process to resolve the minimal set of dependencies that are used in a package graph.",
      "title" : "Package Manager Target Based Dependency Resolution",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-8658",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-8658",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0227",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "18804",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "19382",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0227-identity-keypath.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "1151ae35ab558b9d068de621409e3a4d4e5b88c7",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "Add the ability to reference the identity key path, which refers to the entire input value it is applied to.",
      "title" : "Identity key path"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        },
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0228",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "20214",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0228-fix-expressiblebystringinterpolation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "2acc16717bd0e07fe5dba528294414f31db2f4a8",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "String interpolation is a simple and powerful feature for expressing complex, runtime-created strings, but the current version of the `ExpressibleByStringInterpolation` protocol has been deprecated since Swift 3. We propose a new design that improves its performance, clarity, and efficiency.",
      "title" : "Fix `ExpressibleByStringInterpolation`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0229",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "20344",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0229-simd.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "b6e05bfe0ccc45c795b07dea24e19f981c1c6269",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal would expose a common subset of operations on the SIMD types supported by most processors in the standard library. It is based on Apple's <simd\/simd.h> module, which is used throughout Apple's platforms as the common currency type for fixed-size vectors and matrices. It is not a complete re-implementation; rather it provides the low-level support needed to import any such library, and tries to make a number of things much nicer in Swift than they are in C or C++.",
      "title" : "SIMD Vectors"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bjhomer",
          "name" : "BJ Homer"
        }
      ],
      "id" : "SE-0230",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "16942",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0230-flatten-optional-try.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "62d9faef581bfe9b73094211e0e4dbb401a6cb47",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "Swift's `try?` statement currently makes it easy to introduce a nested optional. Nested optionals are difficult for users to reason about, and Swift tries to avoid producing them in other common cases.",
      "title" : "Flatten nested optionals resulting from 'try?'"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/AnthonyLatsis",
          "name" : "Anthony Latsis"
        }
      ],
      "id" : "SE-0231",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "19207",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0231-optional-iteration.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "cb8ac69f6db493ea47d185817bc4137b14f10ce4",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Optionals are a key feature of Swift and a powerful tool that seamlessly interacts with code. In particular, they serve a great means in expressing \"act accordingly if there's a value, skip otherwise\". Some vivid examples of such behavior are optional chaining, optional invocation `foo?()`, `if let`, [optional patterns](https:\/\/docs.swift.org\/swift-book\/ReferenceManual\/Patterns.html#grammar_optional-pattern), optional assignments and `guard let`. This proposal considers further supporting this convenience in `for-in` loops.",
      "title" : "Optional Iteration"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0232",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "19995",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0232-remove-customization-points.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "a9fc872825c7a375d48cedd7ac2a039c19beec74",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal removes four customization points from protocols in the standard library:",
      "title" : "Remove Some Customization Points from the Standard Library's `Collection` Hierarchy"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rxwei",
          "name" : "Richard Wei"
        }
      ],
      "id" : "SE-0233",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "20422",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0233-additive-arithmetic-protocol.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "dca603f18c254f146ce1b7adc7dff1ac70ba2f03",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal introduces a weakening of the existing  `Numeric`  protocol named  `AdditiveArithmetic` , which defines additive arithmetic operators and a zero, making conforming types roughly correspond to the mathematic notion of an [additive group](https:\/\/en.wikipedia.org\/wiki\/Additive_group). This makes it possible for vector types to share additive arithmetic operators with scalar types, which enables generic algorithms over `AdditiveArithmetic` to apply to both scalars and vectors.",
      "title" : "Make  `Numeric`  Refine a new  `AdditiveArithmetic`  Protocol"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0234",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "20221",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0234-remove-sequence-subsequence.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "e9d85a165868c10d43f0a1eece623eb52affab5b",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal recommends eliminating the associated type from `Sequence`, moving it up to start at `Collection`. Current customization points on `Sequence` returning a `SubSequence` will be amended to be extensions returning concrete types.",
      "title" : "Remove `Sequence.SubSequence`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jshier",
          "name" : "Jon Shier"
        }
      ],
      "id" : "SE-0235",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "21073",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "21225",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "21378",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0235-add-result.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "d7e7f7d7331a9ab825684a8b78b01fd6cb36af94",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "Swift's current error-handling, using `throws`, `try`, and `catch`, offers automatic and synchronous handling of errors through explicit syntax and runtime behavior. However, it lacks the flexibility needed to cover all error propagation and handling in the language. `Result` is a type commonly used for manual propagation and handling of errors in other languages and within the Swift community. Therefore this proposal seeks to add such a type to the Swift standard library.",
      "title" : "Add Result to the Standard Library"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0236",
      "link" : "0236-package-manager-platform-deployment-settings.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "1975c500f0f83aeccde52d2d487945b634ffaf13",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This is a proposal for adding support for specifying a per-platform minimum required deployment target in the `Package.swift` manifest file.",
      "title" : "Package Manager Platform Deployment Settings"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0237",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "21138",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0237-contiguous-collection.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "f8877796f8753084d8e1b2a11b0a280e936441e1",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This proposal introduces two new methods, on `Sequence` and `MutableCollection`. These methods will allow generic code to make use of the `withUnsafe{Mutable}BufferPointer` idiom, as well as provide fast paths in the standard library for adopting types.",
      "title" : "Introduce `withContiguous{Mutable}StorageIfAvailable` methods"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0238",
      "link" : "0238-package-manager-build-settings.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "ec98c23e1edfd61c9f8defd2195d31f1911f43fa",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "This is a proposal for adding support for declaring some commonly used target-specific build settings in the `Package.swift` manifest file. As the name suggests, target-specific build settings are only applied to a particular target. SwiftPM also aims to support cross-target build settings that go across the target boundary and impart certain settings on a target's dependees, but this proposal is only concerned with the former type of build settings and the latter will be explored with a future proposal.",
      "title" : "Package Manager Target Specific Build Settings"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dlbuckley",
          "name" : "Dale Buckley"
        },
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Maxim Moiseev"
        }
      ],
      "id" : "SE-0239",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "19532",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "21857",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0239-codable-range.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "2acdb63d64f9d9b727a1c0971a72fb895ea151cb",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "[SE-0167](0167-swift-encoders.md) introduced `Codable` conformance for some types in the standard library, but not the `Range` family of types. This proposal adds that conformance.",
      "title" : "Add Codable conformance to Range types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/numist",
          "name" : "Scott Perry"
        },
        {
          "link" : "https:\/\/github.com\/kylemacomber",
          "name" : "Kyle Macomber"
        }
      ],
      "id" : "SE-0240",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "21845",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0240-ordered-collection-diffing.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "9e64b5a25fe164c1b1dd076f91bb7b089db3da3e",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "This proposal describes additions to the standard library that provide an interchange format for diffs as well as diffing\/patching functionality for appropriate collection types.",
      "title" : "Ordered Collection Diffing"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0241",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "22108",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0241-string-index-explicit-encoding-offset.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "aaa5e3486b0564c17dd5a1fe84d3ef1bdcf308c2",
      "status" : {
        "state" : "implemented",
        "version" : "5.0"
      },
      "summary" : "[SE-0180](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0180-string-index-overhaul.md) introduced a computed variable and initializer surrounding the concept of an `encodedOffset` for serialization purposes. Unfortunately, that approach is flawed for its intended purpose and is commonly misused in ways that Swift 5 is [more likely to expose](https:\/\/bugs.swift.org\/browse\/SR-9749). It is too late in the Swift 5.0 release to solve all existing problems, so we propose deprecating `encodedOffset` and introducing a targeted, semantics-preserving alternative.",
      "title" : "Deprecate String Index Encoded Offsets"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0242",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "19743",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0242-default-values-memberwise.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "4b6522f683640ca9e3d22541096a496724e8b055",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "This proposal aims to solve a simple outstanding problem with the way the Swift compiler currently synthesizes the memberwise initializer for structures by synthesizing default values for properties with default initializers.",
      "title" : "Synthesize default values for the memberwise initializer"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/tayloraswift",
          "name" : "Dianna Ma (“Taylor Swift”)"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        },
        {
          "link" : "https:\/\/github.com\/johnno1962",
          "name" : "John Holdsworth"
        }
      ],
      "id" : "SE-0243",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "21873",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0243-codepoint-and-character-literals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "15a237095b03ebbd116ec2a6c5a91a06d8a67d46",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Swift’s `String` type is designed for Unicode correctness and abstracts away the underlying binary representation of the string to model it as a `Collection` of grapheme clusters. This is an appropriate string model for human-readable text, as to a human reader, the atomic unit of a string is (usually) the extended grapheme cluster. When treated this way, many logical string operations “just work” the way users expect.",
      "title" : "Integer-convertible character literals"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0244",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "22072",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0244-opaque-result-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "19e921660d2a1ba7ed11c8e58f3643cb82d19103",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "This proposal is the first part of a group of changes we're considering in a [design document for improving the UI of the generics model](https:\/\/forums.swift.org\/t\/improving-the-ui-of-generics\/22814). We'll try to make this proposal stand alone to describe opaque return types, their design, and motivation, but we also recommend reading the design document for more in-depth exploration of the relationships among other features we're considering. We'll link to relevant parts of that document throughout this proposal.",
      "title" : "Opaque Result Types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0245",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23134",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0245-array-uninitialized-initializer.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "2e19b1556078d52472e9e68951f92901712b332a",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "This proposal suggests a new initializer for `Array` and `ContiguousArray` that provides access to an array's uninitialized storage buffer.",
      "title" : "Add an Array Initializer with Access to Uninitialized Storage",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3087",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3087",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0246",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23140",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0246-mathable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "78b6e7a3c8a3576f6900209c783e9d93868dc647",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "This proposal introduces two new protocols to the standard library: `ElementaryFunctions` and `Real`. These protocols combine to provide \"basic math functions\" in generic contexts for floating-point and SIMD types, and provide a path to extend that functionality to planned complex types in the future.",
      "title" : "Generic Math(s) Functions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0247",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23051",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0247-contiguous-strings.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "69527d9163714f5f8dab45f29180a552a08b575b",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "One of the most common API requests from performance-minded users of string is a way to get direct access to the raw underlying code units. Now that [Swift 5 uses UTF-8](https:\/\/forums.swift.org\/t\/string-s-abi-and-utf-8\/17676) for its preferred encoding, we can provide this.",
      "title" : "Contiguous Strings",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-6475",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-6475",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0248",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "22869",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0248-string-gaps-missing-apis.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "75b250aa83e0b725b58688f7b3445c252ea6e805",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "String and related types are missing trivial and obvious functionality, much of which currently exists internally but has not been made API. We propose adding 9 new methods\/properties and 3 new code unit views.",
      "title" : "String Gaps and Missing APIs",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-9955",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-9955",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephencelis",
          "name" : "Stephen Celis"
        },
        {
          "link" : "https:\/\/github.com\/gregomni",
          "name" : "Greg Titus"
        }
      ],
      "id" : "SE-0249",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "26054",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0249-key-path-literal-function-expressions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "2986b4b77290bcf1dc4157ad983f327dfa4e7360",
      "status" : {
        "state" : "implemented",
        "version" : "5.2"
      },
      "summary" : "This proposal introduces the ability to use the key path expression `\\Root.value` wherever functions of `(Root) -> Value` are allowed.",
      "title" : "Key Path Expressions as Functions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/allevato",
          "name" : "Tony Allevato"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "id" : "SE-0250",
      "link" : "0250-swift-style-guide-and-formatter.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "d73191a9fbd95ade6aba605657e9c2eec9286b98",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "We propose that the Swift project adopt a set of code style guidelines and provide a formatting tool that lets users easily diagnose and update their code according to those guidelines. These guidelines would *not* be mandatory for all projects, but encouraged for Swift code to follow for general consistency.",
      "title" : "Swift Code Style Guidelines and Formatter"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0251",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23421",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "24136",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0251-simd-additions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "9b5e896eff783c80e6f07d0ee00ad6142396d11a",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "Early adopters of SIMD types and protocols have encountered a few missing things as they've started to write more code that uses them. In addition, there are some features we punted out of the original review because we were up against a hard time deadline to which we would like to give further consideration.",
      "title" : "SIMD additions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0252",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23436",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0252-keypath-dynamic-member-lookup.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "b0ef216db582ff15084b4550e9bf7694df66556b",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "This proposal attempts to enable stronger-typed version of the dynamic member lookup by extending functionality of an existing `@dynamicMemberLookup` attribute with key path based variants.",
      "title" : "Key Path Member Lookup"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rxwei",
          "name" : "Richard Wei"
        },
        {
          "link" : "https:\/\/github.com\/dan-zheng",
          "name" : "Dan Zheng"
        }
      ],
      "id" : "SE-0253",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "24299",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0253-callable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "c84e66ab01334a25dd4f677e0d28a6556e6978c1",
      "status" : {
        "state" : "implemented",
        "version" : "5.2"
      },
      "summary" : "This proposal introduces \"statically\" [callable](https:\/\/en.wikipedia.org\/wiki\/Callable_object) values to Swift. Callable values are values that define function-like behavior and can be called using function call syntax. In contrast to dynamically callable values introduced in [SE-0216](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0216-dynamic-callable.md), this feature supports statically declared arities, argument labels, and parameter types, and is not constrained to primary type declarations.",
      "title" : "Callable values of user-defined nominal types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        }
      ],
      "id" : "SE-0254",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23358",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0254-static-subscripts.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "ca63840d4f6fdfc5abc8542268f2152bf757cc98",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "We propose allowing `static subscript` and, in classes, `class subscript` declarations. These could be used through either `TypeName[index]` or `TypeName.self[index]` and would have all of the capabilities you would expect of a subscript. We also propose extending dynamic member lookup to static properties by using static subscripts.",
      "title" : "Static and class subscripts"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/nate-chandler",
          "name" : "Nate Chandler"
        }
      ],
      "id" : "SE-0255",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23251",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0255-omit-return.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "7e3cf214a8d4f57a441db491cdce18d8d04603d7",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "Swift provides a pleasant shorthand for short closures: if a closure contains just a single expression, that expression is implicitly returned--the `return` keyword can be omitted.  We should provide this shorthand for functions as well.",
      "title" : "Implicit returns from single-expression functions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0256",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23616",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0256-contiguous-collection.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "190d91e6e88f231763cb0c9e71dbc27c4d6c7361",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "This proposal introduces two new protocols: `ContiguousCollection`, which refines `Collection`, and `MutableContiguousCollection`, which refines `MutableCollection`. Both provide guaranteed access to an underlying unsafe buffer.",
      "title" : "Introduce `{Mutable}ContiguousCollection` protocol"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/nate-chandler",
          "name" : "Nate Chandler"
        },
        {
          "link" : "https:\/\/github.com\/anandabits",
          "name" : "Matthew Johnson"
        }
      ],
      "id" : "SE-0257",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "22714",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0257-elide-comma.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "e0717264003c3bfa20276a1c7698af9e3e10f3cb",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "Swift requires a semicolon \"`;`\" to separate statements unless those statements are separated by newlines, in which case the semicolon can be elided.  Currently, Swift requires a comma \"`,`\" to separate expressions even when those statements are separated by newlines.  We should ease this restriction, allowing the comma between two expressions to be elided when they are separated by a newline.",
      "title" : "Eliding commas from multiline expression lists"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0258",
      "link" : "0258-property-wrappers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "9f42f0867c96e2d2b8f156fcb72986e91cc26bfa",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "There are property implementation patterns that come up repeatedly. Rather than hardcode a fixed set of patterns into the compiler (as we have done for `lazy` and `@NSCopying`), we should provide a general \"property wrapper\" mechanism to allow these patterns to be defined as libraries.",
      "title" : "Property Wrappers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0259",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23839",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0259-approximately-equal.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "ff167fbb1b592c6fa176f9f2a63cd4665d56a807",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "The internet is full advice about what not to do when comparing floating-point values:",
      "title" : "Approximate Equality for Floating Point"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jrose-apple",
          "name" : "Jordan Rose"
        },
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        }
      ],
      "id" : "SE-0260",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "24185",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0260-library-evolution.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "fbd6bc472465ad2ed0e5662aa9bc0a7041f98081",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "One of Swift's goals is to be a good language for libraries with binary compatibility concerns, such as those shipped as part of Apple's OSs. This includes giving library authors the flexibility to add to their public interface, and to change implementation details, without breaking binary compatibility. At the same time, it's important that library authors be able to opt out of this flexibility in favor of performance.",
      "title" : "Library Evolution for Stable ABIs"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/anandabits",
          "name" : "Matthew Johnson"
        },
        {
          "link" : "https:\/\/github.com\/kylemacomber",
          "name" : "Kyle Macomber"
        }
      ],
      "id" : "SE-0261",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "26022",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0261-identifiable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "48fcc60f47c9aaddaaeedd2dbd8fac9858c562a9",
      "status" : {
        "state" : "implemented",
        "version" : "5.1"
      },
      "summary" : "This proposal introduces an `Identifiable` protocol, a general concept that is broadly useful— for diff algorithms, user interface libraries, and other generic code—to correlate snapshots of the state of an entity in order to identify changes. It is a fundamental notion that deserves representation in the standard library.",
      "title" : "Identifiable Protocol"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0262",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "25314",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0262-demangle.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "447a02c7f975f24467a3db52088e8348d661c19a",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "Introduce a new standard library function, `demangle`, that takes a mangled Swift symbol, like `$sSS7cStringSSSPys4Int8VG_tcfC`, and output the human readable Swift symbol, like `Swift.String.init(cString: Swift.UnsafePointer<Swift.Int8>) -> Swift.String`.",
      "title" : "Demangle Function"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Catfish-Man",
          "name" : "David Smith"
        }
      ],
      "id" : "SE-0263",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "26007",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "30106",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0263-string-uninitialized-initializer.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "826f27abe96b2ec03a990a7f5743d760f224f896",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "This proposal suggests a new initializer for `String` that provides access to a String's uninitialized storage buffer.",
      "title" : "Add a String Initializer with Access to Uninitialized Storage",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-10288",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-10288",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0264",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1089",
          "repository" : "swift-evolution",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "1090",
          "repository" : "swift-evolution",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "1091",
          "repository" : "swift-evolution",
          "type" : "pull"
        }
      ],
      "link" : "0264-stdlib-preview-package.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "a95e3eec1c947744219e3cb11f4d80ab2fd226ac",
      "status" : {
        "state" : "implemented",
        "version" : ""
      },
      "summary" : "We propose changing the Swift Evolution process to publish accepted proposals as individual SwiftPM packages, as well as a `SwiftPreview` package that bundles these proposal packages together. This group of packages will form the initial landing spot for certain additions to the Swift standard library.",
      "title" : "Standard Library Preview Package"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0265",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "24296",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0265-offset-indexing-and-slicing.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "fcb605aee2164c031ca52d92165ada0828f8927f",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This proposal introduces `OffsetBound`, which can represent a position in a collection specified as an offset from either the beginning or end of the collection (i.e. the collection’s “bounds”). Corresponding APIs provide a more convenient abstraction over indices. The goal is to alleviate an expressivity gap in collection APIs by providing easy and safe means to access elements, indices, and slices from such offsets.",
      "title" : "Offset-Based Access to Indices, Elements, and Slices"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/tayloraswift",
          "name" : "Dianna Ma (taylorswift)"
        }
      ],
      "id" : "SE-0266",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "25696",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0266-synthesized-comparable-for-enumerations.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "b4de6b3cdd6af2ccfd980d200731fae8fb292ac6",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "[SE-185](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0185-synthesize-equatable-hashable.md) introduced synthesized, opt-in `Equatable` and `Hashable` conformances for eligible types. Their sibling protocol `Comparable` was left out at the time, since it was less obvious what types ought to be eligible for a synthesized `Comparable` conformance and where a comparison order might be derived from. This proposal seeks to allow users to opt-in to synthesized `Comparable` conformances for `enum` types without raw values or associated values not themselves conforming to `Comparable`, a class of types which I believe make excellent candidates for this feature. The synthesized comparison order would be based on the declaration order of the `enum` cases, and then the lexicographic comparison order of the associated values for an `enum` case tie.",
      "title" : "Synthesized `Comparable` conformance for `enum` types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/AnthonyLatsis",
          "name" : "Anthony Latsis"
        }
      ],
      "id" : "SE-0267",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23489",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0267-where-on-contextually-generic.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "ab3e411b6f39ddaedd99566a450814b974ad2e6a",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "This proposal aims to lift the restriction on attaching `where` clauses to member declarations that can reference only outer generic parameters. Simply put, this means the `'where' clause cannot be attached` error will be relaxed for most declarations nested inside generic contexts:",
      "title" : "`where` clauses on contextually generic declarations"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/theblixguy",
          "name" : "Suyash Srijan"
        }
      ],
      "id" : "SE-0268",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "26632",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0268-didset-semantics.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "782c01c1d9985cab5f2a48976eb02ae70ba5ce0e",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "Introduce two changes to `didSet` semantics -",
      "title" : "Refine `didSet` Semantics",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-5982",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-5982",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jumhyn",
          "name" : "Frederick Kellison-Linn"
        }
      ],
      "id" : "SE-0269",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "23934",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0269-implicit-self-explicit-capture.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "272a4386ab14d7d1ebfb42c8df3f87938e19908d",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "Modify the rule that all uses of `self` in escaping closures must be explicit by allowing for implicit uses of `self` in situations where the user has already made their intent explicit, or where strong reference cycles are otherwise unlikely to occur. There are two situations covered by this proposal. The first is when the user has explicitly captured `self` in the closure's capture list, so that the following would compile without error:",
      "title" : "Increase availability of implicit `self` in `@escaping` closures when reference cycles are unlikely to occur",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-10218",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-10218",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        },
        {
          "link" : "https:\/\/github.com\/jmschonfeld",
          "name" : "Jeremy Schonfeld"
        }
      ],
      "id" : "SE-0270",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "69766",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0270-rangeset-and-collection-operations.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "f188ba482a9e7050dc955f2adf167f28fa6f679b",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "We can use a `Range<Index>` to refer to a group of consecutive positions in a collection, but the standard library doesn't currently provide a way to refer to discontiguous positions in an arbitrary collection. I propose the addition of a `RangeSet` type that can represent any number of positions, along with collection algorithms that operate on those positions.",
      "title" : "Add Collection Operations on Noncontiguous Elements"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        },
        {
          "link" : "https:\/\/github.com\/aciidb0mb3r",
          "name" : "Ankit Aggarwal"
        }
      ],
      "id" : "SE-0271",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2381",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2510",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2520",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2607",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0271-package-manager-resources.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Buegling"
      },
      "sha" : "f83bbad6efcfdba7030dff660a4b283751a6fbb2",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "Packages should be able to contain images, data files, and other resources needed at runtime.  This proposal describes SwiftPM support for specifying such package resources, and introduces a consistent way of accessing them from the source code in the package.",
      "title" : "Package Manager Resources"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bscothern",
          "name" : "Braden Scothern"
        },
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        },
        {
          "link" : "https:\/\/github.com\/FranzBusch",
          "name" : "Franz Busch"
        }
      ],
      "id" : "SE-0272",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2509",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2511",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2514",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2588",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0272-swiftpm-binary-dependencies.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      "sha" : "993b70a5e694fef8abc211678c3cf2ca665cbcda",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "SwiftPM currently supports source-only packages for several languages, and with a very proscriptive build model which considerably limits exactly how the compilation of the source can be performed. While this makes packages consistent and to some extent \"simple\", it limits their use in several important cases:",
      "title" : "Package Manager Binary Dependencies"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0273",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2428",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2598",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0273-swiftpm-conditional-target-dependencies.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Buegling"
      },
      "sha" : "720d6bc9f6e36201709d46cefdabd4c007e82425",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "This proposal introduces the ability for Swift package authors to conditionalize target dependencies on platform and configuration with a similar syntax to the one introduced in [SE-0238](0238-package-manager-build-settings.md) for build settings. This gives developers more flexibility to describe complex target dependencies to support multiple platforms or different configuration environments.",
      "title" : "Package Manager Conditional Target Dependencies"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        },
        {
          "link" : "https:\/\/github.com\/davedelong",
          "name" : "Dave DeLong"
        }
      ],
      "id" : "SE-0274",
      "link" : "0274-magic-file.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift\/",
        "name" : "Ben Cohen"
      },
      "sha" : "68a70169514d73063bc175e4ac37d1fe6927b4c4",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "Today, `#file` evaluates to a string literal containing the full path to the current source file. We propose to instead have it evaluate to a human-readable string containing the filename and module name, while preserving the existing behavior in a new `#filePath` expression.",
      "title" : "Concise magic file names"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/adellibovi",
          "name" : "Alfredo Delli Bovi"
        }
      ],
      "id" : "SE-0275",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "28966",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0275-allow-more-characters-like-whitespaces-and-punctuations-for-escaped-identifiers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "0129be339a2fbd3dd64865494bd35839601e6213",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Swift has a beautiful concise yet expressive syntax. As part of that, escaped identifiers are adopted to allow usage of reserved keywords. This proposal wants to extend the character allowance for escaped identifiers with more Unicode scalars, like whitespace and punctuation.",
      "title" : "Allow more characters (like whitespaces and punctuations) for escaped identifiers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/owenv",
          "name" : "Owen Voorhees"
        }
      ],
      "id" : "SE-0276",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "27776",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0276-multi-pattern-catch-clauses.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "48bb92369692e9d4f5634e943a6f023fd887f7a1",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "Currently, each catch clause in a do-catch statement may only contain a single pattern and where clause. This is inconsistent with the behavior of cases in switch statements, which provide similar functionality. It also makes some error handling patterns awkward to express. This proposal extends the grammar of catch clauses to support a comma-separated list of patterns (with optional where clauses), resolving this inconsistency.",
      "title" : "Multi-Pattern Catch Clauses"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0277",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "30130",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0277-float16.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "83e40bf265804296abd9b9fe1d7c5f5b8c293d7e",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "Introduce the `Float16` type conforming to the `BinaryFloatingPoint` and `SIMDScalar` protocols, binding the IEEE 754 *binary16* format (aka *float16*, *half-precision*, or *half*), and bridged by the compiler to the C `_Float16` type.",
      "title" : "Float16"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "id" : "SE-0278",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "2535",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2606",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0278-package-manager-localized-resources.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Buegling"
      },
      "sha" : "5f253cdbf3b488bc3cd3fdc0a72cfdb0af757229",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "This proposal builds on top of the [Package Manager Resources](0271-package-manager-resources.md) proposal to allow defining localized versions of resources in the SwiftPM manifest and have them automatically accessible at runtime using the same APIs.",
      "title" : "Package Manager Localized Resources"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/kylemacomber",
          "name" : "Kyle Macomber"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        },
        {
          "link" : "https:\/\/github.com\/douggregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        }
      ],
      "id" : "SE-0279",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "31052",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0279-multiple-trailing-closures.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "6bb53f18ebacdf15b42304082491b8f5131983fe",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "",
      "title" : "Multiple Trailing Closures"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/theblixguy",
          "name" : "Suyash Srijan"
        }
      ],
      "id" : "SE-0280",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "28916",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0280-enum-cases-as-protocol-witnesses.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "b837d99485ae365cb58b73cde43e2dd76744f8ff",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "The aim of this proposal is to lift an existing restriction, which is that enum cases cannot participate in protocol witness matching.",
      "title" : "Enum cases as protocol witnesses",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-3170",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-3170",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        },
        {
          "link" : "https:\/\/github.com\/nate-chandler",
          "name" : "Nate Chandler"
        },
        {
          "link" : "https:\/\/github.com\/ricketson",
          "name" : "Matt Ricketson"
        }
      ],
      "id" : "SE-0281",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "30693",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0281-main-attribute.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "204ff7e2ba213a6bb590afaaa4c33d0f926fdeaf",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "A Swift language feature for designating a type as the entry point for beginning program execution. Instead of writing top-level code, users can use the `@main` attribute on a single type. Libraries and frameworks can then provide custom entry-point behavior through protocols or class inheritance.",
      "title" : "`@main`: Type-Based Program Entry Points"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lorentey",
          "name" : "Karoy Lorentey"
        }
      ],
      "id" : "SE-0282",
      "link" : "0282-atomics.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "77a5489906b6dca72dbaf9677b90d9b355ef7852",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "This proposal adopts a C\/C++-style weak concurrency memory model in Swift, describing how Swift code interoperates with concurrency primitives imported from C.",
      "title" : "Clarify the Swift memory consistency model ⚛︎",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-9144",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-9144",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0283",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "28833",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0283-tuples-are-equatable-comparable-hashable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "21526400bbc58377ccb28380572ba8bcdbf2a38a",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Introduce `Equatable`, `Comparable`, and `Hashable` conformance for all tuples whose elements are themselves `Equatable`, `Comparable`, and `Hashable`.",
      "title" : "Tuples Conform to `Equatable`, `Comparable`, and `Hashable`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/owenv",
          "name" : "Owen Voorhees"
        }
      ],
      "id" : "SE-0284",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "29735",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0284-multiple-variadic-parameters.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "3ec42bab994c0139e0356a165ead5836af1a1d78",
      "status" : {
        "state" : "implemented",
        "version" : "5.4"
      },
      "summary" : "Currently, variadic parameters in Swift are subject to two main restrictions:",
      "title" : "Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        }
      ],
      "id" : "SE-0285",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "32700",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0285-ease-pound-file-transition.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "0bcfa20a2cbb75368ef331fc1ef004312578921b",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "In [SE-0274](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0274-magic-file.md), the core team accepted a proposal to change the behavior of `#file`. This proposal modifies that plan to transition into new behavior more gradually, treating it as a source break requiring a new language version mode to fully adopt.",
      "title" : "Ease the transition to concise magic file strings"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0286",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "33092",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0286-forward-scan-trailing-closures.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "4399a100cfc0a3f7e4f3b09f579513020c586041",
      "status" : {
        "state" : "implemented",
        "version" : "5.3"
      },
      "summary" : "[SE-0279 \"Multiple Trailing Closures\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0279-multiple-trailing-closures.md) threaded the needle between getting the syntax we wanted for multiple trailing closures without breaking source compatibility. One aspect of that compromise was to extend (rather than replace) the existing rule for matching a trailing closure to a parameter by scanning *backward* from the end of the parameter list.",
      "title" : "Forward-scan matching for trailing closures"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jumhyn",
          "name" : "Frederick Kellison-Linn"
        }
      ],
      "id" : "SE-0287",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "31679",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0287-implicit-member-chains.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "27fd9da22c71185dfe649d0139ca632c231e1576",
      "status" : {
        "state" : "implemented",
        "version" : "5.4"
      },
      "summary" : "When the type of an expression is implied by the context, Swift allows developers to use what is formally referred to as an \"implicit member expression,\" sometimes referred to as \"leading dot syntax\":",
      "title" : "Extend implicit member syntax to cover chains of member references"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dingobye",
          "name" : "Ding Ye"
        }
      ],
      "id" : "SE-0288",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "24766",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0288-binaryinteger-ispower.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "2dbcbd23884c50930eca3c1cbb0993761230c9af",
      "status" : {
        "state" : "previewing"
      },
      "summary" : "Checking some mathematical properties of integers (e.g. parity, divisibility, etc.) is widely used in scientific and engineering applications.  Swift brings a lot of convenience when performing such checks, thanks to the relevant methods (e.g. `isMultiple(of:)`) provided by the standard library.  However there are still some other cases not yet supported.  One of those useful checks that are currently missing is to tell if an integer is power of another, of which the implementation is non-trivial.  Apart from inconvenience, user-implemented code can bring inefficiency, poor readability, and even incorrectness.  To address this problem, this proposal would like to add a public API `isPower(of:)`, as an extension method, to the `BinaryInteger` protocol.",
      "title" : "Adding `isPower(of:)` to `BinaryInteger`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0289",
      "link" : "0289-result-builders.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "a0313d6e0087fbddf18bdc8f2ee90fb1b210ad9d",
      "status" : {
        "state" : "implemented",
        "version" : "5.4"
      },
      "summary" : "This proposal describes *result builders*, a new feature which allows certain functions (specially-annotated, often via context) to implicitly build up a result value from a sequence of components.",
      "title" : "Result builders"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rockbruno",
          "name" : "Bruno Rocha"
        }
      ],
      "id" : "SE-0290",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "33932",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0290-negative-availability.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "965167c85755a1cc2e7325a3f9085c096f2bf275",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "Swift historically supported the `#available` condition to check if a specific symbol **is** available for usage, but not the opposite. In this proposal, we'll present cases where checking for the **unavailability** of something is necessary, the ugly workaround needed to achieve it today and how a new `#unavailable` condition can fix it.",
      "title" : "Unavailability Condition"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/neonichu",
          "name" : "Boris Bügling"
        },
        {
          "link" : "https:\/\/github.com\/yim-lee",
          "name" : "Yim Lee"
        },
        {
          "link" : "https:\/\/github.com\/tomerd",
          "name" : "Tom Doron"
        }
      ],
      "id" : "SE-0291",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3030",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0291-package-collections.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "6bcce67935453080fb7f266a17b6c5243b969109",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "This is a proposal for adding support for **Package Collections** to SwiftPM. A package collection is a curated list of packages and associated metadata which makes it easier to discover an existing package for a particular use case. SwiftPM will allow users to subscribe to these collections, search them via the `swift package-collection` command-line interface, and will make their contents accessible to any clients of libSwiftPM. This proposal is focused on the shape of the command-line interface and the format of configuration data related to package collections.",
      "title" : "Package Collections"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/clarkbw",
          "name" : "Bryan Clark"
        },
        {
          "link" : "https:\/\/github.com\/whitneyimura",
          "name" : "Whitney Imura"
        },
        {
          "link" : "https:\/\/github.com\/mattt",
          "name" : "Mattt Zmuda"
        }
      ],
      "id" : "SE-0292",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3023",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0292-package-registry-service.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "9cfafb083233d26024562eec621e905b92d871d4",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Swift Package Manager downloads dependencies using Git. Our proposal defines a standard web service interface that it can also use to download dependencies from a package registry.",
      "title" : "Package Registry Service"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/filip-sakel",
          "name" : "Filip Sakel"
        }
      ],
      "id" : "SE-0293",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "34272",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "36344",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0293-extend-property-wrappers-to-function-and-closure-parameters.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "2aec32f6cd2f5b17edd3fbf6859f063655b03dc1",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Property Wrappers were [introduced in Swift 5.1](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0258-property-wrappers.md), and have since become a popular mechanism for abstracting away common accessor patterns for properties. Currently, applying a property wrapper is solely permitted on local variables and type properties. However, with increasing adoption, demand for extending *where* property wrappers can be applied has emerged. This proposal aims to extend property wrappers to function and closure parameters.",
      "title" : "Extend Property Wrappers to Function and Closure Parameters"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        }
      ],
      "id" : "SE-0294",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3045",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0294-package-executable-targets.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "31aa5593b712e6d31901d5540bb84d7aed6b6378",
      "status" : {
        "state" : "implemented",
        "version" : "5.4"
      },
      "summary" : "This proposal lets Swift Package authors declare targets as executable in the package manifest. This replaces the current approach of inferring executability based on the presence of a source file with the base name `main` at the top level of the target source directory.",
      "title" : "Declaring executable targets in Package Manifests",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-13924",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-13924",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/drexin",
          "name" : "Dario Rexin"
        }
      ],
      "id" : "SE-0295",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "34855",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0295-codable-synthesis-for-enums-with-associated-values.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "6bbe546b9db8c1573de332140872b77da89a39d5",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Codable was introduced in [SE-0166](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0166-swift-archival-serialization.md) with support for synthesizing `Encodable` and `Decodable` conformance for `class` and `struct` types, that only contain values that also conform to the respective protocols.",
      "title" : "Codable synthesis for enums with associated values"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0296",
      "link" : "0296-async-await.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "81ed1153c629423373a5425d96024bff9bad1989",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Modern Swift development involves a lot of asynchronous (or \"async\") programming using closures and completion handlers, but these APIs are hard to use.  This gets particularly problematic when many asynchronous operations are used, error handling is required, or control flow between asynchronous calls gets complicated.  This proposal describes a language extension to make this a lot more natural and less error prone.",
      "title" : "Async\/await"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0297",
      "link" : "0297-concurrency-objc.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "sha" : "a0caa5de14189ec064f2c0bb6404af675374cb31",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Swift's concurrency feature involves asynchronous functions and actors. While Objective-C does not have corresponding language features, asynchronous APIs are common in Objective-C, expressed manually through the use of completion handlers. This proposal provides bridging between Swift's concurrency features (e.g., `async` functions) and the convention-based expression of asynchronous functions in Objective-C. It is intended to allow the wealth of existing asynchronous Objective-C APIs to be immediately usable with Swift's concurrency model.",
      "title" : "Concurrency Interoperability with Objective-C"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        },
        {
          "link" : "https:\/\/github.com\/phausler",
          "name" : "Philippe Hausler"
        }
      ],
      "id" : "SE-0298",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "35224",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0298-asyncsequence.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "3f491cafb410c75f64f3284554120071fea10f48",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Swift's [async\/await](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0296-async-await.md) feature provides an intuitive, built-in way to write and use functions that return a single value at some future point in time. We propose building on top of this feature to create an intuitive, built-in way to write and use functions that return many values over time.",
      "title" : "Async\/Await: Sequences"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        },
        {
          "link" : "https:\/\/github.com\/sl",
          "name" : "Sam Lazarus"
        },
        {
          "link" : "https:\/\/github.com\/ricketson",
          "name" : "Matt Ricketson"
        }
      ],
      "id" : "SE-0299",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "34523",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0299-extend-generic-static-member-lookup.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "a5896abceedf447157e21e7982541ce864b9a19f",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Using static member declarations to provide semantic names for commonly used values which can then be accessed via leading dot syntax is an important tool in API design, reducing type repetition and improving call-site legibility. Currently, when a parameter is generic, there is no effective way to take advantage of this syntax. This proposal aims to relax restrictions on accessing static members on protocols to afford the same call-site legibility to generic APIs.",
      "title" : "Extending Static Member Lookup in Generic Contexts"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad Malawski"
        }
      ],
      "id" : "SE-0300",
      "link" : "0300-continuation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "39abd0ecb12770c47e8e567b42b4a0d7194879e6",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Asynchronous Swift code needs to be able to work with existing synchronous code that uses techniques such as completion callbacks and delegate methods to respond to events. Asynchronous tasks can suspend themselves on **continuations** which synchronous code can then capture and invoke to resume the task in response to an event.",
      "title" : "Continuations for interfacing async tasks with synchronous code"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/owenv",
          "name" : "Owen Voorhees"
        }
      ],
      "id" : "SE-0301",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3034",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0301-package-editing-commands.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "a2f1ac6b6c4b987b762eabfc19a9439a5cf82557",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Because Swift package manifests are written in Swift using the PackageDescription API, it is difficult to automate common tasks like adding a new product, target, or dependency. This proposal introduces new `swift package` subcommands to perform some common editing tasks which can streamline users' workflows and enable new higher-level tools.",
      "title" : "Package Editor Commands"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        },
        {
          "link" : "https:\/\/github.com\/douggregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0302",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "35264",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0302-concurrent-value-and-concurrent-closures.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "a0bb795637cbd02d023b531e2c017b970b20004b",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "A key goal of the Swift Concurrency effort is to “provide a mechanism for isolating state in concurrent programs to eliminate data races.”  Such a mechanism will be a major progression for widely used programming languages — most of them provide concurrent programming abstractions in a way that subjects programmers to a wide range of bugs, including race conditions, deadlocks and other problems.",
      "title" : "`Sendable` and `@Sendable` closures"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        },
        {
          "link" : "https:\/\/github.com\/tomerd",
          "name" : "Tom Doron"
        }
      ],
      "id" : "SE-0303",
      "link" : "0303-swiftpm-extensible-build-tools.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "c8b4af215a3e4f8db8dfca4f666af0bb4d8dc963",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "This is a proposal for extensible build tools support in Swift Package Manager. The initial set of functionality is intentionally basic, and focuses on a general way of extending the build command graph through plugins.",
      "title" : "Package Manager Extensible Build Tools"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad Malawski"
        }
      ],
      "id" : "SE-0304",
      "link" : "0304-structured-concurrency.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "7ead7e314056154bda242879f36fd5de7ca8b8a8",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "[`async`\/`await`](0296-async-await.md) is a language mechanism for writing natural, efficient asynchronous code. Asynchronous functions (introduced with `async`) can give up the thread on which they are executing at any given suspension point (marked with `await`), which is necessary for building highly-concurrent systems.",
      "title" : "Structured concurrency"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        },
        {
          "link" : "https:\/\/github.com\/tomerd",
          "name" : "Tom Doron"
        }
      ],
      "id" : "SE-0305",
      "link" : "0305-swiftpm-binary-target-improvements.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "eefe754cc963441e395c5570bb35f6e1c4e76827",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "This proposal extends SwiftPM binary targets to also support other kinds of prebuilt artifacts, such as command line tools. It does not in and of itself add support for non-Darwin binary libraries, although the proposed improvements could be a step towards such support.",
      "title" : "Package Manager Binary Target Improvements"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad Malawski"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0306",
      "link" : "0306-actors.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "9fcfec964476c99d6f8b208c2b5a000400f47565",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "The Swift concurrency model intends to provide a safe programming model that statically detects [data races](https:\/\/en.wikipedia.org\/wiki\/Race_condition#Data_race) and other common concurrency bugs. The [Structured Concurrency](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0304-structured-concurrency.md) proposal introduces a way to define concurrent tasks and provides data-race safety for functions and closures. This model is suitable for a number of common design patterns, including things like parallel maps and concurrent callback patterns, but is limited to working with state that is captured by closures.",
      "title" : "Actors"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0307",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "34401",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0307-allow-interchangeable-use-of-double-cgfloat-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "1d58e9c5cb09893a4fb5626bd4a23bcc36e256b1",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "I propose to extend the language and allow Double and CGFloat types to be used interchangeably by means of transparently converting one type into the other as a sort of retroactive typealias between these two types.  This is a *narrowly* defined implicit conversion intended to be part of the *existing family* of implicit conversions (including NSType <=> CFType conversions) supported by Swift to strengthen Objective-C and Swift interoperability. The only difference between the proposed conversion and existing ones is related to the fact that interchangeability implies both narrowing conversion (`Double` -> `CGFloat`) and widening one (`CGFloat` -> `Double`) on 32-bit platforms. This proposal is not about generalizing support for implicit conversions to the language.",
      "title" : "Allow interchangeable use of `CGFloat` and `Double` types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rintaro",
          "name" : "Rintaro Ishizaki"
        }
      ],
      "id" : "SE-0308",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "35097",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0308-postfix-if-config-expressions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "c086807efba2785c27d74282ae5ded73cb7eff9a",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Swift has conditional compilation block `#if ... #endif` which allows code to be conditionally compiled depending on the value of one or more compilation conditions. Currently, unlike `#if` in C family languages, the body of each clause must surround complete statements. However, in some cases, especially in result builder contexts, demand for applying `#if` to partial expressions has emerged. This proposal expands `#if ... #endif` to be able to surround postfix member expressions.",
      "title" : "`#if` for postfix member expressions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/AnthonyLatsis",
          "name" : "Anthony Latsis"
        },
        {
          "link" : "https:\/\/github.com\/filip-sakel",
          "name" : "Filip Sakel"
        },
        {
          "link" : "https:\/\/github.com\/theblixguy",
          "name" : "Suyash Srijan"
        }
      ],
      "id" : "SE-0309",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "33767",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "39492",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "41198",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0309-unlock-existential-types-for-all-protocols.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "39d7025c20e1912b2eaef968e0a4fa93b7ceec39",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Swift allows one to use a protocol as a type when its *requirements* meet a rather unintuitive list of criteria, among which is the absence of associated type requirements, and emits the following error otherwise: `Protocol can only be used as a generic constraint because it has 'Self' or associated type requirements`. Our objective is to *alleviate* this limitation so as to impact only the ability to access certain members (instead of preemptively sealing off the entire protocol interface), and adjust the specified criteria to further reduce the scope of the restriction.",
      "title" : "Unlock existentials for all protocols"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        }
      ],
      "id" : "SE-0310",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "36430",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "36670",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "37225",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0310-effectful-readonly-properties.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "c8a87f070b923b649825c5d279c015fa86787036",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "Nominal types such as classes, structs, and enums in Swift support [computed properties](https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/Properties.html) and [subscripts](https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/Subscripts.html), which are members of the type that invoke programmer-specified computations when getting or setting them.  The recently accepted proposal [SE-0296](0296-async-await.md) introduced asynchronous functions via `async`, in conjunction with `await`, but did not specify that computed properties or subscripts can support effects like asynchrony.  Furthermore, to take full advantage of `async` properties, the ability to specify that a property `throws` is also important.  This document aims to partially fill in this gap by proposing a syntax and semantics for effectful read-only computed properties and subscripts.",
      "title" : "Effectful Read-only Properties"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        }
      ],
      "id" : "SE-0311",
      "link" : "0311-task-locals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "f75964704121e2c58cd9058c84bb6661c0b7e673",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "With Swift embracing asynchronous functions and actors, asynchronous code will be everywhere.",
      "title" : "Task Local Values"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/timvermeulen",
          "name" : "Tim Vermeulen"
        }
      ],
      "id" : "SE-0312",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "36851",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0312-indexed-and-enumerated-zip-collections.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "7a0261c0c2dc54d65232fabab7f170a8cfa7c159",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This proposal aims to fix the lack of `Collection` conformance of the sequences returned by `zip(_:_:)` and `enumerated()`, preventing them from being used in a context that requires a `Collection`. Also included is the addition of the `indexed()` method on `Collection` as a more ergonomic, efficient, and correct alternative to `c.enumerated()` and `zip(c.indices, c)`.",
      "title" : "Add `indexed()` and `Collection` conformances for `enumerated()` and `zip(_:_:)`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "id" : "SE-0313",
      "link" : "0313-actor-isolation-control.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "e26608bc28f2f3234a8509a8d22a75a48f228277",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "The [Swift actors proposal](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md) introduces the notion of *actor-isolated* declarations, which are declarations that can safely access an actor's isolated state. In that proposal, all instance methods, instance properties, and instance subscripts on an actor type are actor-isolated, and they can synchronously use those declarations on `self`. This proposal generalizes the notion of actor isolation to allow better control, including the ability to have actor-isolated declarations that aren't part of an actor type (e.g., they can be non-member functions) and have non-isolated declarations that are instance members of an actor type (e.g., because they are based on immutable, non-isolated actor state). This allows better abstraction of the use of actors, additional actor operations that are otherwise not expressible safely in the system, and enables some conformances to existing, synchronous protocols.",
      "title" : "Improved control over actor isolation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/phausler",
          "name" : "Philippe Hausler"
        },
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        },
        {
          "link" : "https:\/\/github.com\/bendjones",
          "name" : "Ben D. Jones"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0314",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "36921",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0314-async-stream.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "36e861aa4bb3b6f91323fafbf830a25504e29eaf",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "The continuation types added in [SE-0300](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0300-continuation.md) act as adaptors for synchronous code that signals completion by calling a delegate method or callback function. For code that instead yields multiple values over time, this proposal adds new types to support implementing an `AsyncSequence` interface.",
      "title" : "`AsyncStream` and `AsyncThrowingStream`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jumhyn",
          "name" : "Frederick Kellison-Linn"
        }
      ],
      "id" : "SE-0315",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "36740",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0315-placeholder-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "a52173e1f424de9abbf74c390a937920341e2dd3",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "When Swift's type inference is unable to work out the type of a particular expression, it requires the programmer to provide the necessary type context explicitly. However, all mechanisms for doing this require the user to write out the entire type signature, even if only one portion of that type is actually needed by the compiler. E.g.,",
      "title" : "Type placeholders (formerly, \"Placeholder types\")"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0316",
      "link" : "0316-global-actors.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "3e9c0f0df090b5008d218174198bc1e67790329c",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "[Actors](0306-actors.md) are a new kind of reference type that protect their instance data from concurrent access. Swift actors achieve this with *actor isolation*, which ensures (at compile time) that all accesses to that instance data go through a synchronization mechanism that serializes execution.",
      "title" : "Global actors"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        }
      ],
      "id" : "SE-0317",
      "link" : "0317-async-let.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "1416501ce1520497fdeaa2fc2e726a2e2d90aa9e",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "[Structured concurrency](0304-structured-concurrency.md) provides a paradigm for spawning concurrent *child tasks* in scoped *task groups*, establishing a well-defined hierarchy of tasks which allows for cancellation, error propagation, priority management, and other tricky details of concurrency management to be handled transparently.",
      "title" : "`async let` bindings"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/miggs597",
          "name" : "Miguel Perez"
        }
      ],
      "id" : "SE-0318",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3514",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0318-package-creation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "1ad4a894a549a40e273a9cbc0956037c896fe8d2",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "In order to clearly separate the roles of transforming an existing directory of source files into a Swift package, from creating a new package from scratch we propose adding a new command `swift package create`. `swift package init` will continue to exist as is, but will be updated to focus on the former, while the new `swift package create` will focus on the latter.",
      "title" : "Package Creation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/kylemacomber",
          "name" : "Kyle Macomber"
        }
      ],
      "id" : "SE-0319",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "38103",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0319-never-identifiable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "18ff5962d1c1290a11358c0fa4c8764f0f2c3f99",
      "status" : {
        "state" : "implemented",
        "version" : "5.5"
      },
      "summary" : "This proposal conforms `Never` to `Identifiable` to make it usable as a \"bottom type\" for generic constraints that require `Identifiable`.",
      "title" : "Conform Never to Identifiable"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mortenbekditlevsen",
          "name" : "Morten Bek Ditlevsen"
        }
      ],
      "id" : "SE-0320",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "34458",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0320-codingkeyrepresentable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "cc8d6f1191e4d46a31b698f9d88b8a1823140411",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "The current conformance of Swift's `Dictionary` to the `Codable` protocols has a somewhat-surprising limitation in that dictionaries whose key type is not `String` or `Int` (values directly representable in `CodingKey` types) encode not as `KeyedContainer`s but as `UnkeyedContainer`s. This behavior has caused much confusion for users and I would like to offer a way to improve the situation.",
      "title" : "Allow coding of non `String` \/ `Int` keyed `Dictionary` into a `KeyedContainer`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/whitneyimura",
          "name" : "Whitney Imura"
        },
        {
          "link" : "https:\/\/github.com\/mattt",
          "name" : "Mattt Zmuda"
        }
      ],
      "id" : "SE-0321",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3671",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0321-package-registry-publish.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "68d324463a3b781d183eeb07ed583549f47a0809",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "The [package registry service](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0292-package-registry-service.md) defines endpoints for fetching packages.",
      "title" : "Package Registry Service - Publish Endpoint"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/grynspan",
          "name" : "Jonathan Grynspan"
        }
      ],
      "id" : "SE-0322",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "37666",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0322-temporary-buffers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "05be569820c8aa06867a90e25b7ce150c9cfd21e",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "This proposal introduces new Standard Library functions for manipulating temporary buffers that are preferentially allocated on the stack instead of the heap.",
      "title" : "Temporary uninitialized buffers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/etcwilde",
          "name" : "Evan Wilde"
        }
      ],
      "id" : "SE-0323",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "38604",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0323-async-main-semantics.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "c3349c342401c79b144fe3c296c4e1eb0c667b59",
      "status" : {
        "state" : "implemented",
        "version" : "5.5.2"
      },
      "summary" : "Program setup generally occurs in the main function where developers expect to perform operations before other parts of the program are run. Objective-C, C++, and C have initializers that are run before the main entrypoint runs and can interact with Swift's concurrency systems in ways that are hard to reason about. In the Swift concurrency model, the developer-written asynchronous main function is wrapped in a task and enqueued on the main queue when the main entrypoint is run. If an initializer inserts a task on the main queue, that task may be executed before the main function, so setup is performed after initializer tasks are run.",
      "title" : "Asynchronous Main Semantics"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0324",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "37956",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0324-c-lang-pointer-arg-conversion.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "bb1978950efb94299fc853fd0d8dd1235ec0ca5d",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "C has special rules for pointer aliasing, for example allowing `char *` to alias other pointer types, and allowing pointers to signed and unsigned types to alias. The usability of some C APIs relies on the ability to easily cast pointers within the boundaries of those rules. Swift generally disallows typed pointer conversion. See [SE-0107 UnsafeRawPointer API](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0107-unsaferawpointer.md). Teaching the Swift compiler to allow pointer conversion within the rules of C when invoking functions imported from C headers will dramatically improve interoperability with no negative impact on type safety.",
      "title" : "Relax diagnostics for pointer arguments to C functions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-10246",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-10246",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        }
      ],
      "id" : "SE-0325",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3758",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0325-swiftpm-additional-plugin-apis.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "2cb066de8db89b83dff7e5de03ff44de10480a43",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "[SE-0303](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0303-swiftpm-extensible-build-tools.md) introduced the ability to define *build tool plugins* in SwiftPM, allowing custom tools to be invoked while building a package. In support of this, SE-0303 introduced a minimal initial API through which plugins can access information about the target for which they are invoked.",
      "title" : "Additional Package Plugin APIs"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0326",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "38577",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "40397",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "41730",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0326-extending-multi-statement-closure-inference.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "0ed3efe8f0dbeae15294a6eb6bb5f210e42a6ccd",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "I propose to improve inference behavior of multi-statement closures by enabling parameter and result type inference from the closure body. This will make type inference less surprising for developers, and remove the existing behavior cliff where adding one more expression or statement to a closure could result in a compilation failure.",
      "title" : "Enable multi-statement closure parameter\/result type inference"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad Malawski"
        }
      ],
      "id" : "SE-0327",
      "link" : "0327-actor-initializers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "12c686b3840c29da84506f28675fd28b57601dfb",
      "status" : {
        "state" : "implemented",
        "version" : "5.10"
      },
      "summary" : "Actors are a relatively new nominal type in Swift that provides data-race safety for its mutable state. The protection is achieved by *isolating* the mutable state of each actor instance to at most one task at a time. The proposal that introduced actors ([SE-0306](0306-actors.md)) is quite large and detailed, but misses some of the subtle aspects of creating and destroying an actor's isolated state. This proposal aims to shore up the definition of an actor, to clarify *when* the isolation of the data begins and ends for an actor instance, along with *what* can be done inside the body of an actor's `init` and `deinit` declarations.",
      "title" : "On Actors and Initialization"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/willtunnels",
          "name" : "Benjamin Driscoll"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0328",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "38392",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0328-structural-opaque-result-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "650dfc867a9d624a2630b71986b6afe149878039",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "An [opaque result type](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0244-opaque-result-types.md) may be used as the result type of a function, the type of a variable, or the result type of a subscript. In all cases, the opaque result type must be the entire type. This proposal recommends lifting that restriction and allowing opaque result types in \"structural\" positions.",
      "title" : "Structural opaque result types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/phausler",
          "name" : "Philippe Hausler"
        }
      ],
      "id" : "SE-0329",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40609",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0329-clock-instant-duration.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "743e21a61d34a7c6b240bc82418c7340ee269a9e",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "The concepts of time can be broken down into three distinct parts:",
      "title" : "Clock, Instant, and Duration"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/johnno1962",
          "name" : "John Holdsworth"
        }
      ],
      "id" : "SE-0330",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "19347",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0330-collection-conditionals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "ea6892efaff901c3e0a858860f3e21e4cf7e4ac8",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This is a lightning proposal to extend the existing Swift language slightly to allow `#if` conditional inclusion of elements in array and dictionary literals. For example:",
      "title" : "Conditionals in Collections",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-8743",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-8743",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        }
      ],
      "id" : "SE-0331",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "39218",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0331-remove-sendable-from-unsafepointer.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "c392413e480d346e5ebca6f32684f5d75bdc26a9",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "[SE-0302](0302-concurrent-value-and-concurrent-closures.md) introduced the `Sendable` protocol, including `Sendable` requirements for various language constructs, conformances of various standard library types to `Sendable`, and inference rules for non-public types to implicitly conform to `Sendable`. SE-0302 states that the unsafe pointer types conform to `Sendable`:",
      "title" : "Remove Sendable conformance from unsafe pointer types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/abertelrud",
          "name" : "Anders Bertelrud"
        }
      ],
      "id" : "SE-0332",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3855",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0332-swiftpm-command-plugins.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "91de701c7c9679cbd03990dc2bfc72ca13894d77",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "[SE-0303](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0303-swiftpm-extensible-build-tools.md) introduced the ability to define *build tool plugins* in SwiftPM, allowing custom tools to be automatically invoked during a build. This proposal extends that plugin support to allow the definition of custom *command plugins* — plugins that users can invoke directly from the SwiftPM CLI, or from an IDE that supports Swift Packages, in order to perform custom actions on their packages.",
      "title" : "Package Manager Command Plugins"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/glessard",
          "name" : "Guillaume Lessard"
        },
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        }
      ],
      "id" : "SE-0333",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "39529",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0333-with-memory-rebound.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "850529c3a5bad3261493e67ea74a347aab8eddb3",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "The function `withMemoryRebound(to:capacity:_ body:)` executes a closure while temporarily binding a range of memory to a different type than the callee is bound to. We propose to lift some notable limitations of `withMemoryRebound` and enable rebinding to a larger set of types, as well as rebinding the memory pointed to by raw memory pointers and buffers.",
      "title" : "Expand usability of `withMemoryRebound`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-11082",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-11082",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-11087",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-11087",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/glessard",
          "name" : "Guillaume Lessard"
        },
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        }
      ],
      "id" : "SE-0334",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "39639",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0334-pointer-usability-improvements.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "ffae2587ad21b3d39b18abbf0baf5eb9f72a99f1",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "This proposal introduces some quality-of-life improvements for `UnsafePointer` and its `Mutable` and `Raw` variants.",
      "title" : "Pointer API Usability Improvements",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "rdar:\/\/64342031",
          "link" : "rdar:\/\/64342031",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "SR-11156",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-11156",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "rdar:\/\/53272880",
          "link" : "rdar:\/\/53272880",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        },
        {
          "assignee" : "",
          "id" : "rdar:\/\/22541346",
          "link" : "rdar:\/\/22541346",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0335",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40282",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0335-existential-any.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "67f9d90e38bc7be5a585bae849fb69d9f4ae79d8",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "Existential types in Swift have an extremely lightweight spelling: a plain protocol name in type context means an existential type. Over the years, this has risen to the level of **active harm** by causing confusion, leading programmers down the wrong path that often requires them to re-write code once they hit a fundamental [limitation of value-level abstraction](https:\/\/forums.swift.org\/t\/improving-the-ui-of-generics\/22814#heading--limits-of-existentials). This proposal makes the impact of existential types explicit in the language by annotating such types with `any`.",
      "title" : "Introduce existential `any`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        }
      ],
      "id" : "SE-0336",
      "link" : "0336-distributed-actor-isolation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "6b641d4b0ecccb0cf395bc3106054e3d29868fa6",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "With the recent introduction of [actors](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md) to the language, Swift gained powerful and foundational building blocks for expressing *thread-safe* concurrent programs. This proposal is the first in a series of proposals aiming to extend Swift's actor runtime with the concept of *distributed actors*, allowing developers leverage the actor model not only in local, but also distributed settings.",
      "title" : "Distributed Actor Isolation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/beccadax",
          "name" : "Becca Royal-Gordon"
        }
      ],
      "id" : "SE-0337",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40680",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0337-support-incremental-migration-to-concurrency-checking.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/AirspeedSwift",
        "name" : "Ben Cohen"
      },
      "sha" : "7eb12f0c81fb93cdcea6bc0ee1e8522726328a0e",
      "status" : {
        "state" : "implemented",
        "version" : "5.6"
      },
      "summary" : "Swift 5.5 introduced mechanisms to eliminate data races from the language, including the `Sendable` protocol ([SE-0302](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0302-concurrent-value-and-concurrent-closures.md)) to indicate which types have values that can safely be used across task and actor boundaries, and global actors ([SE-0316](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0316-global-actors.md)) to help ensure proper synchronization with (e.g.) the main actor. However, Swift 5.5 does not fully enforce `Sendable` nor all uses of the main actor because interacting with modules which have not been updated for Swift Concurrency was found to be too onerous. We propose adding features to help developers migrate their code to support concurrency and interoperate with other modules that have not yet adopted it, providing a smooth path for the Swift ecosystem to eliminate data races.",
      "title" : "Incremental migration to concurrency checking"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        }
      ],
      "id" : "SE-0338",
      "link" : "0338-clarify-execution-non-actor-async.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "191f0d26e0298810b41d59c5a2a00aba9a3d10a8",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "[SE-0306](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md), which introduced actors to Swift, states that `async` functions may be actor-isolated, meaning that they formally run on some actor's executor.  Nothing in either SE-0306 or [SE-0296](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0296-async-await.md) (`async`\/`await`) ever specifies where asynchronous functions that *aren't* actor-isolated run.  This proposal clarifies that they do not run on any actor's executor, and it tightens up the rules for [sendability checking](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0302-concurrent-value-and-concurrent-closures.md) to avoid a potential data race.",
      "title" : "Clarify the Execution of Non-Actor-Isolated Async Functions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/elsh",
          "name" : "Ellie Shin"
        }
      ],
      "id" : "SE-0339",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40899",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "4023",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0339-module-aliasing-for-disambiguation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "a8e1dfdceedba536bbaa6fcc1db14621152389ec",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Swift does not allow multiple modules in a program to share the same name, and attempts to do so will fail to build. These name collisions can happen in a reasonable program when using multiple packages developed independently from each other. This proposal introduces a way to resolve these conflicts without making major, invasive changes to a package's source by turning a module name in source into an alias, a different unique name.",
      "title" : "Module Aliasing For Disambiguation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/etcwilde",
          "name" : "Evan Wilde"
        }
      ],
      "id" : "SE-0340",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40769",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0340-swift-noasync.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "3a952297524195014ec177740fc48e4662c93640",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "The Swift concurrency model allows tasks to resume on different threads from the one they were suspended on. For this reason, API that relies on thread-local storage, locks, mutexes, and semaphores, should not be used across suspension points.",
      "title" : "Unavailable From Async Attribute"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0341",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40993",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0341-opaque-parameters.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/AirspeedSwift",
        "name" : "Ben Cohen"
      },
      "sha" : "7b3261d75b2bc48776c2437bfe8464e54a7e2bea",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Swift's syntax for generics is designed for generality, allowing one to express complicated sets of constraints amongst the different inputs and outputs of a function. For example, consider an eager concatenation operation that builds an array from two sequences:",
      "title" : "Opaque Parameter Declarations"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/neonichu",
          "name" : "neonichu"
        },
        {
          "link" : "https:\/\/github.com\/tomerd",
          "name" : "tomerd"
        }
      ],
      "id" : "SE-0342",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "3905",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0342-static-link-runtime-libraries-by-default-on-supported-platforms.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      "sha" : "c8ade71a5f0ba955a1b4eb5e727829e90d9b462b",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Swift 5.3.1 introduced [statically linking the Swift runtime libraries on Linux](https:\/\/forums.swift.org\/t\/static-linking-on-linux-in-swift-5-3-1\/). With this feature, users can set the `--static-swift-stdlib` flag when invoking  SwiftPM commands (or the long form `-Xswiftc -static-stdlib`) in order to statically link the Swift runtime libraries into the program.",
      "title" : "Statically link Swift runtime libraries by default on supported platforms"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/etcwilde",
          "name" : "Evan Wilde"
        }
      ],
      "id" : "SE-0343",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40963",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "40998",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "41061",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0343-top-level-concurrency.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "47ab917535dbbceaf08c02496764f05deb60409b",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Bringing concurrency to top-level code is an expected continuation of the concurrency work in Swift. This pitch looks to iron out the details of how concurrency will work in top-level code, specifically focusing on how top-level variables are protected from data races, and how a top-level code context goes from a synchronous context to an asynchronous context.",
      "title" : "Concurrency in Top-level Code"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        },
        {
          "link" : "https:\/\/github.com\/drexin",
          "name" : "Dario Rexin"
        },
        {
          "link" : "https:\/\/github.com\/tomerd",
          "name" : "Tomer Doron"
        }
      ],
      "id" : "SE-0344",
      "link" : "0344-distributed-actor-runtime.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter\/",
        "name" : "Joe Groff"
      },
      "sha" : "1025b7e4b400521e6a5f155c5cfc0150f699b7ad",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "With the recent introduction of [actors](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md) to the language, Swift gained powerful and foundational building blocks for expressing *thread-safe* concurrent programs. Actors guarantee thread-safety thanks to actor-isolation of mutable state they encapsulate.",
      "title" : "Distributed Actor Runtime"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/calda",
          "name" : "Cal Stephens"
        }
      ],
      "id" : "SE-0345",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40694",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0345-if-let-shorthand.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1df831f37f4f126e7f59db812b108bcb8e3a393e",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Optional binding using `if let foo = foo { ... }`, to create an unwrapped variable that shadows an existing optional variable, is an extremely common pattern. This pattern requires the author to repeat the referenced identifier twice, which can cause these optional binding conditions to be verbose, especially when using lengthy variable names. We should introduce a shorthand syntax for optional binding when shadowing an existing variable:",
      "title" : "`if let` shorthand for shadowing an existing optional variable"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/slavapestov",
          "name" : "Slava Pestov"
        }
      ],
      "id" : "SE-0346",
      "link" : "0346-light-weight-same-type-syntax.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "5bbf8aabc35ebd3f85478c46622133a33314af20",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "As a step toward the goal of improving the UI of generics outlined in [Improving the UI of Generics](https:\/\/forums.swift.org\/t\/improving-the-ui-of-generics\/22814#heading--directly-expressing-constraints), this proposal introduces a new syntax for conforming a generic parameter and constraining an associated type via a same-type requirement.",
      "title" : "Lightweight same-type requirements for primary associated types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0347",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41436",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0347-type-inference-from-default-exprs.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "1f1b90eda362373a4d53ffd28803034aef2010ab",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "It's currently impossible to use a default value expression with a generic parameter type to default the argument and its type:",
      "title" : "Type inference from default expressions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rxwei",
          "name" : "Richard Wei"
        }
      ],
      "id" : "SE-0348",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41576",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0348-buildpartialblock.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "62f6bf220ffc5f0edf827eb007931a9b6504c0c2",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "",
      "title" : "`buildPartialBlock` for result builders"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/glessard",
          "name" : "Guillaume Lessard"
        },
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        }
      ],
      "id" : "SE-0349",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41033",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0349-unaligned-loads-and-stores.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "26c9b30d14feceb6599a266429e9985ae44c423e",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Swift does not currently provide a clear way to load data from an arbitrary source of bytes, such as a binary file, in which data may be stored without respect for in-memory alignment. This proposal aims to rectify the situation, making workarounds unnecessary.",
      "title" : "Unaligned Loads and Stores from Raw Memory"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0350",
      "link" : "0350-regex-type-overview.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "2eef59ffb0af617dd0e0620736dc3ab1d0dedd99",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Swift strings provide an obsessively Unicode-forward model of programming with strings. String processing with `Collection`'s algorithms is woefully inadequate for many day-to-day tasks compared to other popular programming and scripting languages.",
      "title" : "Regex Type and Overview"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rxwei",
          "name" : "Richard Wei"
        },
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        },
        {
          "link" : "https:\/\/github.com\/azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0351",
      "link" : "0351-regex-builder.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "079da96df0b17fbe8dad272fdf1f79c9b8d2445c",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "[Declarative string processing](https:\/\/github.com\/apple\/swift-experimental-string-processing\/blob\/main\/Documentation\/DeclarativeStringProcessing.md) aims to offer powerful pattern matching capabilities with expressivity, clarity, type safety, and ease of use. To achieve this, we propose to introduce a result-builder-based DSL, **regex builder**, for creating and composing regular expressions (**regex**es).",
      "title" : "Regex builder DSL"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0352",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41996",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0352-implicit-open-existentials.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "3528f0790913f09ec6d1590394715d34cab46d92",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Existential types in Swift allow one to store a value whose specific type is unknown and may change at runtime. The dynamic type of that stored value, which we refer to as the existential's *underlying type*, is known only by the set of protocols it conforms to and, potentially, its superclass. While existential types are useful for expressing values of dynamic type, they are necessarily restricted because of their dynamic nature. Recent proposals have made [existential types more explicit](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0335-existential-any.md) to help developers understand this dynamic nature, as well as [making existential types more expressive](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0309-unlock-existential-types-for-all-protocols.md) by removing a number of limitations. However, a fundamental issue with existential types remains, that once you have a value of existential type it is *very* hard to use generics with it. Developers usually encounter this via the error message \"protocol 'P' as a type cannot conform to itself\":",
      "title" : "Implicitly Opened Existentials"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/codafi",
          "name" : "Robert Widmann"
        }
      ],
      "id" : "SE-0353",
      "link" : "0353-constrained-existential-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "bb89a02536fb9be564d89483df23f3167b44ffe7",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Existential types complement the Swift type system’s facilities for abstraction. Like generics, they enable a function to take and return multiple possible types. Unlike generic parameter types, existential types need not be known up front when passed as inputs to a function. Further, concrete types can be *erased* (hidden behind the interface of a protocol) when returned from a function. There has been a flurry of activity in this space with[SE-0309](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0309-unlock-existential-types-for-all-protocols.md#covariant-erasure-for-associated-types) unblocking the remaining restrictions on using protocols with associated types as existential types, and [SE-0346](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0346-light-weight-same-type-syntax.md) paving the way for a lightweight constraint syntax for the associated types of protocols. Building directly upon those ideas, this proposal seeks to re-use the syntax of lightweight associated type constraints in the context of existential types.",
      "title" : "Constrained Existential Types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hamishknight",
          "name" : "Hamish Knight"
        },
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        },
        {
          "link" : "https:\/\/github.com\/DaveEwing",
          "name" : "David Ewing"
        }
      ],
      "id" : "SE-0354",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "42119",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "58835",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0354-regex-literals.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "c3668431a0669c6133ba9d896daf87e4fcb2fee7",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "We propose the introduction of regex literals to Swift source code, providing compile-time checks and typed-capture inference. Regex literals help complete the story told in *[Regex Type and Overview](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0350-regex-type-overview.md)*.",
      "title" : "Regex Literals"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hamishknight",
          "name" : "Hamish Knight"
        },
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        }
      ],
      "id" : "SE-0355",
      "link" : "0355-regex-syntax-run-time-construction.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "4efc27242aa4ca783413abf2d6f91bb2f50ddd14",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "A regex declares a string processing algorithm using syntax familiar across a variety of languages and tools throughout programming history. We propose the ability to create a regex at run time from a string containing regex syntax (detailed here), API for accessing the match and captures, and a means to convert between an existential capture representation and concrete types.",
      "title" : "Regex Syntax and Run-time Construction"
    },
    {
      "authors" : [
        {
          "link" : "http:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "id" : "SE-0356",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "61",
          "repository" : "swift-docc",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "3694",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "3732",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "10",
          "repository" : "swift-docc-symbolkit",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "15",
          "repository" : "swift-docc-symbolkit",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "7",
          "repository" : "swift-docc-plugin",
          "type" : "pull"
        }
      ],
      "link" : "0356-swift-snippets.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "c0090e3bdee8edf312408332f66f6832302234a7",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "This proposal describes a convention for writing a new form of sample code called *snippets*. Snippets are short, single-file examples that can build and run from within a Swift package, with access to other code within that package, and can be used in a variety of ways.",
      "title" : "Swift Snippets"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/itingliu",
          "name" : "Tina Liu"
        },
        {
          "link" : "https:\/\/github.com\/milseman",
          "name" : "Michael Ilseman"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        },
        {
          "link" : "https:\/\/github.com\/timvermeulen",
          "name" : "Tim Vermeulen"
        }
      ],
      "id" : "SE-0357",
      "link" : "0357-regex-string-processing-algorithms.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "44629f4b7f0b793b48d9afa8eb3205a3dda757d4",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "The Swift standard library's string processing algorithms are underpowered compared to other popular programming and scripting languages. Some of these omissions can be found in `NSString`, but these fundamental algorithms should have a place in the standard library.",
      "title" : "Regex-powered string processing algorithms"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lorentey",
          "name" : "Karoy Lorentey"
        }
      ],
      "id" : "SE-0358",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41843",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0358-primary-associated-types-in-stdlib.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "1a67f2bf324ad250ac8f535e57eb30b94d20129a",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "[SE-0346](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0346-light-weight-same-type-syntax.md) introduced the concept of primary associated types to the language. This document proposes to adopt this feature in the Swift Standard Library, adding primary associated types to select existing protocols. Additionally, we provide some general API design recommendations that protocol authors may find helpful when adding support for this language feature.",
      "title" : "Primary Associated Types in the Standard Library"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/artemcm",
          "name" : "Artem Chikin"
        },
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "https:\/\/github.com\/nkcsgexi",
          "name" : "Xi Ge"
        }
      ],
      "id" : "SE-0359",
      "link" : "0359-build-time-constant-values.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "2742a8e9a8aeb23e951a9bd1a75871f5c3399461",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "A Swift language feature for requiring certain values to be knowable at compile-time. This is achieved through an attribute, `@const`, constraining properties and function parameters to have compile-time knowable values. Such information forms a foundation for richer compile-time features in the future, such as extraction and validation of values at compile time.",
      "title" : "Build-Time Constant Values"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0360",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "42072",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "42104",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "42167",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "42456",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0360-opaque-result-types-with-availability.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "423f045aa3fe9450822328a398f8b4095197f871",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Since their introduction in [SE-0244](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0244-opaque-result-types.md), opaque result types have become a powerful tool of type-level abstraction that allows library authors to hide implementation details of their APIs.",
      "title" : "Opaque result types with limited availability"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0361",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41172",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0361-bound-generic-extensions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "a33895fa041bf8982ebd6a4a75a8c34382ea817e",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "Specifying the type arguments to a generic type in Swift is almost always written in angle brackets, such as `Array<String>`. Extensions are a notable exception, and if you attempt to extend `Array<String>`, the compiler reports the following error message:",
      "title" : "Extensions on bound generic types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0362",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "59055",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "5632",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0362-piecemeal-future-features.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "4fc84085062779bd0c8af12c71f4629a6b04bbfd",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "Swift 6 is accumulating a number of improvements to the language that have enough source-compatibility impact that they could not be enabled by default in prior language modes (Swift 4.x and Swift 5.x). These improvements are already implemented in the Swift compiler behind the Swift 6 language mode, but they are inaccessible to users, and will remain so until Swift 6 becomes available as a language mode. There are several reasons why we should consider making these improvements available sooner:",
      "title" : "Piecemeal adoption of upcoming language improvements"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        },
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0363",
      "link" : "0363-unicode-for-string-processing.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "43bbe84b05d57654876e103d4c468e8a34c7ec20",
      "status" : {
        "state" : "implemented",
        "version" : "5.7"
      },
      "summary" : "This proposal describes `Regex`'s rich Unicode support during regex matching, along with the character classes and options that define and modify that behavior.",
      "title" : "Unicode for String Processing"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/harlanhaskins",
          "name" : "Harlan Haskins"
        }
      ],
      "id" : "SE-0364",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "36068",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0364-retroactive-conformance-warning.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Steve Canon"
      },
      "sha" : "2c203b62882f28310407cb27d37c528edcdc8eee",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "Many Swift libraries vend currency protocols, like Equatable, Hashable, Codable, among others, that unlock worlds of common functionality for types that conform to them. Sometimes, if a type from another module does not conform to a common currency protocols, developers will declare a conformance of that type to that protocol within their module. However, protocol conformances are globally unique within a process in the Swift runtime, and if multiple modules declare the same conformance, it can cause major problems for library clients and hinder the ability to evolve libraries over time.",
      "title" : "Warning for Retroactive Conformances of External Types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/calda",
          "name" : "Cal Stephens"
        }
      ],
      "id" : "SE-0365",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40702",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "61520",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0365-implicit-self-weak-capture.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "a71d51d2c709e10ddf2f3a55058599ba9691ce55",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "As of [SE-0269](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0269-implicit-self-explicit-capture.md), implicit `self` is permitted in closures when `self` is written explicitly in the capture list. We should extend this support to `weak self` captures, and permit implicit `self` as long as `self` has been unwrapped.",
      "title" : "Allow implicit `self` for `weak self` captures, after `self` is unwrapped"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gottesmm",
          "name" : "Michael Gottesman"
        },
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0366",
      "link" : "0366-move-function.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "29f66dd9dda9683633c75c8e4888536bbf402bd1",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "In this document, we propose adding a new operator, marked by the context-sensitive keyword `consume`, to the language. `consume` ends the lifetime of a specific local `let`, local `var`, or function parameter, and enforces this by causing the compiler to emit a diagnostic upon any use after the consume. This allows for code that relies on **forwarding ownership** of values for performance or correctness to communicate that requirement to the compiler and to human readers. As an example:",
      "title" : "`consume` operator to end the lifetime of a variable binding"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0367",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "60208",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0367-conditional-attributes.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "b6ca2bb8ec393146d8b4ba7c453476ae1f9698ca",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "Over time, Swift has introduced a number of new attributes to communicate additional information in source code. Existing code can then be updated to take advantage of these new constructs to improve its behavior, providing more expressive capabilities, better compile-time checking, better performance, and so on.",
      "title" : "Conditional compilation for attributes"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/benrimmington",
          "name" : "Ben Rimmington"
        }
      ],
      "id" : "SE-0368",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "40722",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62733",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0368-staticbigint.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "4c86fb5ff01a590f7d45d7db24a0d89b9c0f80b1",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "Integer literals in Swift source code can express an arbitrarily large value. However, types outside of the standard library which conform to `ExpressibleByIntegerLiteral` are restricted in practice in how large of a literal value they can be built with, because the value passed to `init(integerLiteral:)` must be of a type supported by the standard library. This makes it difficult to write new integer types outside of the standard library.",
      "title" : "StaticBigInt"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/benpious",
          "name" : "Ben Pious"
        }
      ],
      "id" : "SE-0369",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "60133",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0369-add-customdebugdescription-conformance-to-anykeypath.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "6f58d7aff82458481497e2d1721863a293644d75",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "This proposal is to add conformance to the protocol `CustomDebugStringConvertible` to `AnyKeyPath`.",
      "title" : "Add CustomDebugStringConvertible conformance to AnyKeyPath"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/glessard",
          "name" : "Guillaume Lessard"
        }
      ],
      "id" : "SE-0370",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41608",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0370-pointer-family-initialization-improvements.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "4c107ed4edb979972ac46721acd016042ed388ba",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "The types in the `UnsafeMutablePointer` family typically require manual management of memory allocations, including the management of their initialization state. Unfortunately, not every relevant type in the family has the necessary functionality to fully manage the initialization state of the memory it represents. The states involved are, after allocation:",
      "title" : "Pointer Family Initialization Improvements and Better Buffer Slices"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/nickolas-pohilets",
          "name" : "Mykola Pokhylets"
        }
      ],
      "id" : "SE-0371",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "60057",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0371-isolated-synchronous-deinit.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jumhyn",
        "name" : "Frederick Kellison-Linn"
      },
      "sha" : "7c5bc9d02de09a4325f217f64d6d2e64f3c535b4",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This feature allows `deinit`'s of actors and global-actor isolated types (GAITs) to access non-sendable isolated state, lifting restrictions imposed imposed by [SE-0327](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0327-actor-initializers.md). This is achieved by providing runtime support for hopping onto executors in `__deallocating_deinit()`'s.",
      "title" : "Isolated synchronous deinit"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0372",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "60936",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0372-document-sorting-as-stable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "2449d0ae3c037b6183d2aaf0a044bb792ef619a4",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "Swift's sorting algorithm was changed to be stable before Swift 5, but we've never updated the documentation to provide that guarantee. Let's commit to the sorting algorithm being stable so that people can rely on that behavior.",
      "title" : "Document Sorting as Stable"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0373",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "60839",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0373-vars-without-limits-in-result-builders.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "ec428914b27ede9d711d0e400b3109ab0408d3b9",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "The implementation of the result builder transform (introduced by [SE-0289](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0289-result-builders.md)) places a number of limitations on local variable declarations in the transformed function. Specifically, local variables need to have an initializer expression, they cannot be computed, they cannot have observers, and they cannot have attached property wrappers. None of these restrictions were explicit in the SE-0289 proposal, but they are a *de facto* part of the current feature.",
      "title" : "Lift all limitations on variables in result builders"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mbrandonw",
          "name" : "Brandon Williams"
        },
        {
          "link" : "https:\/\/github.com\/stephencelis",
          "name" : "Stephen Celis"
        }
      ],
      "id" : "SE-0374",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "61222",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0374-clock-sleep-for.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Steve Canon"
      },
      "sha" : "f9653cc4e085f240cbb0918fb510a33ec0d9e746",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "The `Clock` protocol introduced in Swift 5.7 provides a way to suspend until a future instant, but does not provide a way to sleep for a duration. This differs from the static `sleep` methods on `Task`, which provide both a way to sleep until an instant or for a duration.",
      "title" : "Add sleep(for:) to Clock"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0375",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "61321",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0375-opening-existential-optional.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "f49ac874164142642589d9c6724794193d07e6ce",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "[SE-0352 \"Implicitly Opened Existentials\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0352-implicit-open-existentials.md) has a limitation that prevents the opening of an existential argument when the corresponding parameter is optional. This proposal changes that behavior, so that such a call will succeed when a (non-optional) existential argument is passed to a parameter of optional type:",
      "title" : "Opening existential arguments to optional parameters"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/tshortli",
          "name" : "Allan Shortlidge"
        }
      ],
      "id" : "SE-0376",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "41271",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "41348",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "41416",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "41612",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0376-function-back-deployment.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jumhyn",
        "name" : "Frederick Kellison-Linn"
      },
      "sha" : "c5b2465127535e54254bf518c0b7e3c040fba44b",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "This proposal introduces a `@backDeployed` attribute to allow ABI-stable libraries to make their own public APIs available on older OSes. When a `@backDeployed` API isn't present in the library that ships with an older OS, a client running on that OS can still use the API because a fallback copy of its implementation has been emitted into the client.",
      "title" : "Function Back Deployment"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gottesmm",
          "name" : "Michael Gottesman"
        },
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "id" : "SE-0377",
      "link" : "0377-parameter-ownership-modifiers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "f7947acd3acaa80d5bc8d86c477a8a571a4bff23",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "We propose new `borrowing` and `consuming` parameter modifiers to allow developers to explicitly choose the ownership convention that a function uses to receive immutable parameters. Applying one of these modifiers to a parameter causes that parameter binding to no longer be implicitly copyable, and potential copies need to be marked with the new `copy x` operator. This allows for fine-tuning of performance by reducing the number of ARC calls or copies needed to call a function, and provides a necessary prerequisite feature for noncopyable types to specify whether a function consumes a noncopyable value or not.",
      "title" : "`borrowing` and `consuming` parameter ownership modifiers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/yim-lee",
          "name" : "Yim Lee"
        }
      ],
      "id" : "SE-0378",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "5838",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0378-package-registry-auth.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "5b20615c83d10dc11a8199713d6e507257b06089",
      "status" : {
        "state" : "implemented",
        "version" : "5.8"
      },
      "summary" : "A package registry may require authentication for some or all of its API in order to identify user performing the action and authorize the request accordingly.",
      "title" : "Package Registry Authentication"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/maxovtsin",
          "name" : "Max Ovtsin"
        }
      ],
      "id" : "SE-0379",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "34199",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0379-opt-in-reflection-metadata.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "ddbcb87a6caac053b4ebb0d86d18ddecedaf8a45",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This proposal seeks to increase the safety, efficiency, and secrecy of Swift Reflection Metadata by improving the existing mechanism and providing the opportunity to express a requirement on Reflection Metadata in APIs that consume it.",
      "title" : "Swift Opt-In Reflection Metadata"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/airspeedswift",
          "name" : "Ben Cohen"
        },
        {
          "link" : "https:\/\/github.com\/hamishknight",
          "name" : "Hamish Knight"
        }
      ],
      "id" : "SE-0380",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "62178",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0380-if-switch-expressions.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "b2958c3d2f6e1708eb67bfb86586e6bc810c2893",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "This proposal introduces the ability to use `if` and `switch` statements as expressions, for the purpose of:",
      "title" : "`if` and `switch` expressions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/Lukasa",
          "name" : "Cory Benfield"
        },
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad Malawski"
        }
      ],
      "id" : "SE-0381",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "62361",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0381-task-group-discard-results.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "726f6b303bd2f01a9111027e2aa0eb3119f69472",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "We propose to introduce a new type of structured concurrency task group:  `Discarding[Throwing]TaskGroup`. This type of group is similar to `TaskGroup` however it discards results of its child tasks immediately. It is specialized for potentially never-ending task groups, such as top-level loops of http or other kinds of rpc servers.",
      "title" : "DiscardingTaskGroups"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0382",
      "link" : "0382-expression-macros.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "ed50456376a50e8a5fc52e173e7e18d9f37c0bc4",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Expression macros provide a way to extend Swift with new kinds of expressions, which can perform arbitrary syntactic transformations on their arguments to produce new code. Expression macros make it possible to extend Swift in ways that were only previously possible by introducing new language features, helping developers build more expressive libraries and eliminate extraneous boilerplate.",
      "title" : "Expression Macros"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/codafi",
          "name" : "Robert Widmann"
        }
      ],
      "id" : "SE-0383",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "62151",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0383-deprecate-uiapplicationmain-and-nsapplicationmain.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "5461750ea04ab290dbf5277a50cd7d58fd4ba849",
      "status" : {
        "state" : "implemented",
        "version" : "5.10"
      },
      "summary" : "`@UIApplicationMain` and `@NSApplicationMain` used to be the standard way for iOS and macOS apps respectively to declare a synthesized platform-specific entrypoint for an app. These functions have since been obsoleted by [SE-0281](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0281-main-attribute.md)'s introduction of the `@main` attribute, and they now represent a confusing bit of duplication in the language. This proposal seeks to deprecate these alternative entrypoint attributes in favor of `@main` in pre-Swift 6, and it makes their use in Swift 6 a hard error.",
      "title" : "Deprecate @UIApplicationMain and @NSApplicationMain"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/NuriAmari",
          "name" : "Nuri Amari"
        }
      ],
      "id" : "SE-0384",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "61606",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0384-importing-forward-declared-objc-interfaces-and-protocols.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "6718630157e51125ed0b2f1dde73ba00d93ad1c7",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "This proposal seeks to improve the usability of existing Objective-C libraries from Swift by reducing the negative impact forward declarations have on API visibility from Swift. We wish to start synthesizing placeholder types to represent forward declared Objective-C interfaces and protocols in Swift.",
      "title" : "Importing Forward Declared Objective-C Interfaces and Protocols"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        },
        {
          "link" : "https:\/\/github.com\/stmontgomery",
          "name" : "Stuart Montgomery"
        }
      ],
      "id" : "SE-0385",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "62426",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62738",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62818",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62850",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62920",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "63057",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0385-custom-reflection-metadata.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "8c7d571cf9d1259488d2df47033973041cbd1016",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "In Swift, declarations are annotated with attributes to opt into both built-in language features (e.g. `@available`) and library functionality (e.g. `@RegexComponentBuilder`). This proposal introduces the ability to attach library-defined reflection metadata to declarations using custom attributes, which can then be queried by the library to opt client code into library functionality.",
      "title" : "Custom Reflection Metadata"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/elsh",
          "name" : "Ellie Shin"
        },
        {
          "link" : "https:\/\/github.com\/xymus",
          "name" : "Alexis Laferriere"
        }
      ],
      "id" : "SE-0386",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "62700",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62704",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62652",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "62652",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0386-package-access-modifier.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "3376ac883dddf36c8abf89df6f65f3a980259571",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "This proposal introduces `package` as a new access modifier.  Currently, to access a symbol in another module, that symbol needs to be declared `public`.  However, a symbol being `public` allows it to be accessed from any module at all, both within a package and from outside of a package, which is sometimes undesirable.  We need a new access modifier to enable more control over the visibility scope of such symbols.",
      "title" : "New access modifier: `package`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/MaxDesiatov",
          "name" : "Max Desiatov"
        },
        {
          "link" : "https:\/\/github.com\/compnerd",
          "name" : "Saleem Abdulrasool"
        },
        {
          "link" : "https:\/\/github.com\/etcwilde",
          "name" : "Evan Wilde"
        }
      ],
      "id" : "SE-0387",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "5911",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "5922",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "6023",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "6186",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0387-cross-compilation-destinations.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/shahmishal",
        "name" : "Mishal Shah"
      },
      "sha" : "c93ca111de77585d027900529bd2f107ad66223a",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Cross-compilation is a common development use case. When cross-compiling, we need to refer to these concepts:",
      "title" : "Swift SDKs for Cross-Compilation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/FranzBusch",
          "name" : "Franz Busch"
        }
      ],
      "id" : "SE-0388",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "62968",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0388-async-stream-factory.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      "sha" : "d249793ad40442ea6eff9e323ff949b2cc67d51b",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "We propose introducing helper methods for creating `AsyncStream` and `AsyncThrowingStream` instances which make the stream's continuation easier to access.",
      "title" : "Convenience Async[Throwing]Stream.makeStream methods"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/rxwei",
          "name" : "Richard Wei"
        }
      ],
      "id" : "SE-0389",
      "link" : "0389-attached-macros.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "4a619a43b68d1febe798f12b7c9eb4f822c06d41",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Attached macros provide a way to extend Swift by creating and extending declarations based on arbitrary syntactic transformations on their arguments. They make it possible to extend Swift in ways that were only previously possible by introducing new language features, helping developers build more expressive libraries and eliminate extraneous boilerplate.",
      "title" : "Attached Macros"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        },
        {
          "link" : "https:\/\/github.com\/gottesmm",
          "name" : "Michael Gottesman"
        },
        {
          "link" : "https:\/\/github.com\/atrick",
          "name" : "Andrew Trick"
        },
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        }
      ],
      "id" : "SE-0390",
      "link" : "0390-noncopyable-structs-and-enums.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      },
      "sha" : "50490bb94cdc1c5d63750f0924174ad364a89b20",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "This proposal introduces the concept of **noncopyable** types (also known as \"move-only\" types). An instance of a noncopyable type always has unique ownership, unlike normal Swift types which can be freely copied.",
      "title" : "Noncopyable structs and enums"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/yim-lee",
          "name" : "Yim Lee"
        }
      ],
      "id" : "SE-0391",
      "link" : "0391-package-registry-publish.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      },
      "sha" : "af6ba211991124d9dc81145c84ab1cb52dc122c5",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "A package registry makes packages available to consumers. Starting with Swift 5.7, SwiftPM supports dependency resolution and package download using any registry that implements the [service specification](https:\/\/github.com\/apple\/swift-package-manager\/blob\/main\/Documentation\/PackageRegistry\/Registry.md) proposed alongside with [SE-0292](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0292-package-registry-service.md). SwiftPM does not yet provide any tooling for publishing packages, so package authors must manually prepare the contents (e.g., source archive) and interact with the registry on their own to publish a package release. This proposal aims to standardize package publishing such that SwiftPM can offer a complete and well-rounded experience for using package registries.",
      "title" : "Package Registry Publish"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        }
      ],
      "id" : "SE-0392",
      "link" : "0392-custom-actor-executors.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "af8925e9c45f251b95ec533fcdb2fe2ffa97e3a4",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "As Swift Concurrency continues to mature it is becoming increasingly important to offer adopters tighter control over where exactly asynchronous work is actually executed.",
      "title" : "Custom Actor Executors"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/slavapestov",
          "name" : "Slava Pestov"
        }
      ],
      "id" : "SE-0393",
      "link" : "0393-parameter-packs.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "97cb16133f2bcabd6f2f87f7dfaffe4bea968e4d",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Many modern Swift libraries include ad-hoc variadic APIs with an arbitrary upper bound, typically achieved with overloads that each have a different fixed number of type parameters and corresponding arguments. Without variadic generic programming support in the language, these ad-hoc variadic APIs have a significant cost on library maintenance and the developer experience of using these APIs.",
      "title" : "Value and Type Parameter Packs"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/neonichu",
          "name" : "Boris Buegling"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0394",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "6185",
          "repository" : "swift-package-manager",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "6200",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0394-swiftpm-expression-macros.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      "sha" : "f018470cf8309c4d02774894aee5fc998dfa208c",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Macros provide a way to extend Swift by performing arbitrary syntactic transformations on input source code to produce new code. One example for this are expression macros which were previously proposed in [SE-0382](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0382-expression-macros.md). This proposal covers how custom macros are defined, built and distributed as part of a Swift package.",
      "title" : "Package Manager Support for Custom Macros"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/phausler",
          "name" : "Philippe Hausler"
        },
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0395",
      "link" : "0395-observability.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "9a03397eeeea6c5e26cf968d231ff31976d8f1b2",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Making responsive apps often requires the ability to update the presentation when underlying data changes. The *observer pattern* allows a subject to maintain a list of observers and notify them of specific or general state changes. This has the advantages of not directly coupling objects together and allowing implicit distribution of updates across potential multiple observers. An observable object needs no specific information about its observers.",
      "title" : "Observation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/natecook1000",
          "name" : "Nate Cook"
        }
      ],
      "id" : "SE-0396",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "64899",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0396-never-codable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "be3ecd86ea4f07b694c07c7aa47f40ce4fc5f3be",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Extend `Never` so that it conforms to the `Encodable` and `Decodable` protocols, together known as `Codable`.",
      "title" : "Conform `Never` to `Codable`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/rxwei",
          "name" : "Richard Wei"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0397",
      "link" : "0397-freestanding-declaration-macros.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "c0d3352011907650d4cb796a5e3952aef2dc1eb3",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "[SE-0382 \"Expression macros\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0382-expression-macros.md) introduced macros into Swift. The approach involves an explicit syntax for uses of macros (prefixed by `#`), type checking for macro arguments prior to macro expansion, and macro expansion implemented via separate programs that operate on the syntax tree of the arguments.",
      "title" : "Freestanding Declaration Macros"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/slavapestov",
          "name" : "Slava Pestov"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0398",
      "link" : "0398-variadic-types.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/Jumhyn",
        "name" : "Frederick Kellison-Linn"
      },
      "sha" : "d0cb8e1c3a713f3f6b63deb75ba15519cf4fa9bb",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Previously [SE-0393](0393-parameter-packs.md) introduced type parameter packs and several related concepts, allowing generic function declarations to abstract over a variable number of types. This proposal generalizes these ideas to generic type declarations.",
      "title" : "Allow Generic Types to Abstract Over Packs"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/sophiapoirier",
          "name" : "Sophia Poirier"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0399",
      "link" : "0399-tuple-of-value-pack-expansion.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "89182688258ef04e54c8c88d918fb151aba2c0ac",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Building upon the **Value and Type Parameter Packs** proposal [SE-0393](https:\/\/forums.swift.org\/t\/se-0393-value-and-type-parameter-packs\/63859), this proposal enables referencing a tuple value that contains a value pack inside a pack repetition pattern.",
      "title" : "Tuple of value pack expansion"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/douggregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0400",
      "link" : "0400-init-accessors.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/Jumhyn",
        "name" : "Frederick Kellison-Linn"
      },
      "sha" : "3736f14eb5c5faa26bc27499a9fb186ccb4034db",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "Init accessors generalize the out-of-line initialization feature of property wrappers to allow any computed property on types to opt into definite initialization analysis, and subsume initialization of a set of stored properties with custom initialization code.",
      "title" : "Init Accessors"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bjhomer",
          "name" : "BJ Homer"
        }
      ],
      "id" : "SE-0401",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "63884",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0401-remove-property-wrapper-isolation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "b5c0e1dbbfcc49cab4a9aaafa900cfe59260f40d",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "[SE-0316: Global Actors](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0316-global-actors.md) introduced annotations like `@MainActor` to isolate a type, function, or property to a particular global actor. It also introduced various rules for how that global actor isolation could be inferred. One of those rules was:",
      "title" : "Remove Actor Isolation Inference caused by Property Wrappers"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0402",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "66967",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "1859",
          "repository" : "swift-syntax",
          "type" : "pull"
        }
      ],
      "link" : "0402-extension-macros.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "b47ef4ee4a051fe5a27914d2348df7dd7cbe0061",
      "status" : {
        "state" : "implemented",
        "version" : "5.9"
      },
      "summary" : "This proposal generalizes the `conformance` macro role as an `extension` macro role that can add a member list to an extension in addition to a protocol and `where` clause.",
      "title" : "Generalize `conformance` macros as `extension` macros"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ncooke3",
          "name" : "Nick Cooke"
        }
      ],
      "id" : "SE-0403",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "5919",
          "repository" : "swift-package-manager",
          "type" : "pull"
        }
      ],
      "link" : "0403-swiftpm-mixed-language-targets.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      "sha" : "16e7b95f95ea4dfc92793daaa033883e1543e13b",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "This is a proposal for adding package manager support for targets containing both Swift and [C based language sources](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0038-swiftpm-c-language-targets.md) (henceforth, referred to as mixed language sources). Currently, a target’s source can be either Swift or a C based language ([SE-0038](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0038-swiftpm-c-language-targets.md)), but not both.",
      "title" : "Package Manager Mixed Language Target Support"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/karwa",
          "name" : "Karl Wagner"
        }
      ],
      "id" : "SE-0404",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "66247",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0404-nested-protocols.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "9722c8b2809e6f05c650eb946242eaa9113ae9e6",
      "status" : {
        "state" : "implemented",
        "version" : "5.10"
      },
      "summary" : "Allows protocols to be nested in non-generic `struct\/class\/enum\/actor`s, and functions.",
      "title" : "Allow Protocols to be Nested in Non-Generic Contexts"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/glessard",
          "name" : "Guillaume Lessard"
        }
      ],
      "id" : "SE-0405",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "68419",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "68423",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0405-string-validating-initializers.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "cab4200b94d074155a15fe5a8f2f841e6ea8a4dd",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "We propose adding new `String` failable initializers that validate encoded input, and return `nil` when the input contains any invalid elements.",
      "title" : "String Initializers with Encoding Validation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/FranzBusch",
          "name" : "Franz Busch"
        }
      ],
      "id" : "SE-0406",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "66488",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0406-async-stream-backpressure.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "a07c84c1df14f3d7c5126eeee16c1b5768693f52",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "[SE-0314](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0314-async-stream.md) introduced new `Async[Throwing]Stream` types which act as root asynchronous sequences. These two types allow bridging from synchronous callbacks such as delegates to an asynchronous sequence. This proposal adds a new way of constructing asynchronous streams with the goal to bridge backpressured systems into an asynchronous sequence. Furthermore, this proposal aims to clarify the cancellation behaviour both when the consuming task is cancelled and when the production side indicates termination.",
      "title" : "Backpressure support for AsyncStream"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0407",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "67758",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0407-member-macro-conformances.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "18da0265e719b307962e51811cbb9f8b6f40261c",
      "status" : {
        "state" : "implemented",
        "version" : "5.9.2"
      },
      "summary" : "The move from conformance macros to extension macros in [SE-0402](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0402-extension-macros.md) included the ability for extension macros to learn about which protocols the type already conformed to (e.g., because a superclass conformed or an explicit conformance was stated somewhere), so that the macro could avoid adding declarations and conformances that aren't needed. It also meant that any new declarations added are part of an extension---not the original type definition---which is generally beneficial, because it means that (e.g.) a new initializer doesn't suppress the memberwise initializer. It's also usually considered good form to split protocol conformances out into their own extensions.",
      "title" : "Member Macro Conformances"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/simanerush",
          "name" : "Sima Nerush"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0408",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "67594",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0408-pack-iteration.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor\/",
        "name" : "Doug Gregor"
      },
      "sha" : "b625affbc96ed2ec78fe31b4d789228973f11c85",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "Building upon the Value and Type Parameter Packs proposal [SE-0393](https:\/\/forums.swift.org\/t\/se-0393-value-and-type-parameter-packs\/63859), this proposal enables iterating over each element in a value pack and bind each value to a local variable using a `for-in` syntax.",
      "title" : "Pack Iteration"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/xymus",
          "name" : "Alexis Laferrière"
        }
      ],
      "id" : "SE-0409",
      "link" : "0409-access-level-on-imports.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/Jumhyn",
        "name" : "Frederick Kellison-Linn"
      },
      "sha" : "2a92cca6a3b4f95b3faacade8c30dc9beef8aa5c",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Declaring the visibility of a dependency with an access-level modifier on import declarations enables enforcing which declarations can reference the imported module. A dependency can be marked as being visible only to the source file, module, package, or to all clients. This brings the familiar behavior of the access level of declarations to dependencies and imported declarations. This feature can hide implementation details from clients and helps to manage dependency creep.",
      "title" : "Access-level modifiers on import declarations"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lorentey",
          "name" : "Karoy Lorentey"
        },
        {
          "link" : "https:\/\/github.com\/Azoy",
          "name" : "Alejandro Alonso"
        }
      ],
      "id" : "SE-0410",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "68857",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0410-atomics.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "sha" : "38b8c99ce8c4a2fda498199bf75e38d1e16088c6",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "This proposal adds a limited set of low-level atomic operations to the Standard Library, including native spellings for C++-style memory orderings. Our goal is to enable intrepid library authors and developers writing system level code to start building synchronization constructs directly in Swift.",
      "title" : "Low-Level Atomic Operations ⚛︎",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-9144",
          "link" : "https:\/\/github.com\/apple\/swift\/issues\/51640",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0411",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "68794",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0411-isolated-default-values.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "32cdb7fdea5ca985297f4da0c93fc7da6f77944a",
      "status" : {
        "state" : "implemented",
        "version" : "5.10"
      },
      "summary" : "Default value expressions are permitted for default arguments and default stored property values. There are several issues with the current actor isolation rules for default value expressions: the rules for stored properties admit data races, the rules for default argument values are overly restrictive, and the rules between the different places you can use default value expressions are inconsistent with each other, making the actor isolation model harder to understand. This proposal unifies the actor isolation rules for default value expressions, eliminates data races, and improves expressivity by safely allowing isolation for default values.",
      "title" : "Isolated default value expressions",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "apple\/swift#58177",
          "link" : "https:\/\/github.com\/apple\/swift\/issues\/58177",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/sophiapoirier",
          "name" : "Sophia Poirier"
        }
      ],
      "id" : "SE-0412",
      "link" : "0412-strict-concurrency-for-global-variables.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "43ab2546efb8ed422cb85d74e4ed2ab4d3d094df",
      "status" : {
        "state" : "implemented",
        "version" : "5.10"
      },
      "summary" : "This proposal defines options for the usage of global variables free of data races. Within this proposal, global variables encompass any storage of static duration: `let`s and stored `var`s that are either declared at global scope or as static member variables.",
      "title" : "Strict concurrency for global variables"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/minuscorp",
          "name" : "Jorge Revuelta (@minuscorp)"
        },
        {
          "link" : "https:\/\/github.com\/torstenlehmann",
          "name" : "Torsten Lehmann"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0413",
      "link" : "0413-typed-throws.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Steve Canon"
      },
      "sha" : "4c09a03947c61ada97fbd2f5e39646e363c099da",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Swift's error handling model allows functions and closures marked `throws` to note that they can exit by throwing an error. The error values themselves are always type-erased to `any Error`. This approach encourages errors to be handled generically, and remains a good default for most code. However, there are some places where the type erasure is unfortunate, because it doesn't allow for more precise error typing in narrow places where it is possible and desirable to handle all errors, or where the costs of type erasure are prohibitive.",
      "title" : "Typed throws"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gottesmm",
          "name" : "Michael Gottesman"
        },
        {
          "link" : "https:\/\/github.com\/jturcotti",
          "name" : "Joshua Turcotti"
        }
      ],
      "id" : "SE-0414",
      "link" : "0414-region-based-isolation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "2b078d129dd3942df8a63315f1d2d82bbac2c614",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Swift Concurrency assigns values to *isolation domains* determined by actor and task boundaries. Code running in distinct isolation domains can execute concurrently, and `Sendable` checking defines away concurrent access to shared mutable state by preventing non-`Sendable` values from being passed across isolation boundaries full stop. In practice, this is a significant semantic restriction, because it forbids natural programming patterns that are free of data races.",
      "title" : "Region based Isolation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0415",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "70034",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0415-function-body-macros.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "14f1e3783ce14ae2472afa4b6c6e9e2e0cae11c0",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "Macros augment Swift programs with additional code, which can include new declarations, expressions, and statements. One of the key ways in which one might want to augment code---synthesizing or updating the body of a function---is not currently supported by the macro system. One can create new functions that have their own function bodies, but not provide, augment, or replace function bodies for a function declared by the user.",
      "title" : "Function Body Macros"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jumhyn",
          "name" : "Frederick Kellison-Linn"
        }
      ],
      "id" : "SE-0416",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "39612",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0416-keypath-function-subtyping.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "0d975319beed71b07e155d0cabf81d6d7caca37d",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "Today, keypath literals can only be narrowly converted to a function which exactly matches the argument and return type. This proposal allows key path literals to partake in the full generality of the conversions we allow between arbitrary function types, so that the following code compiles without error:",
      "title" : "Subtyping for keypath literals as functions"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/FranzBusch",
          "name" : "Franz Busch"
        }
      ],
      "id" : "SE-0417",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "68793",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0417-task-executor-preference.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "9064a6e840a512cbb0b86f92b7e219698ab1669b",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "Swift Concurrency uses tasks and actors to model concurrency and primarily relies on actor isolation to determine where a specific piece of code shall execute.",
      "title" : "Task Executor Preference"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/angela-laar",
          "name" : "Angela Laar"
        },
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0418",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "67498",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "70076",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0418-inferring-sendable-for-methods.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      "sha" : "9bc4e1bc045f6e52f0f74dfa48e9cf1902bcd46d",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "This proposal is focused on a few corner cases in the language surrounding functions as values and key path literals when using concurrency. We propose Sendability should be inferred for partial and unapplied methods. We also propose to lift a Sendability restriction placed on key path literals in [SE-0302](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0302-concurrent-value-and-concurrent-closures.md#key-path-literals) by allowing the developers to control whether key path literal is Sendable or not. The goal is to improve flexibility, simplicity, and ergonomics without significant changes to Swift.",
      "title" : "Inferring `Sendable` for methods and key path literals"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/al45tair",
          "name" : "Alastair Houghton"
        }
      ],
      "id" : "SE-0419",
      "link" : "0419-backtrace-api.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Steve Canon"
      },
      "sha" : "a458d6f3537f4514a545ca6f484dae30902537e6",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "This year we are improving the usability of Swift for command line and server-side development by adding first-class support for backtraces to Swift.",
      "title" : "Swift Backtrace API"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/douggregor",
          "name" : "Doug Gregor"
        }
      ],
      "id" : "SE-0420",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "70758",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "70902",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0420-inheritance-of-actor-isolation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "a34c0f1cd2e878d544c16c7322873718b141db7f",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "Under Swift's [actors design](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md), every function in Swift has an actor isolation: it is either isolated to some specific actor or non-isolated.  It is sometimes useful to be able to give a function the same actor isolation as its caller, either to give it access to actor-isolated data or just to avoid unnecessary suspensions.  This proposal allows `async` functions to opt in to this behavior.",
      "title" : "Inheritance of actor isolation"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/douggregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        }
      ],
      "id" : "SE-0421",
      "link" : "0421-generalize-async-sequence.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/Jumhyn",
        "name" : "Freddy Kellison-Linn"
      },
      "sha" : "94717d569e8d304ac2cda137ddbf7ea584665fc6",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "This proposal generalizes `AsyncSequence` in two ways:",
      "title" : "Generalize effect polymorphism for `AsyncSequence` and `AsyncIteratorProtocol`"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ApolloZhu",
          "name" : "Apollo Zhu"
        }
      ],
      "id" : "SE-0422",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "70602",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0422-caller-side-default-argument-macro-expression.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "675eba015c04b108e5bf1bf888e718af9cef7142",
      "status" : {
        "state" : "implemented",
        "version" : "6.0"
      },
      "summary" : "This proposal aims to lift the restriction afore set in [SE-0382 \"Expression macros\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0382-expression-macros.md) to allow non-built-in expression macros as caller-side default argument expressions.",
      "title" : "Expression macro as caller-side default argument"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0423",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "70867",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "71261",
          "repository" : "swift",
          "type" : "pull"
        },
        {
          "account" : "apple",
          "id" : "2419",
          "repository" : "swift-syntax",
          "type" : "pull"
        }
      ],
      "link" : "0423-dynamic-actor-isolation.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      "sha" : "f6cbf7729df7b0c5ce090801e9e60fd05f9df5ac",
      "status" : {
        "end" : "2024-03-01T00:00:00Z",
        "start" : "2024-02-20T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "Many Swift programs need to interoperate with frameworks written in C\/C++\/Objective-C whose implementations cannot participate in static data race safety. Similarly, many Swift programs have dependencies that have not yet adopted strict concurrency checking. A `@preconcurrency import` statement downgrades concurrency-related error messages that the programmer cannot resolve because the fundamental issue is in one of the dependencies. To strengthen Swift's data-race safety guarantees while working with preconcurrency dependencies, this proposals adds actor isolation checking at runtime for synchronous isolated functions.",
      "title" : "Dynamic actor isolation enforcement from non-strict-concurrency contexts",
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Review ended on 2024-03-01 00:00:00 +0000.",
          "stage" : "validate"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        }
      ],
      "id" : "SE-0424",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "71172",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0424-custom-isolation-checking-for-serialexecutor.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      "sha" : "4219f651c454727b553437e716cb04429f784841",
      "status" : {
        "state" : "accepted"
      },
      "summary" : "[SE-0392 (Custom Actor Executors)](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0392-custom-actor-executors.md) added support for custom actor executors, but its support is incomplete. Safety checks like [`Actor.assumeIsolated`](https:\/\/developer.apple.com\/documentation\/swift\/actor\/assumeisolated(_:file:line:)) work correctly when code is running on the actor through a task, but they don't work when code is scheduled to run on the actor's executor through some other mechanism. For example, if an actor uses a serial `DispatchQueue` as its executor, a function dispatched *directly* to the queue with DispatchQueue.async cannot use `assumeIsolated` to assert that the actor is currently isolated. This proposal fixes this by allowing custom actor executors to provide their own logic for these safety checks.",
      "title" : "Custom isolation checking for SerialExecutor"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/stephentyrone",
          "name" : "Stephen Canon"
        }
      ],
      "id" : "SE-0425",
      "link" : "0425-int128.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "sha" : "8cf9212086cfb1688c660f37b725f0059e2fafbb",
      "status" : {
        "end" : "2024-03-29T00:00:00Z",
        "start" : "2024-03-05T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "",
      "title" : "128-bit Integer Types"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        },
        {
          "link" : "https:\/\/github.com\/glessard",
          "name" : "Guillaume Lessard"
        },
        {
          "link" : "https:\/\/github.com\/nate-chandler",
          "name" : "Nate Chandler"
        },
        {
          "link" : "https:\/\/github.com\/tbkka",
          "name" : "Tim Kientzle"
        }
      ],
      "id" : "SE-0426",
      "link" : "0426-bitwise-copyable.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      "sha" : "f98e52d17dcd1a481608f51c0785d19c9ad1542b",
      "status" : {
        "state" : "returnedForRevision"
      },
      "summary" : "We propose a new marker protocol `BitwiseCopyable` that can be conformed to by types that can be moved or copied with direct calls to `memcpy` and which require no special destroy operation[^1]. When compiling generic code with such constraints, the compiler can emit these efficient operations directly, only requiring minimal overhead to look up the size of the value at runtime. Alternatively, developers can use this constraint to selectively provide high-performance variations of specific operations, such as bulk copying of a container.",
      "title" : "BitwiseCopyable"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/kavon",
          "name" : "Kavon Farvardin"
        },
        {
          "link" : "https:\/\/github.com\/tbkka",
          "name" : "Tim Kientzle"
        },
        {
          "link" : "https:\/\/github.com\/slavapestov",
          "name" : "Slava Pestov"
        }
      ],
      "id" : "SE-0427",
      "link" : "0427-noncopyable-generics.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      "sha" : "d1a4c7f61f297420314944b2a9a94f170bd8c7c1",
      "status" : {
        "end" : "2024-03-22T00:00:00Z",
        "start" : "2024-03-08T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "The noncopyable types introduced in [SE-0390: Noncopyable structs and enums](0390-noncopyable-structs-and-enums.md) cannot be used with generics, protocols, or existentials, leaving an expressivity gap in the language. This proposal extends Swift's type system to fill this gap.",
      "title" : "Noncopyable Generics",
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Review ended on 2024-03-22 00:00:00 +0000.",
          "stage" : "validate"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/ktoso",
          "name" : "Konrad 'ktoso' Malawski"
        },
        {
          "link" : "http:\/\/github.com\/xedin",
          "name" : "Pavel Yaskevich"
        }
      ],
      "id" : "SE-0428",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "70928",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0428-resolve-distributed-actor-protocols.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/Jumhyn",
        "name" : "Freddy Kellison-Linn"
      },
      "sha" : "8272486c5e689f5a58da58fb1c00ed36537ec9c2",
      "status" : {
        "end" : "2024-03-26T00:00:00Z",
        "start" : "2024-03-13T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "Swift's distributed actors offer developers a flexible bring-your-own-runtime approach to building distributed systems using the actor paradigm. The initial design of the feature aimed for systems where all nodes of a distributed actor system (such as nodes in a [cluster](https:\/\/github.com\/apple\/swift-distributed-actors)) share the same binary, and therefore all have access to the concrete `distributed actor` declarations which may be resolved and made remote calls on.",
      "title" : "Resolve DistributedActor protocols",
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Review ended on 2024-03-26 00:00:00 +0000.",
          "stage" : "validate"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gottesmm",
          "name" : "Michael Gottesman"
        },
        {
          "link" : "https:\/\/github.com\/nate-chandler",
          "name" : "Nate Chandler"
        }
      ],
      "id" : "SE-0429",
      "link" : "0429-partial-consumption.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      "sha" : "eb900639f058ca5badd0e5200b262902b3bf2b0d",
      "status" : {
        "end" : "2024-03-26T00:00:00Z",
        "start" : "2024-03-13T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "We propose allowing noncopyable fields in deinit-less aggregates to be consumed individually, so long as they are defined in the current module or frozen. Additionally, we propose allowing fields of such an aggregate with a deinit to be consumed individually *within that deinit*. This permits common patterns to be used with many noncopyable values.",
      "title" : "Partial consumption of noncopyable values",
      "warnings" : [
        {
          "kind" : "warning",
          "message" : "Review ended on 2024-03-26 00:00:00 +0000.",
          "stage" : "validate"
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/gottesmm",
          "name" : "Michael Gottesman"
        },
        {
          "link" : "https:\/\/github.com\/hborla",
          "name" : "Holly Borla"
        },
        {
          "link" : "https:\/\/github.com\/rjmccall",
          "name" : "John McCall"
        }
      ],
      "id" : "SE-0430",
      "link" : "0430-transferring-parameters-and-results.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      "sha" : "ec4f7c19aa72e8d4b993b382af288678f320704f",
      "status" : {
        "end" : "2024-04-01T00:00:00Z",
        "start" : "2024-03-21T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "This proposal extends region isolation to enable an explicit `transferring` annotation to denote when a parameter or result value is required to be in a disconnected region at the function boundary. This allows the callee or the caller, respectively, to transfer a non-`Sendable` parameter or result value over an isolation boundary or merge the value into an actor-isolated region.",
      "title" : "`transferring` isolation regions of parameter and result values"
    }
  ],
  "schemaVersion" : "0.1.0",
  "toolVersion" : "0.1.0"
}
