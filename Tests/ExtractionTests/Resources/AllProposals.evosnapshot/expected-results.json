[
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0001",
    "link" : "0001-keywords-as-argument-labels.md",
    "reviewManager" : {
      "link" : "",
      "name" : ""
    },
    "sha" : "cd0c7279af644b38860afaa6e0dba74a1d82107a",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "Argument labels are an important part of the interface of a Swift function,\ndescribing what particular arguments to the function do and improving\nreadability. Sometimes, the most natural label for an argument coincides with a\nlanguage keyword, such as `in`, `repeat`, or `defer`. Such keywords should be\nallowed as argument labels, allowing better expression of these interfaces.\n",
    "title" : " Allow (most) keywords as argument labels\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-344",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-344",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ],
    "warnings" : [
      {
        "kind" : "warning",
        "message" : "Missing review manager.",
        "stage" : "parse"
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0002",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "983a674e0ca35a85532d70a3eb61e71a6d024108",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0002-remove-currying.md",
    "reviewManager" : {
      "link" : "",
      "name" : ""
    },
    "sha" : "490a90e235ac20a2fa0defabac89c6d1b2ff6986",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Curried function declaration syntax `func foo(x: Int)(y: Int)` is of limited\nusefulness and creates a lot of language and implementation complexity. We\nshould remove it.\n",
    "title" : " Removing currying func declaration syntax\n",
    "warnings" : [
      {
        "kind" : "warning",
        "message" : "Missing review manager.",
        "stage" : "parse"
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/bitjammer",
        "name" : "Ashley Garland"
      }
    ],
    "id" : "SE-0003",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "8a5ed405bf1f92ec3fc97fa46e52528d2e8d67d9",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0003-remove-var-parameters.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jopamer",
      "name" : "Joe Pamer"
    },
    "sha" : "839f40c251b884f427bba3081826e2ef6a37df96",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "There has been some confusion of semantics when a function parameter is marked\nas `inout` compared to `var`. Both give a mutable local copy of a value but\nparameters marked `inout` are automatically written back.\n",
    "title" : " Removing var from Function Parameters\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0004",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "8e12008d2b34a605f8766310f53d5668f3d50955",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0004-remove-pre-post-inc-decrement.md",
    "reviewManager" : {
      "link" : "",
      "name" : ""
    },
    "sha" : "56386e0d1045e0a439da33c052b196e4657116ba",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The increment\/decrement operators in Swift were added very early in the\ndevelopment of Swift, as a carry-over from C. These were added without much\nconsideration, and haven't been thought about much since then. This document\nprovides a fresh look at them, and ultimately recommends we just remove them\nentirely, since they are confusing and not carrying their weight.\n",
    "title" : " Remove the ++ and -- operators\n",
    "warnings" : [
      {
        "kind" : "warning",
        "message" : "Missing review manager.",
        "stage" : "parse"
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0005",
    "link" : "0005-objective-c-name-translation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "0ca0809d7adc1a88550872e4893d827919abc711",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal describes how we can improve Swift's \"Clang Importer\", which is\nresponsible for mapping C and Objective-C APIs into Swift, to translate the\nnames of Objective-C functions, types, methods, properties, etc. into names that\nmore closely align with the [Swift API Design\nGuidelines](https:\/\/swift.org\/documentation\/api-design-guidelines \"API Design Guidelines\")\nbeing developed as part of Swift 3. Our approach focuses on the differences\nbetween the Objective-C [Coding Guidelines for\nCocoa](https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Conceptual\/CodingGuidelines\/CodingGuidelines.html \"Coding Guidelines for Cocoa\")\nand the Swift API Design Guidelines, using some simple linguistic analysis to\naid the automatic translation from Objective-C names to more \"Swifty\" names.\n",
    "title" : " Better Translation of Objective-C APIs Into Swift\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/gribozavr",
        "name" : "Dmitri Gribenko"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Maxim Moiseev"
      }
    ],
    "id" : "SE-0006",
    "link" : "0006-apply-api-guidelines-to-the-standard-library.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "86ef04eb883764e089c80f7a503039d5f2e178cd",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "[Swift API Design\nGuidelines](https:\/\/swift.org\/documentation\/api-design-guidelines \"API Design Guidelines\")\nbeing developed as part of Swift 3. It is important that the Standard Library is\nan exemplar of Swift API Design Guidelines: the APIs from the Standard Library\nare, probably, the most frequently used Swift APIs in any application domain;\nthe Standard Library also sets precedent for other libraries.\n",
    "title" : " Apply API Guidelines to the Standard Library\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0007",
    "link" : "0007-remove-c-style-for-loops.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "77149118b914dd0a75ab4698af5886591527fb58",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The C-style `for-loop` appears to be a mechanical carry-over from C rather than\na genuinely Swift-specific construct. It is rarely used and not very Swift-like.\n",
    "title" : " Remove C-style for-loops with conditions and incrementers\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-226",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-226",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-227",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-227",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/oisdk",
        "name" : "Oisin Kidney"
      }
    ],
    "id" : "SE-0008",
    "link" : "0008-lazy-flatmap-for-optionals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "90e7e9e3bc5e42a240ed753382d822f9c570386f",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Currently, the Swift standard library has two versions of `flatMap`. One which\nflattens a sequence of sequences after a transformation:\n",
    "title" : " Add a Lazy flatMap for Sequences of Optionals\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-361",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-361",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0009",
    "link" : "0009-require-self-for-accessing-instance-members.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "626f78665eb3c01fdae0ad243f585cab5f6a801b",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "The current version of Swift (2.1) requires using `self` when accessing instance\nmembers in closures. The proposal suggests extending this to all member accesses\n(as is intrinsically the case in Objective-C). It has the benefit of documenting\ninstance properties vs local variables and instance functions vs local functions\nor closures.\n",
    "title" : " Require self for accessing instance members\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lilyball",
        "name" : "Lily Ballard"
      }
    ],
    "id" : "SE-0010",
    "link" : "0010-add-staticstring-unicodescalarview.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "ac3a7924449d81f0c5a1635500f0d477cd3e85ec",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "There is no way to create a substring of a `StaticString` that is still typed as\n`StaticString`. There should be.\n",
    "title" : " Add StaticString.UnicodeScalarView\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/loiclec",
        "name" : "Loïc Lecrenier"
      }
    ],
    "id" : "SE-0011",
    "link" : "0011-replace-typealias-associated.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "89d7a3d25e5fcae120a78995e2e09b0cb65d9e38",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "The `typealias` keyword is currently used to declare two kinds of types:\n",
    "title" : " Replace typealias keyword with associatedtype for associated type declarations\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-511",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-511",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      }
    ],
    "id" : "SE-0012",
    "link" : "0012-add-noescape-to-public-library-api.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/phausler",
      "name" : "Philippe Hausler"
    },
    "sha" : "9e9c0d95e6389478183b3863caef1581817d4ff3",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "",
    "title" : " Add @noescape to public library API\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/bitjammer",
        "name" : "Ashley Garland"
      }
    ],
    "id" : "SE-0013",
    "link" : "0013-remove-partial-application-super.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "40cfaa459cab35007939643048585a53fed53baf",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Prior to Swift 2.2, calls to superclass methods like `super.foo()` in Native\nSwift classes were dispatched statically by recording a reference to the\nfunction and calling it directly by its mangled name. In Swift 2.2, class\nmethods invoked via `super` will use dynamic dispatch. That is, the method will\nbe looked up in the superclass's vtable at runtime. However, if the method is\nmarked with `final`, it will use the old static dispatch, since no class will be\nable to override it.\n",
    "title" : " Remove Partial Application of Non-Final Super Methods (Swift 2.2)\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Max Moiseev"
      }
    ],
    "id" : "SE-0014",
    "link" : "0014-constrained-AnySequence.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "48ddfbc8ed55e15a7e6f783ef2b7a2c43e3c8ac0",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "In order to allow `AnySequence` delegate calls to the underlying sequence, its\ninitializer should have extra constraints.\n",
    "title" : " Constraining AnySequence.init\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-474",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-474",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lilyball",
        "name" : "Lily Ballard"
      }
    ],
    "id" : "SE-0015",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "408",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0015-tuple-comparison-operators.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/dabrahams",
      "name" : "Dave Abrahams"
    },
    "sha" : "9722ed2b76f1d9a16fee757a79bd29b9de84de6c",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "Implement comparison operators on tuples up to some arity.\n",
    "title" : " Tuple comparison operators\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/MichaelBuckley",
        "name" : "Michael Buckley"
      }
    ],
    "id" : "SE-0016",
    "link" : "0016-initializers-for-converting-unsafe-pointers-to-ints.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "22518458dc27b9f8f4383500cc0a8aea88752d2e",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Just as users can create `Unsafe[Mutable]Pointer`s from `Int`s and `UInt`s, they\nshould be able to create Ints and UInts from `Unsafe[Mutable]Pointer`s. This\nwill allow users to call C functions with `intptr_t` and `uintptr_t` parameters,\nand will allow users to perform more advanced pointer arithmetic than is allowed\nby `UnsafePointer`s.\n",
    "title" : " Add initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1115",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1115",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      }
    ],
    "id" : "SE-0017",
    "link" : "0017-convert-unmanaged-to-use-unsafepointer.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "7799dec5b807d0366e26458329ce6375c89cd938",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The standard library [`Unmanaged<Instance>`\nstruct](https:\/\/github.com\/apple\/swift\/blob\/master\/stdlib\/public\/core\/Unmanaged.swift)\nprovides a type-safe object wrapper that does not participate in ARC; it allows\nthe user to make manual retain\/release calls.\n",
    "title" : " Change Unmanaged to use UnsafePointer\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1485",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1485",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/anandabits",
        "name" : "Matthew Johnson"
      }
    ],
    "id" : "SE-0018",
    "link" : "0018-flexible-memberwise-initialization.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "9b1646ff2f633aafe582bc25df27b5dfd2dbc95a",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "The Swift compiler is currently able to generate a memberwise initializer for\nuse in some circumstances, however there are currently many limitations to this.\nThis proposal builds on the idea of a compiler generated memberwise initializer,\nmaking the capability available to any initializer that opts in.\n",
    "title" : " Flexible Memberwise Initialization\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/mxcl",
        "name" : "Max Howell"
      },
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      {
        "link" : "https:\/\/github.com\/mattt",
        "name" : "Mattt Thompson"
      }
    ],
    "id" : "SE-0019",
    "link" : "0019-package-manager-testing.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rballard",
      "name" : "Rick Ballard"
    },
    "sha" : "6502f760e47dc361ffca79c233a1c9c36f0621c4",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Testing is an essential part of modern software development. Tight integration\nof testing into the Swift Package Manager will help ensure a stable and reliable\npackaging ecosystem.\n",
    "title" : " Swift Testing\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-592",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-592",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/bitjammer",
        "name" : "Ashley Garland"
      }
    ],
    "id" : "SE-0020",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "c32fb8e7b9a67907e8b6580a46717c6a345ec7c6",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0020-if-swift-version.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "a59e6ad4dcd24b9cfec286161e61daa3d3fd6116",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "This proposal aims to add a new build configuration option to Swift 2.2: `#if\nswift`.\n",
    "title" : " Swift Language Version Build Configuration\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0021",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "ecfde0e71c61184989fde0f93f8d6b7f5375b99a",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0021-generalized-naming.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "20256b9ba5c0fac9c2f77c98043328ed7b996c9a",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "Swift includes support for first-class functions, such that any function (or\nmethod) can be placed into a value of function type. However, when specifying\nthe name of a function, one can only provide the base name, (e.g.,\n`insertSubview`) without the argument labels. For overloaded functions, this\nmeans that one must disambiguate based on type information, which is awkward and\nverbose. This proposal allows one to provide argument labels when referencing a\nfunction, eliminating the need to provide type context in most cases.\n",
    "title" : " Naming Functions with Argument Labels\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0022",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1170",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0022-objc-selectors.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "05f5d73410112b690524e190a23cd17fa42c061f",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "In Swift 2, Objective-C selectors are written as string literals (e.g.,\n`\"insertSubview:aboveSubview:\"`) in the type context of a `Selector`. This\nproposal seeks to replace this error-prone approach with `Selector`\ninitialization syntax that refers to a specific method via its Swift name.\n",
    "title" : " Referencing the Objective-C selector of a method\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/gribozavr",
        "name" : "Dmitri Gribenko"
      },
      {
        "link" : "https:\/\/github.com\/tkremenek",
        "name" : "Ted Kremenek"
      },
      {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Max Moiseev"
      },
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      },
      {
        "link" : "",
        "name" : "Alex Migicovsky"
      },
      {
        "link" : "",
        "name" : "Ali Ozer"
      }
    ],
    "id" : "SE-0023",
    "link" : "0023-api-guidelines.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "e131d88831f0c49aa54dec6cec334a5701b8226d",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The design of commonly-used libraries has a large impact on the overall feel of\na programming language. Great libraries feel like an extension of the language\nitself, and consistency across libraries elevates the overall development\nexperience. To aid in the construction of great Swift libraries, one of the\nmajor goals for Swift 3 is to define a set of API design guidelines and to apply\nthose design guidelines consistently.\n",
    "title" : " API Design Guidelines\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jcampbell05",
        "name" : "James Campbell"
      }
    ],
    "id" : "SE-0024",
    "link" : "0024-optional-value-setter.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "98f45801cc782d83cf2aea0a91f70cf893aaa96f",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Introduce a new operator an \"Optional Value Setter\". If the optional is set via\nthis operator then the new value is only set if there isn't an already existing\nvalue.\n",
    "title" : " Optional Value Setter ??=\n"
  },
  {
    "authors" : [
      {
        "link" : "",
        "name" : "Ilya Belenkiy"
      }
    ],
    "id" : "SE-0025",
    "link" : "0025-scoped-access-level.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "310956cd1107c39231149b42d70d0cf4aab5bd62",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Scoped access level allows hiding implementation details of a class or a class\nextension at the class\/extension level, instead of a file. It is a concise\nexpression of the intent that a particular part of a class or extension\ndefinition is there only to implement a public API for other classes or\nextensions and must not be used directly anywhere outside of the scope of the\nclass or the extension.\n",
    "title" : " Scoped Access Level\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1275",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1275",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "",
        "name" : "David Scrève"
      }
    ],
    "id" : "SE-0026",
    "link" : "0026-abstract-classes-and-methods.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter\/",
      "name" : "Joe Groff"
    },
    "sha" : "c86badb14a7357474c78b8df1f4339db4fa038ea",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "When developing framework and reusable code, we need to develop classes that are\npartially abstract with partial implementation. Protocol and protocol extensions\nprovide this, but they cannot have attributes as classes have. A partial class\ncombines the behavior of a class with the requirement of implementing methods in\ninherited class like protocols.\n",
    "title" : " Abstract classes and methods\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/zwaldowski",
        "name" : "Zachary Waldowski"
      }
    ],
    "id" : "SE-0027",
    "link" : "0027-string-from-code-units.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "ddae996dba321ec860939f710e7b5e468e5950db",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Going back and forth from Strings to their byte representations is an important\npart of solving many problems, including object serialization, binary and text\nfile formats, wire\/network interfaces, and cryptography. Swift has such\nutilities, but currently only exposed through `String.Type.fromCString(_:)` and\n`String.Type.fromCStringRepairingIllFormedUTF8(_:)`.\n",
    "title" : " Expose code unit initializers on String\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0028",
    "link" : "0028-modernizing-debug-identifiers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "6787f7208fdf36c1fc1468c53e6908ae08f27085",
    "status" : {
      "state" : ".implemented",
      "version" : "2.2"
    },
    "summary" : "This proposal aims to eliminate Swift's use of \"[screaming snake\ncase](https:\/\/en.wikipedia.org\/wiki\/Snake_case)\" like `__FILE__` and\n`__FUNCTION__` and replacing identifier instances with common\n[octothorpe-prefixed](https:\/\/en.wiktionary.org\/wiki\/octothorpe) lowercase\n`#identifier` representations.\n",
    "title" : " Modernizing Swift's Debugging Identifiers\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-669",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-669",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0029",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "8e12008d2b34a605f8766310f53d5668f3d50955",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0029-remove-implicit-tuple-splat.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "9b4c779be68362d56799fdc1fd5ae94032c69583",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Function call expressions (which include several syntactic forms that apply an\nargument list to something of function type) currently have a dual nature in\nSwift. Given something like:\n",
    "title" : " Remove implicit tuple splat behavior from function applications\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0030",
    "link" : "0030-property-behavior-decls.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "2a48404d780e92d2b52708fca6a1f4a846fd984b",
    "status" : {
      "state" : ".withdrawn"
    },
    "summary" : "There are property implementation patterns that come up repeatedly. Rather than\nhardcode a fixed set of patterns into the compiler, we should provide a general\n\"property behavior\" mechanism to allow these patterns to be defined as\nlibraries.\n",
    "title" : " Property Behaviors\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0031",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1333",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0031-adjusting-inout-declarations.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "c4acd2d5933998d96eb784ddacaaa2f7c2758a1e",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The `inout` keyword indicates copy-in\/copy-out argument behavior. In its current\nimplementation the keyword prepends argument names. We propose to move the\n`inout` keyword to the right side of the colon to decorate the type instead of\nthe parameter label.\n",
    "title" : " Adjusting inout Declarations for Type Decoration\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lilyball",
        "name" : "Lily Ballard"
      }
    ],
    "id" : "SE-0032",
    "link" : "0032-sequencetype-find.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "9dbd6358a364b9dada044ae3b9026b29ee21a256",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Add a new extension method to `Sequence` called `first(where:)` that returns the\nfound element.\n",
    "title" : " Add first(where:) method to Sequence\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1519",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1519",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/SlaunchaMan",
        "name" : "Jeff Kelley"
      }
    ],
    "id" : "SE-0033",
    "link" : "0033-import-objc-constants.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "744974b40ebceeff4ede8689376894e77503295a",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Given a list of constants in an Objective-C file, add an attribute that will\nenable Swift to import them as either an Enum or a Struct, using\n`RawRepresentable` to convert to their original type. This way, instead of\npassing strings around for APIs, we can use more type-safe objects and take\nadvantage of Swift’s code completion, as well as making our Swift (and\nObjective-C\\!) code more readable and more approachable to beginners.\n",
    "title" : " Import Objective-C Constants as Swift Types\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0034",
    "link" : "0034-disambiguating-line.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "97b2164fe226a415f2248bacd7f9ec9d6297fcaf",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In being accepted, Swift Evolution SE-0028\n(0028-modernizing-debug-identifiers.md) overloads the use of `#line` to mean\nboth an identifier that maps to a calling site's line number within a file and\nacts as part of a line control statement. This proposal nominates `#setline` to\nreplace `#line` for file and line syntactic source control.\n",
    "title" : " Disambiguating Line Control Statements from Debugging Identifiers\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-840",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-840",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0035",
    "link" : "0035-limit-inout-capture.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "466df501821c59e28af902fe7c098bda664da04c",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift's behavior when closures capture `inout` parameters and escape their\nenclosing context is a common source of confusion. We should disallow implicit\ncapture of `inout` parameters except in `@noescape` closures.\n",
    "title" : " Limiting inout capture to @noescape contexts\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-807",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-807",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0036",
    "link" : "0036-enum-dot.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "8e7f6cfaa07220e48eb6722585d2da45e80db4d0",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Enumeration cases are essentially static not instance type members. Unlike\nstatic members in structures and classes, enumeration cases can be mentioned in\ninitializers and instance methods without referencing a fully qualified type.\nThis makes little sense. In no other case can an instance implementation\ndirectly access a static member. This proposal introduces a rule that requires\nleading dots or fully qualified references (EnumType.caseMember) to provide a\nmore consistent developer experience to clearly disambiguate static cases from\ninstance members.\n",
    "title" : " Requiring Leading Dot Prefixes for Enum Instance Member Implementations\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1236",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1236",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jder",
        "name" : "Jesse Rusak"
      }
    ],
    "id" : "SE-0037",
    "link" : "0037-clarify-comments-and-operators.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "293fd83dc6ea9ac76177fe34b0fb8521c3830b60",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "There are several inconsistencies in how comments are treated when determining\nwhether an operator is prefix, postfix, or infix. They are sometimes treated as\nwhitespace, sometimes as non-whitespace, and this differs depending on whether\nthey are to the left or right of an operator, and the contents of the comment\nitself. This proposal suggests a uniform set of rules for how these cases should\nbe parsed.\n",
    "title" : " Clarify interaction between comments & operators\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-960",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-960",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      }
    ],
    "id" : "SE-0038",
    "link" : "0038-swiftpm-c-language-targets.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rballard",
      "name" : "Rick Ballard"
    },
    "sha" : "9ef4f207156110c6d4508acec471d89c919cd0c6",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This is a proposal for adding initial package manager support for the C, C++,\nObjective-C, and Objective-C++ languages (henceforth, simply referred to as \"C\"\nlanguages). This proposal is limited in scope to only supporting targets\nconsisting entirely of C languages; there is no provision for supporting targets\nwhich include both C and Swift sources.\n",
    "title" : " Package Manager C Language Target Support\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-821",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-821",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0039",
    "link" : "0039-playgroundliterals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "42ccdab79d591268ece0aedccd175c65bb0e0df5",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Playground literals tokenize colors, files, and images. They provide\ndrag-and-drop convenience and in-context visualizations that offer easy\nreference and manipulation when designing playground content. These literals are\nbuilt using a simple square bracket syntax that, in the current form, conflicts\nwith collection literals. This proposal redesigns playground literals to follow\nthe precedent of \\#available and \\#selector.\n",
    "title" : " Modernizing Playground Literals\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-917",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-917",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0040",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1537",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0040-attributecolons.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "18f4ced423c98fe6898f41c098b954cd12d99b5f",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Attribute arguments are unlike other Swift language arguments. At the call site,\nthey use `=` instead of colons to distinguish argument names from passed values.\nThis proposal brings attributes into compliance with Swift standard practices by\nreplacing the use of \"=\" with \":\" in this one-off case.\n",
    "title" : " Replacing Equal Signs with Colons For Attribute Arguments\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/anandabits",
        "name" : "Matthew Johnson"
      },
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0041",
    "link" : "0041-conversion-protocol-conventions.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "e3af4e753fee71466b36e749d2ef77511857994c",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "We propose to expand and improve the naming conventions established by the API\nGuidelines and the standard library with regard to conversion related protocols.\nWe believe common protocol naming patterns should be clear, consistent, and\nmeaningful. The Swift standard library includes slightly north of eighty\nprotocols. Of these, about 15% concern themselves with type initialization and\nconversion. This proposal assigns specific conventional suffixes to these tasks.\nWe present this proposal to improve overall language coherence.\n",
    "title" : " Updating Protocol Naming Conventions for Conversions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0042",
    "link" : "0042-flatten-method-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "3cd641166434b77711ff8279216c3b76168d6aba",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "An **unapplied method reference**, such as `Type.instanceMethod` in the\nfollowing example, currently produces a curried function value of type `(Self)\n-> (Args...) -> Ret`:\n",
    "title" : " Flattening the function type of unapplied method references\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1051",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1051",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/therealbnut",
        "name" : "Andrew Bennett"
      }
    ],
    "id" : "SE-0043",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1383",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0043-declare-variables-in-case-labels-with-multiple-patterns.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "048a2c520aa98f7579f83aa83e93b3e27544afc7",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In Swift 2, it is possible to match multiple patterns in cases. However cases\ncannot contain multiple patterns if the case declares variables.\n",
    "title" : " Declare variables in 'case' labels with multiple patterns\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0044",
    "link" : "0044-import-as-member.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "8ea02ed09e3b982b63466d112e3302819c70b9bb",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift imports C declarations, allowing Swift code to natively interact with C\nlibraries and frameworks. But, such imported APIs do not feel natural to\ninteract with in Swift. This proposal seeks to provide a mechanism for C API\nauthors to specify the capability of importing functions and variables as\nmembers on imported Swift types. It also seeks to provide an automatic inference\noption for APIs that follow a consistent, disciplined naming convention.\n",
    "title" : " Import as member\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1053",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1053",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lilyball",
        "name" : "Lily Ballard"
      }
    ],
    "id" : "SE-0045",
    "link" : "0045-scan-takewhile-dropwhile.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "143395fbdf7ba0b7f619c572ca41ad9f30369c6e",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "Add 2 new `Sequence` functions `prefix(while:)` and `drop(while:)`, with\noverrides as appropriate on `Collection`, `LazySequenceProtocol`, and\n`LazyCollectionProtocol`.\n",
    "title" : " Add prefix(while:) and drop(while:) to the stdlib\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1516",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1516",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/JakeCarter",
        "name" : "Jake Carter"
      },
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0046",
    "link" : "0046-first-label.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "30b54b17051bc267417a0afed13e6fde8ae607e9",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "We propose to normalize the first parameter declaration in methods and\nfunctions. In this proposal, first parameter declarations will match the\nexisting behavior of the second and later parameters. All parameters, regardless\nof position, will behave uniformly. This will create a simple, consistent\napproach to parameter declaration throughout the Swift programming language and\nbring method and function declarations in-sync with initializers, which already\nuse this standard.\n",
    "title" : " Establish consistent label behavior across all parameters including first labels\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-961",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-961",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/akashivskyy",
        "name" : "Adrian Kashivskyy"
      }
    ],
    "id" : "SE-0047",
    "link" : "0047-nonvoid-warn.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "8026a5e3ee18d8a1b5f90277bb58b91fc0e70d90",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In Swift's current incarnation, annotating methods and functions with\n`@warn_unused_result` informs the compiler that a non-void return type *should\nbe consumed*. It is an affirmative declaration. In its absence, ignored results\ndo not raise warnings or errors.\n",
    "title" : " Defaulting non-Void functions so they warn on unused results\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1052",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1052",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0048",
    "link" : "0048-generic-typealias.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "214861b5ec4064fdba7c6f3301c85ecdf2a3bcd8",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal aims to add generic typealiases to Swift.\n",
    "title" : " Generic Type Aliases\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0049",
    "link" : "0049-noescape-autoclosure-type-attrs.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "6b6e5eb406607fa27c36e3f593351f08ce43e2bd",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal suggests moving the existing `@noescape` and `@autoclosure`\nattributes from being declaration attributes on a parameter to being type\nattributes. This improves consistency and reduces redundancy within the\nlanguage, e.g. aligning with [SE-0031](0031-adjusting-inout-declarations.md),\nwhich moved `inout`, making declaration and type syntax more consistent.\n",
    "title" : " Move @noescape and @autoclosure to be type attributes\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1235",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1235",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "http:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      }
    ],
    "id" : "SE-0050",
    "link" : "0050-floating-point-stride.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "d808a9163475086e1919253981d5ef98f2c3c85f",
    "status" : {
      "state" : ".withdrawn"
    },
    "summary" : "",
    "title" : " Decoupling Floating Point Strides from Generic Implementations\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0051",
    "link" : "0051-stride-semantics.md",
    "reviewManager" : {
      "link" : "",
      "name" : "N\/A"
    },
    "sha" : "bb96a091506155e160f1b317ec60f5400cbd58f7",
    "status" : {
      "state" : ".withdrawn"
    },
    "summary" : "",
    "title" : " Conventionalizing stride semantics\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/PatrickPijnappel",
        "name" : "Patrick Pijnappel"
      }
    ],
    "id" : "SE-0052",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1702",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0052-iterator-post-nil-guarantee.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "28d321902009440ac7b812cd8def3d4bec518c40",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Currently, the documentation for `IteratorType.next()` has the precondition that\nwhen calling `next()`, no preceding call to `next()` should have returned `nil`,\nand in fact encourages implementations to raise a `preconditionFailure()` for\nviolations of this requirement. However, all current 27 `IteratorType`\nimplementations in the standard library return `nil` indefinitely. Many users\nare likely unaware of the precondition, expecting all iterators to return `nil`\nindefinitely and writing code that might rely on this assumption. Such code will\nusually run fine, until someone does in fact pass in an iterator not repeating\n`nil` (it's a silent corner case).\n",
    "title" : " Change IteratorType post-nil guarantee\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/nirma",
        "name" : "Nicholas Maccharoli"
      }
    ],
    "id" : "SE-0053",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1812",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0053-remove-let-from-function-parameters.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "8d2fcd172754e52afa4ffe97ae5f17dfea57e52d",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Since function parameters are immutable by default, allowing function parameters\nto be explicitly labeled as `let` is a bit of a syntactic redundancy that would\nbest be removed. Not allowing function parameters to be explicitly declared as\n`let` would permit a more simple and uniform function declaration syntax for\nswift. Furthermore proposal [SE-0003​: \"Removing `var` from Function\nParameters\"](0003-remove-var-parameters.md) removes `var` from function\nparameters removing any possible ambiguity as to whether a function parameter is\nimmutable or not.\n",
    "title" : " Remove explicit use of let from Function Parameters\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/cwillmor",
        "name" : "Chris Willmore"
      }
    ],
    "id" : "SE-0054",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14299",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0054-abolish-iuo.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "60a562f10efe2d0d486feeee80c1d9e332e148f8",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal seeks to remove the `ImplicitlyUnwrappedOptional` type from the\nSwift type system and replace it with an IUO attribute on declarations.\nAppending `!` to the type of a Swift declaration will give it optional type and\nannotate the declaration with an attribute stating that it may be implicitly\nunwrapped when used.\n",
    "title" : " Abolish ImplicitlyUnwrappedOptional type\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jrose-apple",
        "name" : "Jordan Rose"
      }
    ],
    "id" : "SE-0055",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1878",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0055-optional-unsafe-pointers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "cc8e6453425095710aaa45cb77792d35e3313d34",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In Objective-C, pointers (whether to objects or to a non-object type) can be\nmarked as `nullable` or `nonnull`, depending on whether the pointer value can\never be null. In Swift, however, there is no such way to make this distinction\nfor pointers to non-object types: an `UnsafePointer<Int>` might be null, or it\nmight never be.\n",
    "title" : " Make unsafe pointer nullability explicit using Optional\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0056",
    "link" : "0056-trailing-closures-in-guard.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "ee77c952feab0ecfc70abcbc690f451e14182286",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Swift-evolution thread: [\"Allow trailing closures in 'guard'\nconditions\"](https:\/\/forums.swift.org\/t\/proposal-allow-trailing-closures-in-guard-conditions\/1909)\n",
    "title" : " Allow trailing closures in guard conditions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0057",
    "link" : "0057-importing-objc-generics.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "3a5edd1577e5c18168dcbbb5c95a97feff3a67cc",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Objective-C's *lightweight generics* feature allows Objective-C classes to be\nparameterized on the types they work with, similarly to Swift's generics syntax.\nTheir adoption in Foundation's collection classes allow Objective-C APIs to be\nbridged more effectively into Swift. For example, an `NSArray<NSString *> *`\nbridges to `[String]` rather than the far-weaker `[AnyObject]`. However,\nparameterized Objective-C classes lose their type parameters when they are\nimported into Swift, so uses of type parameters outside of bridged, typed\ncollections (`NSArray`, `NSDictionary`, `NSSet`) don't benefit in Swift. This\nproposal introduces a way to import the type parameters of Objective-C classes\ninto Swift.\n",
    "title" : " Importing Objective-C Lightweight Generics\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/russbishop",
        "name" : "Russ Bishop"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0058",
    "link" : "0058-objectivecbridgeable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "6461ecec58729405b0ca0f0519895b184e050afd",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Provide an `ObjectiveCBridgeable` protocol that allows a Swift type to control\nhow it is represented in Objective-C by converting into and back from an\nentirely separate `@objc` type. This frees library authors to create truly\nnative Swift APIs while still supporting Objective-C.\n",
    "title" : " Allow Swift types to provide custom Objective-C representations\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0059",
    "link" : "0059-updated-set-apis.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "e38ab57229e74e5e914e9386d62e8ac2058b9d38",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "When [SE-0006, *Apply API Guidelines to the Standard\nLibrary*](0006-apply-api-guidelines-to-the-standard-library.md) was proposed,\nthe lack of an acceptable naming convention for some mutating\/nonmutating method\npairs meant that the APIs of `SetAlgebra`, `Set<T>` and `OptionSet<T>` were not\nadjusted accordingly. This proposal remedies both problems by:\n",
    "title" : " Update API Naming Guidelines and Rewrite Set APIs Accordingly\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0060",
    "link" : "0060-defaulted-parameter-order.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "70e3fa69b607c5300556770f47d83e3dcb24bdbf",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift generally follows in the Smalltalk\/Objective-C tradition of compound\nmethod names with significant, order-sensitive argument labels, but an exception\nis made for parameters with default arguments. We should remove this exception.\n",
    "title" : " Enforcing order of defaulted parameters\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1489",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1489",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/tjw",
        "name" : "Timothy J. Wood"
      }
    ],
    "id" : "SE-0061",
    "link" : "0061-autoreleasepool-signature.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/dabrahams",
      "name" : "Dave Abrahams"
    },
    "sha" : "27c5d2346d761fd518a792d1177073a2891e0f09",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The `autoreleasepool` function in the standard library does not currently\nsupport a return value or error handling, making it difficult and error-prone to\npass results or errors from the body to the calling context.\n",
    "title" : " Add Generic Result and Error Handling to autoreleasepool()\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-842",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-842",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-1394",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1394",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0062",
    "link" : "0062-objc-keypaths.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "952c2c78a30132e2e08dbaad77e07972325f0be2",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In Objective-C and Swift, key-paths used by KVC and KVO are represented as\nstring literals (e.g., `\"friend.address.streetName\"`). This proposal seeks to\nimprove the safety and resilience to modification of code using key-paths by\nintroducing a compiler-checked expression.\n",
    "title" : " Referencing Objective-C key-paths\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1237",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1237",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/mxcl",
        "name" : "Max Howell"
      }
    ],
    "id" : "SE-0063",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "257",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0063-swiftpm-system-module-search-paths.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/abertelrud",
      "name" : "Anders Bertelrud"
    },
    "sha" : "92aa798404b5e2811e8aa200311d760731498ae2",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift is able to `import` C libraries in the same manner as Swift libraries.\n",
    "title" : " SwiftPM System Module Search Paths\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0064",
    "link" : "0064-property-selectors.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "92d670a3c0e2e81b37ba5d087aee2c7eb97c8c1e",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Proposal [SE-0022](0022-objc-selectors.md) was accepted and implemented to\nprovide a `#selector` expression to reference Objective-C method selectors.\nUnfortunately, it does not allow referencing the getter and setter methods of\nproperties. This proposal seeks to provide a design to reference those methods\nfor the Swift 3.0 timeframe.\n",
    "title" : " Referencing the Objective-C selector of property getters and setters\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1239",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1239",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/gribozavr",
        "name" : "Dmitri Gribenko"
      },
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Maxim Moiseev"
      }
    ],
    "id" : "SE-0065",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2108",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0065-collections-move-indices.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "68e3c89589bf8edd42ce920b4352ca8480e53582",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "",
    "title" : " A New Model for Collections and Indices\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0066",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3d2b5bcc5350e1dea2ed8a0a95cd12ff5c760f24",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0066-standardize-function-type-syntax.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "0e65fa04ff573554d43171c4eeedc028aa702db8",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Function types in Swift use parentheses around their parameter list (aligning\nwith the function declaration syntax, as well as the syntax used to call a\nfunction). However, in the degenerate case of a single non-variadic, unlabeled\nargument with no attributes, Swift allows the parentheses to be omitted. For\nexample, these types:\n",
    "title" : " Standardize function type argument syntax to require parentheses\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      }
    ],
    "id" : "SE-0067",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2453",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0067-floating-point-protocols.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "ec72adab3413471c1f85d3d97f91511e6dcbb819",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The current FloatingPoint protocol is quite limited, and provides only a small\nsubset of the features expected of an IEEE 754 conforming type. This proposal\nexpands the protocol to cover most of the expected basic operations, and adds a\nsecond protocol, BinaryFloatingPoint, that provides a number of useful tools for\ngeneric programming with the most commonly used types.\n",
    "title" : " Enhanced Floating Point Protocols\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0068",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "22863",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0068-universal-self.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "e6dda07d6bd206f0705ba11a16d52efcb541809d",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "Within a class scope, `Self` means \"the dynamic class of `self`\". This proposal\nextends that courtesy to value types and to the bodies of class members by\nrenaming `dynamicType` to `Self`. This establishes a universal and consistent\nway to refer to the dynamic type of the current receiver.\n",
    "title" : " Expanding Swift Self to class members and value types\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1340",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1340",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      }
    ],
    "id" : "SE-0069",
    "link" : "0069-swift-mutability-for-foundation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "c7d67696032ba5ebd2aee8cc25f0206588f0b352",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "One of the core principles of Swift is \"mutability when you need it.\" This is\nespoused by Apple's official documentation about Swift:\n",
    "title" : " Mutability and Foundation Value Types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0070",
    "link" : "0070-optional-requirements.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "443e8258b934aae9b40c7a4a4fc8a0c4fc49c4e0",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift currently has support for \"optional\" requirements in Objective-C\nprotocols, to match with the corresponding feature of Objective-C. We don't want\nto make optional requirements a feature of Swift protocols (for reasons\ndescribed below), nor can we completely eliminate the notion of the language\n(for different reasons also described below). Therefore, to prevent confusion\nabout our direction, this proposal requires an explicit '@objc' attribute on\neach `optional` requirement to indicate that this is an Objective-C\ncompatibility feature.\n",
    "title" : " Make Optional Requirements Objective-C-only\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1395",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1395",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0071",
    "link" : "0071-member-keywords.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "8e10769fd572cdb0545f406659d012827e5d76f0",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The [Swift API Design\nGuidelines](https:\/\/swift.org\/documentation\/api-design-guidelines\/) consider\nenum cases as values that use the lowerCamelCase naming conventions. This means\nthat case names that previously did not conflict with keywords (such as\n`Default`, `Private`, `Repeat`) now cause conflicts, a problem that is\nparticularly acute when the naming conventions are applied by the Clang importer\n(per [SE-0005](0005-objective-c-name-translation.md)). To mitigate this issue,\nthis proposal allows the use of most keywords after a \".\", similarly to how\n[SE-0001](0001-keywords-as-argument-labels.md) allows keywords are argument\nlabels.\n",
    "title" : " Allow (most) keywords in member references\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jopamer",
        "name" : "Joe Pamer"
      }
    ],
    "id" : "SE-0072",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2419",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0072-eliminate-implicit-bridging-conversions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "76f2f2d26644bc81473be9235e8532b54fc667f9",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In Swift 1.2, we attempted to remove all implicit bridging conversions from the\nlanguage. Unfortunately, problems with how the v1.2 compiler imported various\nun-annotated Objective-C APIs caused us to scale back on our ambitions. In the\ninterest of further simplifying our type system and our user model, we would\nlike to complete this work and fully remove implicit bridging conversions from\nthe language in Swift 3.\n",
    "title" : " Fully eliminate implicit bridging conversions from Swift\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/zneak",
        "name" : "Félix Cloutier"
      },
      {
        "link" : "https:\/\/github.com\/groue",
        "name" : "Gwendal Roué"
      }
    ],
    "id" : "SE-0073",
    "link" : "0073-noescape-once.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "9d1e03ea69c225d8fb1289e2e7648e29f37d3c29",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal introduces an optional `once` argument to the `@noescape`\nattribute. The `@noescape(once)` attribute enforces that the closure does not\nescape, and that it is run exactly once on any code path returning from the\nfunction. For clients, it allows the compiler to relax initialization\nrequirements and close the gap between closure and \"inline code\" a little bit.\n",
    "title" : " Marking closures as executing exactly once\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lorenzoracca",
        "name" : "Lorenzo Racca"
      },
      {
        "link" : "https:\/\/github.com\/j-haj",
        "name" : "Jeff Hajewski"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0074",
    "link" : "0074-binary-search.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "e8d135e456d994624da51ca97a610488d0adf222",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Swift does not offer any way to efficiently search sorted collections. This\nproposal seeks to add a few different functions that implement the binary search\nalgorithm.\n",
    "title" : " Implementation of Binary Search functions\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0075",
    "link" : "0075-import-test.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "2ea41c3a8c4858c66162fb04cc0a827a5d3201d2",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "Expanding the build configuration suite to test for the ability to import\ncertain modules was [first\nintroduced](https:\/\/forums.swift.org\/t\/idea-support-if-os-darwin-as-shorthand-for-os-ios-os-osx-os-watchos-os-tvos\/1493)\non the Swift-Evolution list by Lily Ballard. Although her initial idea (checking\nfor Darwin to differentiate Apple targets from non-Apple targets) proved\nproblematic, developers warmly greeted the notion of an import-based\nconfiguration test. Dmitri Gribenko wrote, \"There's a direction that we want to\nmove to a unified name for the libc module for all platform, so 'can import\nDarwin' might not be a viable long-term strategy.\" Testing for imports offers\nadvantages that stand apart from this one use-case: to test for API availability\nbefore use.\n",
    "title" : " Adding a Build Configuration Import Test\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1560",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1560",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Jnosh",
        "name" : "Janosch Hildebrand"
      }
    ],
    "id" : "SE-0076",
    "link" : "0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "d46f18ddd6371c0ec1c4b1c9407b3b81797227ee",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "`UnsafeMutablePointer` includes several methods to non-destructively copy\nelements from memory pointed to by another `UnsafeMutablePointer` instance. I\npropose adding overloads of these methods to `UnsafeMutablePointer` that allow\nan `UnsafePointer` source.\n",
    "title" : " Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1490",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1490",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Anton3",
        "name" : "Anton Zhilin"
      }
    ],
    "id" : "SE-0077",
    "link" : "0077-operator-precedence.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "9274ca6a461c78b3b6d34c72dcae2348f3fa66e3",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Replace syntax of operator declaration, and replace numerical precedence with\npartial ordering of operators:\n",
    "title" : " Improved operator declarations\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      },
      {
        "link" : "https:\/\/github.com\/bolshedvorsky",
        "name" : "Sergey Bolshedvorsky"
      }
    ],
    "id" : "SE-0078",
    "link" : "0078-rotate-algorithm.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "233cab708f5f708a630ef6c36ff79d40b3bfb4d0",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This proposal is to add rotation and in-place reversing methods to Swift's\nstandard library collections.\n",
    "title" : " Implement a rotate algorithm, equivalent to std::rotate() in C++\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/emaloney",
        "name" : "Evan Maloney"
      }
    ],
    "id" : "SE-0079",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15306",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0079-upgrade-self-from-weak-to-strong.md",
    "reviewManager" : {
      "link" : "",
      "name" : "TBD"
    },
    "sha" : "f5fb30488ace556b25b5ee34dde9eb216181fcca",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "When working with escaping Swift closures, it is a common pattern to have the\nclosure capture `self` weakly to avoid creating an object reference cycle.\n",
    "title" : " Allow using optional binding to upgrade self from a weak to strong reference\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/anandabits",
        "name" : "Matthew Johnson"
      }
    ],
    "id" : "SE-0080",
    "link" : "0080-failable-numeric-initializers.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "fcc402eb2f215f1a21bd7a51350e3cfbdb58922b",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "Swift numeric types all currently have a family of conversion initializers. In\nmany use cases they leave a lot to be desired. Initializing an integer type with\na floating point value will truncate any fractional portion of the number.\nInitializing with an out-of-range value traps.\n",
    "title" : " Failable Numeric Conversion Initializers\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1491",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1491",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      },
      {
        "link" : "https:\/\/github.com\/CodaFi",
        "name" : "Robert Widmann"
      },
      {
        "link" : "https:\/\/github.com\/pyrtsa",
        "name" : "Pyry Jahkola"
      }
    ],
    "id" : "SE-0081",
    "link" : "0081-move-where-expression.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "e8ada129531c2be15906b695df85bce46e6d0b24",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal suggests moving the `where` clause to the end of the declaration\nsyntax, but before the body, for readability reasons. It has been discussed at\nlength on the following swift-evolution thread:\n",
    "title" : " Move where clause to end of declaration\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1561",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1561",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      }
    ],
    "id" : "SE-0082",
    "link" : "0082-swiftpm-package-edit.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/abertelrud",
      "name" : "Anders Bertelrud"
    },
    "sha" : "ff458171b2e2cca3dc85413885d94351e5791bf0",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "This is a proposal for changing the behavior for iterative development of a\ngroup of packages. In particular, we will change the default location to which\npackage dependency sources are cloned, the package managers behavior around\nthose sources, and add a new feature for allowing iterative development. These\nfeatures are tightly interrelated, which is why they are combined into one\nproposal.\n",
    "title" : " Package Manager Editable Packages\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0083",
    "link" : "0083-remove-bridging-from-dynamic-casts.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "4f224f911cda8d0a72db5b5b5e7c922d57159b54",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Dynamic casts using `as?`, `as!`, and `is` are currently able to dynamically\nperform Cocoa bridging conversions, such as from `String` to `NSString` or from\nan `ErrorProtocol`-conforming type to `NSError`. This functionality should be\nremoved to make dynamic cast behavior simpler, more efficient, and easier to\nunderstand. To replace this functionality, initializers should be added to\nbridged types, providing an interface for these conversions that's more\nconsistent with the conventions of the standard library.\n",
    "title" : " Remove bridging conversion behavior from dynamic casts\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/grp",
        "name" : "Grant Paul"
      },
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0084",
    "link" : "0084-trailing-commas.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "d930b4a84dbee4b4e0935c5268ae84916ea77531",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Swift permits trailing commas after the last element in array or dictionary\nliteral. This proposal extends that to parameters and tuples.\n",
    "title" : " Allow trailing commas in parameter lists and tuples\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      },
      {
        "link" : "http:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      }
    ],
    "id" : "SE-0085",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "364",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0085-package-manager-command-name.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "23bb18e9b6fec4057d9bb2555decfc4faac508c9",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This is a proposal for changing the command names used for invoking the Swift\npackage manager. Instead of hanging all functionality off of `swift build` and\n`swift test`, we will introduce a new `swift package` command with multiple\nsubcommands. `swift build` and `swift test` will remain as top-level commands\ndue to their frequency of use.\n",
    "title" : " Package Manager Command Names\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      },
      {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      }
    ],
    "id" : "SE-0086",
    "link" : "0086-drop-foundation-ns.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "b8f1da71860b969b8065360e8a8b3174562e8445",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "As part of *Swift 3 API Naming* and the introduction of *Swift Core Libraries*,\nwe are dropping the `NS` prefix from key Foundation types in Swift.\n",
    "title" : " Drop NS Prefix in Swift Foundation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Anton3",
        "name" : "Anton3"
      }
    ],
    "id" : "SE-0087",
    "link" : "0087-lazy-attribute.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "d6de4a104273c0657bf2e2c4a87655ac19283101",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Make `lazy` declaration modifier an attribute by renaming it to `@lazy`.\nExample:\n",
    "title" : " Rename lazy to @lazy\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/mwwa",
        "name" : "Matt Wright"
      }
    ],
    "id" : "SE-0088",
    "link" : "0088-libdispatch-for-swift3.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "0d1cd5c8e0e4d9422c9ec330c4aa3ffdc267fe32",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The existing libdispatch module imports the C API almost verbatim. To move\ntowards a more natural Swift interface and away from the C API, this proposal\noutlines changes to the libdispatch module and the motivation behind them.\n",
    "title" : " Modernize libdispatch for Swift 3 naming conventions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/austinzheng",
        "name" : "Austin Zheng"
      },
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      }
    ],
    "id" : "SE-0089",
    "link" : "0089-rename-string-reflection-init.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "5c627f9c20b3ca4d39f3123e542e8d43f976fcdb",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift's `String` type ships with a large number of initializers that take one\nunlabeled argument. One of these initializers, defined as `init<T>(_: T)`, is\nused to create a string containing the textual representation of an object. It\nis very easy to write code which accidentally invokes this initializer, when one\nof the other synonymous initializers was desired. Such code will compile without\nwarnings and can be very difficult to detect.\n",
    "title" : " Renaming String.init<T>(_: T)\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1881",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1881",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      {
        "link" : "https:\/\/github.com\/tannernelson",
        "name" : "Tanner Nelson"
      }
    ],
    "id" : "SE-0090",
    "link" : "0090-remove-dot-self.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "ccbcc17a46920a059da9642fde913a26b1de5f0e",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "Swift's grammar currently requires that type references only appear as part of a\nconstructor call `T(x)` or member access `T.x`. To get the metatype object for\n`T`, one must refer to the special member `T.self`. I propose allowing type\nreferences to appear freely in expressions and removing the `.self` member from\nthe language.\n",
    "title" : " Remove .self and freely allow type references in expressions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0091",
    "link" : "0091-improving-operators-in-protocols.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "563722a9f1764516b473b00400ef216b2afec649",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "When a type conforms to a protocol that declares an operator as a requirement,\nthat operator must be implemented as a global function defined outside of the\nconforming type. This can lead both to user confusion and to poor type checker\nperformance since the global namespace is overcrowded with a large number of\noperator overloads. This proposal mitigates both of those issues by proposing\nthat operators in protocols be declared statically (to change and clarify where\nthe conforming type implements it) and that Swift use universal lookup for\noperators that finds candidates both at the global scope and within types.\n",
    "title" : " Improving operator requirements in protocols\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2073",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2073",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0092",
    "link" : "0092-typealiases-in-protocols.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "016c03f3626859658cd70fd984affeb7173f08be",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal is from the [Generics\nManifesto](https:\/\/github.com\/apple\/swift\/blob\/master\/docs\/GenericsManifesto.md)\nand brings the `typealias` keyword back into protocols for type aliasing.\n",
    "title" : " Typealiases in protocols and protocol extensions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1539",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1539",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Max Moiseev"
      }
    ],
    "id" : "SE-0093",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2929",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0093-slice-base.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/dabrahams",
      "name" : "Dave Abrahams"
    },
    "sha" : "6d9035777cd841ea33fa8f0e526561191797bf03",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Slice types [provided by the standard\nlibrary](https:\/\/github.com\/apple\/swift\/blob\/master\/stdlib\/public\/core\/Slice.swift.gyb)\nshould allow public readonly access to their base collections to make efficient\nimplementations of protocol requirements possible in conforming types.\n",
    "title" : " Adding a public base property to slices\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lilyball",
        "name" : "Lily Ballard"
      },
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0094",
    "link" : "0094-sequence-function.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "5070e09c644effb846936a56a81e956b9c35c5c2",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal introduces `sequence(first:next:)` and `sequence(state:next:)`, a\npair of global functions that return (potentially-infinite) sequences of lazy\napplications of a closure to an initial value or a mutable state.\n",
    "title" : " Add sequence(first:next:) and sequence(state:next:) to the stdlib\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1622",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1622",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DevAndArtist",
        "name" : "Adrian Zubarev"
      },
      {
        "link" : "https:\/\/github.com\/austinzheng",
        "name" : "Austin Zheng"
      }
    ],
    "id" : "SE-0095",
    "link" : "0095-any-as-existential.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "1f74a7e05ff1c49abcf51d39bbecc494b036a517",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The current `protocol<>` construct, which defines an existential type consisting\nof zero or more protocols, should be replaced by an infix `&` type operator\njoining bare protocol type names.\n",
    "title" : " Replace protocol<P1,P2> syntax with P1 & P2 syntax\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1938",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1938",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0096",
    "link" : "0096-dynamictype.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "a2daa67db9ac0a68660d39c7e8108fdbbe288121",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal establishes `dynamicType` as a named operator rather than a\nproperty.\n",
    "title" : " Converting dynamicType from a property to an operator\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2218",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2218",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0097",
    "link" : "0097-negative-attributes.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "6a4d3c19cd973ff0622ac4fea2de64616949db84",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal normalizes naming for \"negative\" attributes by adopting a rule\nthat replaces property names starting with `no` with adjectives starting with\n`non`.\n",
    "title" : " Normalizing naming for \"negative\" attributes\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0098",
    "link" : "0098-didset-capitalization.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "d1a3cfff8e83b393e1d8be10b4fe441d26276201",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal adopts consistent conjoined keyword lowercasing.\n",
    "title" : " Lowercase didSet and willSet for more consistent keyword casing\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0099",
    "link" : "0099-conditionclauses.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "dd12a4e19e2c2746d639b0ef6594652b6a91fd17",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift condition clauses appear in `guard`, `if`, and `while` statements. This\nproposal re-architects the condition grammar to enable an arbitrary mix of\nBoolean expressions, `let` conditions (which test and unwrap optionals), general\n`case` clauses for arbitrary pattern matching, and availability tests. It\nremoves `where` clauses from optional binding conditions and case conditions,\nand eliminates gramatical ambiguity by using commas for separation between\nclauses instead of using them both to separate clauses and terms within each\nclause. These modifications streamline Swift's syntax and alleviate the\nsituation where many Swift developers don't know they can use arbitrary Boolean\nconditions after a value binding.\n",
    "title" : " Restructuring Condition Clauses\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0100",
    "link" : "0100-add-sequence-based-init-and-merge-to-dictionary.md",
    "reviewManager" : {
      "link" : "",
      "name" : "TBD"
    },
    "sha" : "441c7ca5330b679e719e4469a993b0a85f16b5e1",
    "status" : {
      "state" : ".withdrawn"
    },
    "summary" : "The `Dictionary` type should allow initialization from a sequence of `(Key,\nValue)` tuples and offer methods that merge a sequence of `(Key, Value)` tuples\ninto a new or existing dictionary, using a closure to combine values for\nduplicate keys.\n",
    "title" : " Add sequence-based initializers and merge methods to Dictionary\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0101",
    "link" : "0101-standardizing-sizeof-naming.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "280e7d45bdfb0cdf0d904744b018e88fa89291ba",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal addresses `sizeof`, `sizeofValue`, `strideof`, `strideofValue`,\n`align`, and `alignOf`. It discards the value-style standalone functions and\ncombines the remaining items into a unified structure.\n",
    "title" : " Reconfiguring sizeof and related functions into a unified MemoryLayout struct\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0102",
    "link" : "0102-noreturn-bottom-type.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "b73de7bfbbe8a383791b3566ccfdf75b9aa6c939",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "We should remove the rarely-used `@noreturn` function type attribute and instead\nexpress functions that don't return in terms of a standard uninhabited type.\n",
    "title" : " Remove @noreturn attribute and introduce an empty Never type\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1953",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1953",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/tanadeau",
        "name" : "Trent Nadeau"
      }
    ],
    "id" : "SE-0103",
    "link" : "0103-make-noescape-default.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "e6e9f634cf747c50839053e0109cfd4556ea7e7b",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The current default of closure arguments to functions (i.e., arguments to\nfunctions that themselves have function type such as `(T) -> U`) is to be\n\"escaping\", meaning they can escape the function body such as saving it to a\nfield in a struct or a global variable. In order to say that a closure argument\ncannot possibly escape the function body (\"non-escaping\"), the developer must\nexplicitly add an `@noescape` annotation to the argument type.\n",
    "title" : " Make non-escaping closures the default\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1952",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1952",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Maxim Moiseev"
      }
    ],
    "id" : "SE-0104",
    "link" : "0104-improved-integers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "c8253fee25f9fc35b4aaa0ccfd381bbefe80cad0",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal cleans up Swifts integer APIs and makes them more useful for\ngeneric programming.\n",
    "title" : " Protocol-oriented integers\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3196",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3196",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0105",
    "link" : "0105-remove-where-from-forin-loops.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "a3f29187a64c133dcb8337927a62564b1f333ea4",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal removes `where` clauses from `for-in` loops, where they are better\nexpressed (and read) as guard conditions.\n",
    "title" : " Removing Where Clauses from For-In Loops\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0106",
    "link" : "0106-rename-osx-to-macos.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "c04de3c4c13c2e5f69005e4480c36b72998649b3",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Starting in Sierra, Apple's Mac-based OS (OS X) will be renamed \"macOS\". All\nuser-facing Swift APIs must go through Swift Evolution. While this is a trivial\nAPI change, I have put together a formal proposal as is normal and usual for\nthis process.\n",
    "title" : " Add a macOS Alias for the OSX Platform Configuration Test\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1823",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1823",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-1887",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1887",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      }
    ],
    "id" : "SE-0107",
    "link" : "0107-unsaferawpointer.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "e70f518f5470e7f39847101e563bff5742c9063b",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift enforces type safe access to memory and follows strict aliasing rules.\nHowever, code that uses unsafe APIs or imported types can circumvent the\nlanguage's natural type safety. Consider the following example of *type punning*\nusing the `UnsafePointer` type:\n",
    "title" : " UnsafeRawPointer API\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Douglas Gregor"
      },
      {
        "link" : "",
        "name" : "Austin Zheng"
      }
    ],
    "id" : "SE-0108",
    "link" : "0108-remove-assoctype-inference.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "082ab850736b1a2f363ee192cb6dfaab2da86134",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "In Swift, a type `T` may choose to conform to a protocol `P`, where `P` has\n[associated\ntypes](https:\/\/developer.apple.com\/library\/ios\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/Generics.html#\/\/apple_ref\/doc\/uid\/TP40014097-CH26-ID189)\nthat may be used in the protocol requirements. If the associated types are used\nin the requirements, the types that `T` chooses to bind those associated types\nto can currently be inferred by the type checker by examining how `T` chooses to\nimplement `P`'s requirements:\n",
    "title" : " Remove associated type inference\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Anton3",
        "name" : "Anton Zhilin"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0109",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "76cf339694a41293dbbec9672b6df87a864087f2",
        "repository" : "swift",
        "type" : "commit"
      },
      {
        "account" : "apple",
        "id" : "af30ae32226813ec14c2bef80cb090d3e6c586fb",
        "repository" : "swift",
        "type" : "commit"
      }
    ],
    "link" : "0109-remove-boolean.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "8534b283540fbb16a6bdf3cf9972c190c4d5093e",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "For legacy and historical reasons Swift has supported a protocol named `Boolean`\nfor abstracting over different concrete Boolean types. This causes problems\nprimarily because it is pointless and very confusing to newcomers to Swift: is\nquite different than `Bool`, but shows up right next to it in documentation and\ncode completion. Once you know that it is something you don't want, you\nconstantly ignore it. Boolean values are simple enough that we don't need a\nprotocol to abstract over multiple concrete implementations.\n",
    "title" : " Remove the Boolean protocol\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/austinzheng",
        "name" : "Austin Zheng"
      },
      {
        "link" : "",
        "name" : "Vladimir S."
      }
    ],
    "id" : "SE-0110",
    "link" : "0110-distingish-single-tuple-arg.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "ed7c4b9bb272b60dbe53df4f036d9d0c290c45ed",
    "status" : {
      "state" : ".implemented",
      "version" : ""
    },
    "summary" : "Swift's type system should properly distinguish between functions that take one\ntuple argument, and functions that take multiple arguments.\n",
    "title" : " Distinguish between single-tuple and multiple-argument function types\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2008",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2008",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "",
        "name" : "Austin Zheng"
      }
    ],
    "id" : "SE-0111",
    "link" : "0111-remove-arg-label-type-significance.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "29ba3c20b69f84cc2e49f5b8bb0345c623197b10",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift's type system should not allow function argument labels to be expressed as\npart of a function type.\n",
    "title" : " Remove type system significance of function argument labels\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2009",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2009",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/CharlesJS",
        "name" : "Charles Srstka"
      }
    ],
    "id" : "SE-0112",
    "link" : "0112-nserror-bridging.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "ac806b8268b8a3dc66567f86eee529f9f0260b94",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift's error handling model interoperates directly with Cocoa's NSError\nconventions. For example, an Objective-C method with an `NSError**` parameter,\ne.g.,\n",
    "title" : " Improved NSError Bridging\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/karwa",
        "name" : "Karl Wagner"
      }
    ],
    "id" : "SE-0113",
    "link" : "0113-rounding-functions-on-floatingpoint.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "833eac6849c8d1004e6c896db69e8ce2962049ba",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The standard library lacks equivalents to the `floor()` and `ceil()` functions\nfound in the standard libraries of most other languages. Currently, we need to\nimport `Darwin` or `Glibc` in order to access the C standard library versions.\n",
    "title" : " Add integral rounding functions to FloatingPoint\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2010",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2010",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0114",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3374",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0114-buffer-naming.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "3997103db4df230a3bbf3850a0c0e34b8f4d6a01",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal updates parameters and generic type parameters from `value` names\nto `header` names for `ManagedBuffer`, `ManagedProtoBuffer`, and\n`ManagedBufferPointer`.\n",
    "title" : " Updating Buffer \"Value\" Names to \"Header\" Names\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/anandabits",
        "name" : "Matthew Johnson"
      }
    ],
    "id" : "SE-0115",
    "link" : "0115-literal-syntax-protocols.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "12e8c096b6a5f796c131a5a9ad358dafe1f3a549",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal renames the `*LiteralConvertible` protocols to\n`ExpressibleBy*Literal`.\n",
    "title" : " Rename Literal Syntax Protocols\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2054",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2054",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0116",
    "link" : "0116-id-as-any.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "6168ac6b3ca9d7920bef8423dcd1b91355cb199b",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Objective-C interfaces that use `id` and untyped collections should be imported\ninto Swift as taking the `Any` type instead of `AnyObject`.\n",
    "title" : " Import Objective-C id as Swift Any type\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/JaviSoto",
        "name" : "Javier Soto"
      },
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      }
    ],
    "id" : "SE-0117",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3882",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0117-non-public-subclassable-by-default.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "a47ba3df158f5b7383dad5ea0951b101d32e00d4",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Since the first release of Swift, marking a class `public` has provided two\ncapabilities: it allows other modules to instantiate and use the class, and it\nalso allows other modules to define subclasses of it. Similarly, marking a class\nmember (a method, property, or subscript) `public` has provided two\ncapabilities: it allows other modules to use the member, and it also allows\nthose modules to override it.\n",
    "title" : " Allow distinguishing between public access and public overridability\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/gribozavr",
        "name" : "Dmitri Gribenko"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Maxim Moiseev"
      }
    ],
    "id" : "SE-0118",
    "link" : "0118-closure-parameter-names-and-labels.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "66f8d57dbb1f51ca083cb459c21db7f906bfefbf",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "We propose a revision to the names and argument labels of closure parameters in\nstandard library APIs.\n",
    "title" : " Closure Parameter Names and Labels\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2072",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2072",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DevAndArtist",
        "name" : "Adrian Zubarev"
      }
    ],
    "id" : "SE-0119",
    "link" : "0119-extensions-access-modifiers.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "a5a63aa74fa586ff09b35b7d69a12ef05da15cbb",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "",
    "title" : " Remove access modifiers from extensions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lorenzoracca",
        "name" : "Lorenzo Racca"
      },
      {
        "link" : "https:\/\/github.com\/j-haj",
        "name" : "Jeff Hajewski"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0120",
    "link" : "0120-revise-partition-method.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "275f6a749700f3f7016bfcb6806c0f5380f5d520",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal revises the signature for the collection partition algorithm.\nPartitioning is a foundational API for sorting and for searching through sorted\ncollections.\n",
    "title" : " Revise partition Method Signature\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1965",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1965",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      }
    ],
    "id" : "SE-0121",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3637",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0121-remove-optional-comparison-operators.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "34ce81316506ec4297a5017ea72e188e71a02869",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift's [`Comparable`\nprotocol](https:\/\/developer.apple.com\/reference\/swift\/comparable) requires 4\noperators, [`<`, `<=`, `>`, and\n`>=`](https:\/\/github.com\/apple\/swift\/blob\/5868f9c597088793f7131d4655dd0f702a04dea3\/stdlib\/public\/core\/Policy.swift#L729-L763),\nbeyond the requirements of Equatable.\n",
    "title" : " Remove Optional Comparison Operators\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/MutatingFunk",
        "name" : "James Froggatt"
      }
    ],
    "id" : "SE-0122",
    "link" : "0122-use-colons-for-subscript-type-declarations.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "d21669c174626ce7d29f31622cf9da0ca6d4b501",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Currently, subscript declarations follow the following model:\n",
    "title" : " Use colons for subscript declarations\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rudkx",
        "name" : "Mark Lacey"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      }
    ],
    "id" : "SE-0123",
    "link" : "0123-disallow-value-to-optional-coercion-in-operator-arguments.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "39dcf33d7739678fc0e583752cdae0debb9e29c9",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Swift provides optional types as a means of achieving safety by making the\nnotion of \"having\" or \"not having\" a value explicit. This requires programmers\nto explicitly test whether a variable has a value or not prior to using that\nvalue, with the affordance that a user can explicitly *force-unwrap* the\noptional if desired (with the semantics that the process will trap if the\noptional does not have a value).\n",
    "title" : " Disallow coercion to optionals in operator arguments\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aschwaighofer",
        "name" : "Arnold Schwaighofer"
      }
    ],
    "id" : "SE-0124",
    "link" : "0124-bitpattern-label-for-int-initializer-objectidentfier.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "29ee149442febbbe71cbd5ff417c654537ee4341",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "`Int.init(ObjectIdentifier)` and `UInt.init(ObjectIdentifier)` should have a\n'bitPattern:’ label to make it clear at the use site that we interpret the value\nas a bit pattern.\n",
    "title" : " Int.init(ObjectIdentifier) and UInt.init(ObjectIdentifier) should have a bitPattern: label\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2064",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2064",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aschwaighofer",
        "name" : "Arnold Schwaighofer"
      }
    ],
    "id" : "SE-0125",
    "link" : "0125-remove-nonobjectivecbase.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "5e51de4b5f089262160a6120624fa468a3812df0",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Remove `NonObjectiveCBase` and `isUniquelyReferenced<T: NonObjectiveCBase>(_\nobject: T)`. `isUniquelyReferenced` can be replaced by\n`isUniquelyReferencedNonObjC<T: AnyObject>(_ object: T)`. This replacement is as\nperformant as the call to `isUniquelyReferenced` in cases where the compiler has\nstatic knowledge that the type of `object` is a native Swift class and\ndynamically has the same semantics for native swift classes. This change will\nremove surface API. Rename `isUniquelyReferencedNonObjC` to\n`isKnownUniquelyReferenced` and no longer promise to return false for `@objc`\nclass instances. Cleanup the `ManagedBufferPointer` API by renaming\n`holdsUniqueReference` to `isUniqueReference` and removing\n`holdsUniqueOrPinnedReference`.\n",
    "title" : " Remove NonObjectiveCBase and isUniquelyReferenced\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1962",
        "link" : "http:\/\/bugs.swift.org\/browse\/SR-1962",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DevAndArtist",
        "name" : "Adrian Zubarev"
      },
      {
        "link" : "https:\/\/github.com\/Anton3",
        "name" : "Anton Zhilin"
      }
    ],
    "id" : "SE-0126",
    "link" : "0126-refactor-metatypes-repurpose-t-dot-self-and-mirror.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "3fc1d08d208d2bfb52511ed8a476a6572a5fa2d9",
    "status" : {
      "state" : ".withdrawn"
    },
    "summary" : "This proposal wants to revise metatypes `T.Type`, repurpose *public* `T.self`\nnotation to return a new `Type<T>` type instance rather than a metatype, merge\n**SE-0101** into `Type<T>`, rename the global function from **SE-0096** to match\nthe changes of this proposal and finally rename current `Mirror` type to\nintroduce a new (lazy) `Mirror` type.\n",
    "title" : " Refactor Metatypes, repurpose T.self and Mirror\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/charlieMonroe",
        "name" : "Charlie Monroe"
      }
    ],
    "id" : "SE-0127",
    "link" : "0127-cleaning-up-stdlib-ptr-buffer.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "19656321869390f948b06dba924d299d33f4e280",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal deals with three routines and one class related to pointers and\nbuffers. The goal of this proposal is to update the API to match new API\nguidelines and remove redundant identifiers.\n",
    "title" : " Cleaning up stdlib Pointer and Buffer Routines\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1937",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1937",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-1955",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1955",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-1957",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1957",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/trentxintong",
        "name" : "Xin Tong"
      }
    ],
    "id" : "SE-0128",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3662",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0128-unicodescalar-failable-initializer.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "39472db3b5d6e6f680da635035d453df49cc4733",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal aims to change some `UnicodeScalar` initializers (ones that are\nnon-failable) from non-failable to failable. i.e., in case a `UnicodeScalar` can\nnot be constructed, nil is returned.\n",
    "title" : " Change failable UnicodeScalar initializers to failable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      }
    ],
    "id" : "SE-0129",
    "link" : "0129-package-manager-test-naming-conventions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "81c555605cfe06c63d7ab617cf5a1b1ba3d3b27a",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "The Swift Package Manager uses a convention-based rather than a declarative\napproach for various aspects of package configuration. This is as true of the\nnaming and structure of tests as of other kinds of targets.\n",
    "title" : " Package Manager Test Naming Conventions\n"
  },
  {
    "authors" : [
      {
        "link" : "",
        "name" : "Roman Levenstein"
      }
    ],
    "id" : "SE-0130",
    "link" : "0130-string-initializers-cleanup.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "7cbd97d8de7b36ec8421fce4de6cec12b14165e0",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal suggest replacing String initializers taking Character or\nUnicodeScalar as a repeating value by a more general initializer that takes a\nString as a repeating value. This is done to avoid the ambiguities in the\ncurrent String API, which can be only resolved by explicit casting. It is also\nproposed to remove one of the String.append APIs to match these changes.\n",
    "title" : " Replace repeating Character and UnicodeScalar forms of String.init\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/gribozavr",
        "name" : "Dmitri Gribenko"
      }
    ],
    "id" : "SE-0131",
    "link" : "0131-anyhashable.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "4a4621cfd6a2a7634be2cdfe85e54dcacb0fed6e",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "We propose to add a type-erased `AnyHashable` container to the standard library.\n",
    "title" : " Add AnyHashable to the standard library\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0132",
    "link" : "0132-sequence-end-ops.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "f61db449e4fd1ca15296dfe89edc430c185c3f25",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Sequence and Collection offer many special operations which access or manipulate\nits first or last elements, but they are plagued by inconsistent naming which\ncan make it difficult to find inverses or remember what the standard library\noffers. We propose that we standardize these names so they follow consistent,\npredictable patterns.\n",
    "title" : " Rationalizing Sequence end-operation names\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      }
    ],
    "id" : "SE-0133",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3809",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "3838",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "3839",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0133-rename-flatten-to-joined.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "600065785f55e104b209fec872c4c7eadf41ea08",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "Swift currently defines two similar functions, `joined(separator:)` and\n`flatten()`. `joined(separator:)` has a specialized implementation for Strings,\nand `flatten()` has implementations for various kinds of collections.\n",
    "title" : " Rename flatten() to joined()\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      },
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0134",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3816",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0134-rename-string-properties.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "a406bef70ce879bc388623912151df8b7e762d5f",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal removes `nulTerminatedUTF8` and renames `nulTerminatedUTF8CString`\nto enhance clarity and reduce mismatch between user expectations and the Swift\nprogramming language.\n",
    "title" : " Rename two UTF8-related properties on String\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      }
    ],
    "id" : "SE-0135",
    "link" : "0135-package-manager-support-for-differentiating-packages-by-swift-version.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "78b13b2d3b0194828e9038325d43ae10d84a9f15",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "As new, source-incompatible versions of Swift come into use, there is a growing\nneed for packages to be authored in a way that makes them usable from multiple\nversions of Swift. While package authors want to adopt new Swift versions as\nsoon as possible, they also need to support their existing clients.\n",
    "title" : " Package Manager Support for Differentiating Packages by Swift version\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      }
    ],
    "id" : "SE-0136",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "4041",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0136-memory-layout-of-values.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/dabrahams",
      "name" : "Dave Abrahams"
    },
    "sha" : "fa1d39cd2daec593935eededdb2f8ce52a1ee0da",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "This proposal is to introduce, as a bugfix, a replacement for `sizeofValue(_:)`\nand related functions.\n",
    "title" : " Memory layout of values\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/gribozavr",
        "name" : "Dmitri Gribenko"
      }
    ],
    "id" : "SE-0137",
    "link" : "0137-avoiding-lock-in.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "23b7fe33253b9e0dd63809d48e0b4acc08c6d758",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "We propose to deprecate or move protocols that shouldn't be a part of the\nstandard library's public API going forward.\n",
    "title" : " Avoiding Lock-In to Legacy Protocol Designs\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      }
    ],
    "id" : "SE-0138",
    "link" : "0138-unsaferawbufferpointer.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/dabrahams",
      "name" : "Dave Abrahams"
    },
    "sha" : "74f3c7b0a5ef4976c9d2a07050f6d93993cfd9cb",
    "status" : {
      "state" : ".implemented",
      "version" : "3.0.1"
    },
    "summary" : "This is a purely additive proposal to improve the Swift 3 migration experience.\n",
    "title" : " UnsafeRawBufferPointer\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0139",
    "link" : "0139-bridge-nsnumber-and-nsvalue.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "c6d3a65d1b0fa724c9574cb4d7b8c5ab73c85826",
    "status" : {
      "state" : ".implemented",
      "version" : "3.0.1"
    },
    "summary" : "A handful of Swift numeric types are bridged to `NSNumber` when passed into\nObjective-C object contexts. We should extend this bridging behavior to all\nSwift numeric types. We should also bridge common Cocoa structs such as\n`NSRange` by boxing them into `NSValue` objects.\n",
    "title" : " Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0140",
    "link" : "0140-bridge-optional-to-nsnull.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "e5eca4d8a57caac20f073e11548a49803a24cd3b",
    "status" : {
      "state" : ".implemented",
      "version" : "3.0.1"
    },
    "summary" : "`Optional`s can be used as values of `Any` type. After\n[SE-0116](0116-id-as-any.md), this means you can pass an `Optional` to an\nObjective-C method expecting nonnull `id`:\n",
    "title" : " Warn when Optional converts to Any, and bridge Optional As Its Payload Or NSNull\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/graydon",
        "name" : "Graydon Hoare"
      }
    ],
    "id" : "SE-0141",
    "link" : "0141-available-by-swift-version.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "b3bc4fda3e937aa46f37e0c435ea779627356e74",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "Swift's existing `@available(...)` attribute indicates the lifecycle of a given\ndeclaration, either unconditionally or relative to a particular platform or OS\nversion range.\n",
    "title" : " Availability by Swift version\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-2709",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-2709",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      },
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0142",
    "link" : "0142-associated-types-constraints.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "5a61e84ae27db663330b88c67dd8224efffe6f68",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal seeks to introduce a `where` clause to associated type\ndeclarations and improvements to protocol constraints to bring associated types\nthe same expressive power as generic type parameters.\n",
    "title" : " Permit where clauses to constrain associated types\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4506",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4506",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0143",
    "link" : "0143-conditional-conformances.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "732b27e72f5484718e97a314c6d0fe8757baca81",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "Conditional conformances express the notion that a generic type will conform to\na particular protocol only when its type arguments meet certain requirements.\nFor example, the `Array` collection can implement the `Equatable` protocol only\nwhen its elements are themselves `Equatable`, which can be expressed via the\nfollowing conditional conformance on `Equatable`:\n",
    "title" : " Conditional conformances\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ankurp",
        "name" : "Ankur Patel"
      }
    ],
    "id" : "SE-0144",
    "link" : "0144-allow-single-dollar-sign-as-valid-identifier.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "b12e2dc645ff469b8137d2c4255dd2a0b71afdad",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "The mainline Swift compiler emits an error message when the `$` character\n(U+0024) is used as an identifier by itself, which is a source breaking change\nfrom Swift 3.0. For example:\n",
    "title" : " Allow Single Dollar Sign as a Valid Identifier\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      },
      {
        "link" : "https:\/\/github.com\/graydon",
        "name" : "Graydon Hoare"
      }
    ],
    "id" : "SE-0145",
    "link" : "0145-package-manager-version-pinning.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/abertelrud",
      "name" : "Anders Bertelrud"
    },
    "sha" : "f29d0c195f0e316420210180d1158f36b1b28c18",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "This is a proposal for adding package manager features to \"pin\" or \"lock\"\npackage dependencies to particular versions.\n",
    "title" : " Package Manager Version Pinning\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      }
    ],
    "id" : "SE-0146",
    "link" : "0146-package-manager-product-definitions.md",
    "reviewManager" : {
      "link" : "",
      "name" : "Daniel Dunbar"
    },
    "sha" : "4755e6fb7fbdbee0c2ed08089f88acfc21cfdbcc",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal introduces the concept of *products* to the Swift Package Manager,\nand proposes enhancements to the `Package.swift` syntax to let packages define\nproducts that can be referenced by other packages.\n",
    "title" : " Package Manager Product Definitions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3606",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3606",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0147",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "6601",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0147-move-unsafe-initialize-from.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "b40479613ea922e8a3957d3ee92409a960b47a7e",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "The version of `UnsafeMutablePointer.initialize(from:)` that takes a\n`Collection` should be deprecated in favor of a new method on\n`UnsafeMutableBufferPointer` that takes a `Sequence`, with a goal of improving\nmemory safety and enabling faster initialization of memory from sequences.\nSimilarly, `UnsafeMutableRawPointer.initializeMemory(as:from:)` should be\ndeprecated in favor of a new\n`UnsafeMutableRawBufferPointer.initialize(as:from:)`.\n",
    "title" : " Move UnsafeMutablePointer.initialize(from:) to UnsafeMutableBufferPointer\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/chriseidhof",
        "name" : "Chris Eidhof"
      }
    ],
    "id" : "SE-0148",
    "link" : "0148-generic-subscripts.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "b692a50f8f6c797718273079a421538f75548b82",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "Make it possible to have generic subscripts. Example:\n",
    "title" : " Generic Subscripts\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-115",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-115",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      }
    ],
    "id" : "SE-0149",
    "link" : "0149-package-manager-top-of-tree.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "e224afea7b9927eaa054af41fb91b555bf6638b4",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal adds enhancements to `swift package edit` to support development\nof packages without strict versioning (\"top of tree\" development).\n",
    "title" : " Package Manager Support for Top of Tree development\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3709",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3709",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      }
    ],
    "id" : "SE-0150",
    "link" : "0150-package-manager-branch-support.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "316ae8bddcf655319db3229ef132f66f6ae55004",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal adds enhancements to the package manifest to support development\nof packages without strict versioning. This is one of two features, along with\n\"Package Manager Support for Top of Tree development\", being proposed to enable\nuse of SwiftPM to develop on \"top of tree\" of related packages.\n",
    "title" : " Package Manager Support for branches\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-666",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-666",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      {
        "link" : "http:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      }
    ],
    "id" : "SE-0151",
    "link" : "0151-package-manager-swift-language-compatibility-version.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/abertelrud",
      "name" : "Anders Bertelrud"
    },
    "sha" : "e94c203f6ab4f01fb9f55649a34bcd85ae11b345",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "This proposal adds support for the Swift compiler's new \"language compatibility\nversion\" feature to the package manager.\n",
    "title" : " Package Manager Swift Language Compatibility Version\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3964",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3964",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      }
    ],
    "id" : "SE-0152",
    "link" : "0152-package-manager-tools-version.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/abertelrud",
      "name" : "Anders Bertelrud"
    },
    "sha" : "92394f41569c9cb010e119858bf99aa66720bd2d",
    "status" : {
      "state" : ".implemented",
      "version" : "3.1"
    },
    "summary" : "This proposal introduces a \"Swift tools version\" which is declared for each\nSwift package. The tools version declares the minimum version of the Swift tools\nrequired to use the package, determines what version of the PackageDescription\nAPI should be used in the Package.swift manifest, and determines which Swift\nlanguage compatibility version should be used to parse the Package.swift\nmanifest.\n",
    "title" : " Package Manager Tools Version\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3965",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3965",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/TorinKwok",
        "name" : "Torin Kwok"
      }
    ],
    "id" : "SE-0153",
    "link" : "0153-compensate-for-the-inconsistency-of-nscopyings-behaviour.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "f5005565bd6ca35db59a497a4e0ead863e447f64",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "First of all, in Swift, the Objective-C `copy` property attribute translates to\n`@NSCopying`.\n",
    "title" : " Compensate for the inconsistency of @NSCopying's behaviour\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4538",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4538",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0154",
    "link" : "0154-dictionary-key-and-value-collections.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "f0dd0d9b95fdd69ff305fbadbf8e5192bc69c1dd",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal addresses significant unexpected performance gaps when using\ndictionaries. It introduces type-specific collections for a `Dictionary`\ninstance's `keys` and `values` properties.\n",
    "title" : " Provide Custom Collections for Dictionary Keys and Values\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dduan",
        "name" : "Daniel Duan"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0155",
    "link" : "0155-normalize-enum-case-representation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "faf802867a53b32fec7b2a9c1fafbad12831d547",
    "status" : {
      "state" : ".implemented",
      "version" : "3"
    },
    "summary" : "In Swift 3, associated values of an enum case are represented by a tuple. This\nimplementation causes inconsistencies in case declaration, construction and\npattern matching in several places.\n",
    "title" : " Normalize Enum Case Representation\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4691",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4691",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-12206",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-12206",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-12229",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-12229",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/hartbit",
        "name" : "David Hart"
      },
      {
        "link" : "http:\/\/github.com\/austinzheng",
        "name" : "Austin Zheng"
      }
    ],
    "id" : "SE-0156",
    "link" : "0156-subclass-existentials.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "e0a66e111747789b48cb9cca0fcee937d0e14fbb",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal brings more expressive power to the type system by allowing Swift\nto represent existentials of classes and subtypes which conform to protocols.\n",
    "title" : " Class and Subtype existentials\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4296",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4296",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Douglas Gregor"
      },
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/austinzheng",
        "name" : "Austin Zheng"
      }
    ],
    "id" : "SE-0157",
    "link" : "0157-recursive-protocol-constraints.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "cfb14c042ab1cb1f03ab7dfc9df7cdf4f9caf326",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "This proposal lifts restrictions on associated types in protocols. Their\nconstraints will be allowed to reference any protocol, including protocols that\ndepend on the enclosing one (recursive constraints).\n",
    "title" : " Support recursive constraints on associated types\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1445",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1445",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0158",
    "link" : "0158-package-manager-manifest-api-redesign.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rballard",
      "name" : "Rick Ballard"
    },
    "sha" : "0ef23dfd0ab9c19db2943554efafa05a272916fd",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This is a proposal for redesigning the `Package.swift` manifest APIs provided by\nSwift Package Manager.  \nThis proposal only redesigns the existing public APIs and does not add any new\nfunctionality; any API to be added for new functionality will happen in separate\nproposals.\n",
    "title" : " Package Manager Manifest API Redesign\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3949",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3949",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0159",
    "link" : "0159-fix-private-access-levels.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "75aaecac6d53f6fb85ce90ba911809f7e65557f5",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal presents the problems that came with the the access level\nmodifications in\n[SE-0025](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0025-scoped-access-level.md)\nand proposes reverting to Swift 2 behaviour.\n",
    "title" : " Fix Private Access Levels\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0160",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "8379",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0160-objc-inference.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "7cb90a51c8823a5e2a0e35e76a9740b589d27e09",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "One can explicitly write `@objc` on any Swift declaration that can be expressed\nin Objective-C. As a convenience, Swift also *infers* `@objc` in a number of\nplaces to improve interoperability with Objective-C and eliminate boilerplate.\nThis proposal scales back the inference of `@objc` to only those cases where the\ndeclaration *must* be available to Objective-C to maintain semantic coherence of\nthe model, e.g., when overriding an `@objc` method or implementing a requirement\nof an `@objc` protocol. Other cases currently supported (e.g., a method declared\nin a subclass of `NSObject`) would no longer infer `@objc`, but one could\ncontinue to write it explicitly to produce Objective-C entry points.\n",
    "title" : " Limiting @objc inference\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4481",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4481",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Catfish-Man",
        "name" : "David Smith"
      },
      {
        "link" : "https:\/\/github.com\/mlehew",
        "name" : "Michael LeHew"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0161",
    "link" : "0161-key-paths.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "1a6299ee0f2a617e66727025ff19588cae5d436f",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "We propose a family of concrete *Key Path* types that represent uninvoked\nreferences to properties that can be composed to form paths through many values\nand directly get\/set their underlying values.\n",
    "title" : " Smart KeyPaths: Better Key-Value Coding for Swift\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0162",
    "link" : "0162-package-manager-custom-target-layouts.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rballard",
      "name" : "Rick Ballard"
    },
    "sha" : "f19ee92f50b63df3e29777cbbf0d3ed898101f6e",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal enhances the `Package.swift` manifest APIs to support custom\ntarget layouts, and removes a convention which allowed omission of targets from\nthe manifest.\n",
    "title" : " Package Manager Custom Target Layouts\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-29",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-29",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "http:\/\/github.com\/dabrahams\/",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0163",
    "link" : "0163-string-revision-1.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "23cff3b3945646ef2ce2a54aae56a73a29e5b08d",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal is to implement a subset of the changes from the [Swift 4 String\nManifesto](https:\/\/github.com\/apple\/swift\/blob\/master\/docs\/StringManifesto.md).\n",
    "title" : " String Revision: Collection Conformance, C Interop, Transcoding\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/KingOfBrian",
        "name" : "Brian King"
      }
    ],
    "id" : "SE-0164",
    "link" : "0164-remove-final-support-in-protocol-extensions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "5ae21b0f815900a58d89d6e6f6b6b0d7e4796032",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal disallows the `final` keyword when declaring functions in protocol\nextensions.\n",
    "title" : " Remove final support in protocol extensions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1762",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1762",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0165",
    "link" : "0165-dict.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "d33a7b192cdcda58e10572e58d8c8735bb6ba426",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal comprises a variety of commonly (and less commonly) suggested\nimprovements to the standard library's `Dictionary` type, from merging\ninitializers to dictionary-specific `filter` and `mapValues` methods. The\nproposed additions to `Dictionary`, and the corresponding changes to `Set`, are\ndetailed in the sections below.\n",
    "title" : " Dictionary & Set Enhancements\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/itaiferber",
        "name" : "Itai Ferber"
      },
      {
        "link" : "https:\/\/github.com\/mlehew",
        "name" : "Michael LeHew"
      },
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      }
    ],
    "id" : "SE-0166",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "9004",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0166-swift-archival-serialization.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "00f5815005c16a1f2590334ed945c125394a3db3",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "Foundation's current archival and serialization APIs (`NSCoding`,\n`NSJSONSerialization`, `NSPropertyListSerialization`, etc.), while fitting for\nthe dynamism of Objective-C, do not always map optimally into Swift. This\ndocument lays out the design of an updated API that improves the developer\nexperience of performing archival and serialization in Swift.\n",
    "title" : " Swift Archival & Serialization\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/itaiferber",
        "name" : "Itai Ferber"
      },
      {
        "link" : "https:\/\/github.com\/mlehew",
        "name" : "Michael LeHew"
      },
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      }
    ],
    "id" : "SE-0167",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "9005",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0167-swift-encoders.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "dce5f312e8cba40b036632eb0862a9e52db9cbae",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "As part of the proposal for a Swift archival and serialization API\n([SE-0166](0166-swift-archival-serialization.md)), we are also proposing new API\nfor specific new encoders and decoders, as well as introducing support for new\n`Codable` types in `NSKeyedArchiver` and `NSKeyedUnarchiver`.\n",
    "title" : " Swift Encoders\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/johnno1962",
        "name" : "John Holdsworth"
      },
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      {
        "link" : "https:\/\/github.com\/TheArtOfEngineering",
        "name" : "Tyler Cloutier"
      }
    ],
    "id" : "SE-0168",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "8813",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0168-multi-line-string-literals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "af6b60123972b6cb3510b6b0b67e25e3e4c98717",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal introduces multi-line string literals to Swift source code. This\nhas been discussed a few times on swift-evolution most recently putting forward\na number of different syntaxes that could achieve this goal each of which has\ntheir own use case and constituency for discussion.\n",
    "title" : " Multi-Line String Literals\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-170",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-170",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-4701",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4701",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-4708",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4708",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-4874",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4874",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/hartbit",
        "name" : "David Hart"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0169",
    "link" : "0169-improve-interaction-between-private-declarations-and-extensions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "2705eceb083c07092847be8700c040a790b502ae",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "In Swift 3, a declaration marked `private` may be accessed by anything nested in\nthe scope of the private declaration. For example, a private property or method\ndefined on a struct may be accessed by other methods defined within that struct.\n",
    "title" : " Improve Interaction Between private Declarations and Extensions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4616",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4616",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      }
    ],
    "id" : "SE-0170",
    "link" : "0170-nsnumber_bridge.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "4a426759caa772aecaea58235bc7bfbbde84da66",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "`NSNumber` has been a strange duck in the Swift world especially when it has\ncome to bridging and interacting with other protocols. An attempt was made to\nmake a type preserving `NSNumber` subclass; however that defeated numerous\noptimizations in Foundation and also caused some rather unfortunate disparity\nbetween where and how the NSNumbers were created.\n",
    "title" : " NSNumber bridging and Numeric types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/chriseidhof",
        "name" : "Chris Eidhof"
      }
    ],
    "id" : "SE-0171",
    "link" : "0171-reduce-with-inout.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "dad7187fa62571b54a758eb7af5b9ed952d418b4",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "A new variant of `reduce` should be added to the standard library. Instead of\ntaking a `combine` function that is of type `(A, Iterator.Element) -> A`, the\nfull type and implementation of the added `reduce` will be:\n",
    "title" : " Reduce with inout\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      }
    ],
    "id" : "SE-0172",
    "link" : "0172-one-sided-ranges.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "00522d4bfc6cb59ac74dbb379dd8eedf58451fcc",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal introduces the concept of a \"one-sided\" range, created via\nprefix\/postfix versions of the existing range operators.\n",
    "title" : " One-sided Ranges\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0173",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "9119",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0173-swap-indices.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "6c6b6c080a442b62cb6df67ac1928fb7a91384fe",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "As part of the introduction of the Law of Exclusivity, the current `swap(_:_:)`\nfunction must be addressed, as this most common uses of `swap` directly violate\nthe law. This proposal introduces an alternative: a method on\n`MutableCollection` that takes two indices for swapping two elements in the same\ncollection.\n",
    "title" : " Add MutableCollection.swapAt(_:_:)\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0174",
    "link" : "0174-filter-range-replaceable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "1edd946141d0c18c1b05c0716ec71dce2574ff7e",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal implements the `filter` operation on `RangeReplaceableCollection`\nto return the same type as the filtered collection.\n",
    "title" : " Change RangeReplaceableCollection.filter to return Self\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3444",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3444",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      }
    ],
    "id" : "SE-0175",
    "link" : "0175-package-manager-revised-dependency-resolution.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/aciidb0mb3r",
      "name" : "Ankit Aggarwal"
    },
    "sha" : "8f236f3606b65627cdf70e1b878247751b4f6590",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal makes the package manager's dependency resolution behavior clearer\nand more intuitive. It removes the pinning commands (`swift package pin` &\n`swift package unpin`), replaces the `swift package fetch` command with a new\n`swift package resolve` command with improved behavior, and replaces the\noptional `Package.pins` file with a `Package.resolved` file which is always\ncreated during dependency resolution.\n",
    "title" : " Package Manager Revised Dependency Resolution\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      }
    ],
    "id" : "SE-0176",
    "link" : "0176-enforce-exclusive-access-to-memory.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "70679c3a1825b3668ae00fa9265f7262d705b842",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "In Swift 3, it is possible to modify a variable while it's being used or\nmodified by another part of the program. This can lead to unexpected and\nconfusing results. It also forces a great deal of conservatism onto the\nimplementation of the compiler and the standard libraries, which must generally\nensure the basic soundness of the program (no crashes or undefined behavior)\neven in unusual circumstances.\n",
    "title" : " Enforce Exclusive Access to Memory\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Nirma",
        "name" : "Nicholas Maccharoli"
      }
    ],
    "id" : "SE-0177",
    "link" : "0177-add-clamped-to-method.md",
    "reviewManager" : {
      "link" : "",
      "name" : "TBD"
    },
    "sha" : "37d3dfafc35b6dbf8d93878e982f9669af7f4cb5",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This proposal aims to add functionality to the standard library for clamping a\nvalue to a provided `Range`. The proposed function would allow the user to\nspecify a range to clamp a value to where if the value fell within the range,\nthe value would be returned as is, if the value being clamped exceeded the upper\nor lower bound then the upper or lower bound would be returned respectively.\n",
    "title" : " Add clamp(to:) to the stdlib\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0178",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "9675",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0178-character-unicode-view.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "2174ddb2b34e61e7b9b2709b33cb0692d3e30b5c",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal adds a `unicodeScalars` view to `Character`, similar to that on\n`String`.\n",
    "title" : " Add unicodeScalars property to Character\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/hartbit\/",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0179",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1187",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0179-swift-run-command.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "9f50affd697b9086d6f6e67b48163de1732a3fcc",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "The proposal introduces a new `swift run` command to build and run an executable\ndefined in the current package.\n",
    "title" : " Swift run Command\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0180",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "9806",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0180-string-index-overhaul.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "be0025edf0714c0a3c08cb803f6f4efe8d8f673c",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "Today `String` shares an `Index` type with its `CharacterView` but not with its\n`UTF8View`, `UTF16View`, or `UnicodeScalarView`. This proposal redefines\n`String.UTF8View.Index`, `String.UTF16View.Index`, and\n`String.CharacterView.Index` as typealiases for `String.Index`, and exposes a\npublic `encodedOffset` property and initializer that can be used to serialize\nand deserialize positions in a `String` or `Substring`.\n",
    "title" : " String Index Overhaul\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0181",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1264",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0181-package-manager-cpp-language-version.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/ddunbar",
      "name" : "Daniel Dunbar"
    },
    "sha" : "2c1bf3a9ffb596a1d91277631240848859184eb9",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal adds support for declaring the language standard for C and C++\ntargets in a SwiftPM package.\n",
    "title" : " Package Manager C\/C++ Language Standard Support\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/johnno1962",
        "name" : "John Holdsworth"
      },
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      },
      {
        "link" : "https:\/\/github.com\/DevAndArtist",
        "name" : "Adrian Zubarev"
      }
    ],
    "id" : "SE-0182",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "11080",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0182-newline-escape-in-strings.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "285999e649590c84075e82d148f6fb32a312dc9d",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal is a refinement of [SE-0168](0168-multi-line-string-literals.md)\nwhich introduces the ability to escape newlines in single and multi-line strings\nto improve readability and maintenance of source material containing excessively\nlong lines.\n",
    "title" : " String Newline Escaping\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0183",
    "link" : "0183-substring-affordances.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "521a82f3ae2e4d540bd15a91f519182b108a1b24",
    "status" : {
      "state" : ".implemented",
      "version" : "4"
    },
    "summary" : "This proposal modifies a small number of methods in the standard library that\nare commonly used with the `Substring` type:\n",
    "title" : " Substring performance affordances\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-4933",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-4933",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/tayloraswift",
        "name" : "Dianna Ma (“Taylor Swift”)"
      }
    ],
    "id" : "SE-0184",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12200",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0184-unsafe-pointers-add-missing.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "772376bbdbaf9f7f8dc83173bbd3a1aabaae9af3",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "*This document is a spin-off from a much larger [original\nproposal](https:\/\/github.com\/tayloraswift\/swift-evolution\/blob\/e888af466c9993de977f6999a131eadd33291b06\/proposals\/0184-unsafe-pointers-add-missing.md),\nwhich covers only those aspects of SE-0184 which do not deal with partial buffer\nmemory state. Designing the partial buffer memory state API clearly requires\nmore work, and has been left out of the scope of this document.*\n",
    "title" : " Unsafe[Mutable][Raw][Buffer]Pointer: add missing methods, adjust existing labels for clarity, and remove deallocation size\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      }
    ],
    "id" : "SE-0185",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "9619",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0185-synthesize-equatable-hashable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "40a20d97d88e984c0f9a7c822e2ff8ce21c97fd4",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "Developers have to write large amounts of boilerplate code to support\nequatability and hashability of complex types. This proposal offers a way for\nthe compiler to automatically synthesize conformance to `Equatable` and\n`Hashable` to reduce this boilerplate, in a subset of scenarios where generating\nthe correct implementation is known to be possible.\n",
    "title" : " Synthesizing Equatable and Hashable conformance\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/gspiers",
        "name" : "Greg Spiers"
      }
    ],
    "id" : "SE-0186",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "11744",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0186-remove-ownership-keyword-support-in-protocols.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "7ec3fa019402f92615d453b80c983e6840538f9f",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "This proposal removes support for the keywords `weak` and `unowned` for property\ndeclarations in a protocol.\n",
    "title" : " Remove ownership keyword support in protocols\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-479",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-479",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Max Moiseev"
      }
    ],
    "id" : "SE-0187",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12819",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0187-introduce-filtermap.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "58fc221b71ebd07a2c8159f5f20d5e254da597ac",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "We propose to deprecate the controversial version of a `Sequence.flatMap` method\nand provide the same functionality under a different, and potentially more\ndescriptive, name.\n",
    "title" : " Introduce Sequence.compactMap(_:)\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0188",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12777",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0188-stdlib-index-types-hashable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "a1e2c5a83c3ad689fda554e64fe10a4df4670a48",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "Key-path expressions can now include subscripts to reference individual\npositions in collections and other subscriptable types, but only when the\nsubscript parameters are `Hashable`. To provide maximum utility, the standard\nlibrary index types should all have `Hashable` conformance added.\n",
    "title" : " Make Standard Library Index Types Hashable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jrose-apple",
        "name" : "Jordan Rose"
      }
    ],
    "id" : "SE-0189",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12834",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0189-restrict-cross-module-struct-initializers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "a587ec18c401d81c93eb70b5f30afe429e1fc2ff",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "Adding a property to a public struct in Swift ought to not be a source-breaking\nchange. However, a client in another target can currently extend a struct with a\nnew initializer that directly initializes the struct's fields. This proposal\nforbids that, requiring any cross-target initializers to use `self.init(…)` or\nassign to `self` instead. This matches an existing restriction for classes,\nwhere cross-module initializers must be convenience initializers.\n",
    "title" : " Restrict Cross-module Struct Initializers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/graydon",
        "name" : "Graydon Hoare"
      }
    ],
    "id" : "SE-0190",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12964",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0190-target-environment-platform-condition.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "8de170fe27b3ae36d8799544b54e4eb7b372d349",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "This proposal introduces a platform condition to differentiate device and\nsimulator builds. This condition subsumes a common pattern of conditional\ncompilation for Metal, Keychain, and AVFoundation Camera code.\n",
    "title" : " Target environment platform condition\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0191",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12641",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0191-eliminate-indexdistance.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "917cbf034014a87161ad8aa597eb207bab11f855",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "Eliminate the associated type `IndexDistance` from `Collection`, and modify all\nuses to the concrete type `Int` instead.\n",
    "title" : " Eliminate IndexDistance from Collection\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jrose-apple",
        "name" : "Jordan Rose"
      }
    ],
    "id" : "SE-0192",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14945",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0192-non-exhaustive-enums.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "e9ba9a042ca668f65fa3b104f65cd7a48f7bf4ff",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "Currently, adding a new case to an enum is a source-breaking change, something\nthat's at odds with Apple's established process for evolving APIs. This proposal\naims to distinguish between enums that are *frozen* (meaning they will never get\nany new cases) and those that are *non-frozen,* and to ensure that clients\nhandle any future cases when dealing with the latter.\n",
    "title" : " Handling Future Enum Cases\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/slavapestov",
        "name" : "Slava Pestov"
      }
    ],
    "id" : "SE-0193",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15787",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0193-cross-module-inlining-and-specialization.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "7daee5b463e0fa70953a2447ce3a38baae2840f9",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "We propose introducing a pair of new attributes, `@inlinable` and\n`@usableFromInline`. The `@inlinable` attribute exports the body of a function\nas part of a module's interface, making it available to the optimizer when\nreferenced from other modules. The `@usableFromInline` attribute marks an\ninternal declaration as being part of the binary interface of a module, allowing\nit to be used from `@inlinable` code without exposing it as part of the module's\nsource interface.\n",
    "title" : " Cross-module inlining and specialization\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jtbandes",
        "name" : "Jacob Bandes-Storch"
      },
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      {
        "link" : "https:\/\/github.com\/CodaFi",
        "name" : "Robert Widmann"
      }
    ],
    "id" : "SE-0194",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "13655",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0194-derived-collection-of-enum-cases.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "ee60a8d2fb5af1d9e28d1085ac554f6fe19bd0dc",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "",
    "title" : " Derived Collection of Enum Cases\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-7151",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-7151",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-7152",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-7152",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0195",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14546",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0195-dynamic-member-lookup.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "55b18c7acb3d73cb15c7d4b15713ba4cc870eae5",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal introduces a new `@dynamicMemberLookup` attribute. Types that use\nit provide \"dot\" syntax for arbitrary names which are resolved at runtime - in a\n**completely type safe** way. This provides syntactic sugar that allows the user\nto write:\n",
    "title" : " Introduce User-defined \"Dynamic Member Lookup\" Types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/harlanhaskins",
        "name" : "Harlan Haskins"
      }
    ],
    "id" : "SE-0196",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14048",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0196-diagnostic-directives.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "9d6a940864e839f7bbf893f3d40f7001a348f245",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal introduces `#warning` and `#error` directives that will cause the\nSwift compiler to emit a custom warning or an error during compilation.\n",
    "title" : " Compiler Diagnostic Directives\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0197",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "11576",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0197-remove-where.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "e74c332e92b7865f2e0c50b5e08a4b8b32f9e303",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "It is common to want to remove all occurrences of a certain element from a\ncollection. This proposal is to add a `removeAll` algorithm to the standard\nlibrary, which will remove all entries in a collection in-place matching a given\npredicate.\n",
    "title" : " Adding in-place removeAll(where:) to the Standard Library\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/cwakamo",
        "name" : "Connor Wakamo"
      }
    ],
    "id" : "SE-0198",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "13911",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "21",
        "repository" : "swift-xcode-playground-support",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "14252",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "1415",
        "repository" : "swift-corelibs-foundation",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "20",
        "repository" : "swift-xcode-playground-support",
        "type" : "pull"
      }
    ],
    "link" : "0198-playground-quicklook-api-revamp.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift\/",
      "name" : "Ben Cohen"
    },
    "sha" : "59b4d0722fddb276479416299affc59c6edf61c0",
    "status" : {
      "state" : ".implemented",
      "version" : "4.1"
    },
    "summary" : "The standard library currently includes API which allows a type to customize its\ndescription in Xcode playgrounds and Swift Playgrounds. This API takes the form\nof the `PlaygroundQuickLook` enum which enumerates types which are supported for\nquick looks, and the `CustomPlaygroundQuickLookable` protocol which allows a\ntype to return a custom `PlaygroundQuickLook` value for an instance.\n",
    "title" : " Playground QuickLook API Revamp\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/chris.eidhof.nl",
        "name" : "Chris Eidhof"
      }
    ],
    "id" : "SE-0199",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14586",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0199-bool-toggle.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift\/",
      "name" : "Ben Cohen"
    },
    "sha" : "819153e336302c5c36db6d4141d15f532c84b6f4",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "I propose adding a `mutating func toggle` to `Bool`. It toggles the `Bool`.\n",
    "title" : " Adding toggle to Bool\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/johnno1962",
        "name" : "John Holdsworth"
      },
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      }
    ],
    "id" : "SE-0200",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "17668",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0200-raw-string-escaping.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "1032224a4ebbdc04635150534fc16f283bcfb903",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "Like many computer languages, Swift uses an escape character (`\\`) to create a\nspecial interpretation of subsequent characters within a string literal. Escape\ncharacter sequences represent a set of predefined, non-printing characters as\nwell as string delimiters (the double quote), the escape character (the\nbackslash itself), and (uniquely in Swift) to allow in-string expression\ninterpolation.\n",
    "title" : " Enhancing String Literals Delimiters to Support Raw Text\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-6362",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-6362",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0201",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1583",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0201-package-manager-local-dependencies.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "de681db9e558dfabb833ecd3920cca7ffcf5bb45",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal adds a new API in `PackageDescription` to support declaring\ndependency on a package using its path on disk instead of the git URL.\n",
    "title" : " Package Manager Local Dependencies\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-7433",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-7433",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0202",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12772",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0202-random-unification.md",
    "reviewManager" : {
      "link" : "http:\/\/github.com\/AirspeedSwift\/",
      "name" : "Ben Cohen"
    },
    "sha" : "81744c6ea425df5532bec557d3ed8150f6390892",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal's main focus is to create a unified random API, and a secure\nrandom API for all platforms.\n",
    "title" : " Random Unification\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xwu",
        "name" : "Xiaodi Wu"
      }
    ],
    "id" : "SE-0203",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "12884",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0203-rename-sequence-elements-equal.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "4d5391bee184d4bfd9f86792e45d5c612614ef63",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "The behavior of `Sequence.elementsEqual` is confusing to users given its name.\nHaving surveyed alternative solutions to this problem, it is proposed that the\nmethod be renamed to `Sequence.elementsEqualInIterationOrder`.\n",
    "title" : " Rename Sequence.elementsEqual\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-6102",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-6102",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0204",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "13337",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0204-add-last-methods.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "559e60c55a46da0665d4e232d3a906cd442a4220",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "The standard library should include methods for finding the last element in a\nsequence, and the index of the last element in a collection, that match a given\npredicate.\n",
    "title" : " Add last(where:) and lastIndex(where:) Methods\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-1504",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-1504",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0205",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15608",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0205-withUnsafePointer-for-lets.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "f85cd48bcd738a135d6a82beb42354fb0f99c3d7",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "We propose to extend the toplevel `withUnsafePointer(to:_:)` and\n`withUnsafeBytes(of:_:)` functions to work with read-only values.\n",
    "title" : " withUnsafePointer(to:_:) and withUnsafeBytes(of:_:) for immutable values\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lorentey",
        "name" : "Karoy Lorentey"
      },
      {
        "link" : "https:\/\/github.com\/regexident",
        "name" : "Vincent Esche"
      }
    ],
    "id" : "SE-0206",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14913",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "16009",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "16073",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0206-hashable-enhancements.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "ce6a0d5106469ea5a118f5495b60587680ae58fd",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal introduces a new `Hasher` type representing the standard library's\nuniversal hash function, and it extends the `Hashable` protocol with a new\n`hash(into:)` requirement that expresses hashing in terms of `Hasher`. This new\nrequirement is intended to replace the old `hashValue` property, which is\ndeprecated.\n",
    "title" : " Hashable Enhancements\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0207",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15120",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0207-containsOnly.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/dabrahams",
      "name" : "Dave Abrahams"
    },
    "sha" : "df5aa065c7ed7614d8ed94d4145ffacee61b3a35",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "It is common to want to confirm that every element of a sequence equals a value,\nor matches certain criteria. Many implementations of this can be found in use on\nGitHub. This proposal adds such a method to `Sequence`.\n",
    "title" : " Add an allSatisfy algorithm to Sequence\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      },
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      }
    ],
    "id" : "SE-0208",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1586",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0208-package-manager-system-library-targets.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "7c7d3226255846148054e2e4f9f077923426d874",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal introduces a new type of target \"system library target\", which\nmoves the current system-module packages feature from package to target level.\n",
    "title" : " Package Manager System Library Targets\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-7434",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-7434",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0209",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1563",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0209-package-manager-swift-lang-version-update.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "def6f95c7d0bcfadd191816c658e4c42b0ed1701",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal changes the current `Package.swift` manifest API for declaring for\nSwift language versions from freeform Integer array to a new `SwiftVersion` enum\narray.\n",
    "title" : " Package Manager Swift Language Version API Update\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-7464",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-7464",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0210",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15519",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0210-key-path-offset.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "1d7f606b679c8df7d9737d266942e64b0dcde550",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal introduces the ability for Swift code to query the in-memory\nlayout of stored properties in aggregates using key paths. Like the `offsetof`\nmacro in C, `MemoryLayout<T>.offset(of:)` returns the distance in bytes between\na pointer to a value and a pointer to one of its fields.\n",
    "title" : " Add an offset(of:) method to MemoryLayout\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      }
    ],
    "id" : "SE-0211",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15593",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0211-unicode-scalar-properties.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "8b445efa0d1835bc9eb3d8607ed6001a5d8de1be",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "We propose adding a number of properties to the `Unicode.Scalar` type to support\nboth common and advanced text processing use cases, filling in a number of gaps\nin Swift's text support compared to other programming languages.\n",
    "title" : " Add Unicode Properties to Unicode.Scalar\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0212",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15977",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0212-compiler-version-directive.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "a05a4e06a0a2ce015f578bc461727cc1214bacb2",
    "status" : {
      "state" : ".implemented",
      "version" : "4.2"
    },
    "summary" : "This proposal introduces a `compiler` directive that is syntactically equivalent\nto the `#if swift` version check but checks against the version of the compiler,\nregardless of which compatibility mode it's currently running in.\n",
    "title" : " Compiler Version Directive\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0213",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "17860",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0213-literal-init-via-coercion.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "d8d086dad64e9139c7e1c8ab07ebc21a66af4809",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "`T(literal)` should construct T using the appropriate literal protocol if\npossible.\n",
    "title" : " Literal initialization via coercion\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "https:\/\/github.com\/masters3d",
        "name" : "Chéyo Jiménez"
      }
    ],
    "id" : "SE-0214",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "16577",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0214-DictionaryLiteral.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "00751f010a3764f5a838fd4a02ee82e0858df1cb",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal renames the confusing and misnamed\n[`DictionaryLiteral`](https:\/\/github.com\/apple\/swift\/blob\/c25188bafd1c775d4ceecc4a795f614f00451bf9\/stdlib\/public\/core\/Mirror.swift#L646)\ntype to `KeyValuePairs`. This type is neither a dictionary nor a literal. It is\na list of key-value pairs.\n",
    "title" : " Renaming the DictionaryLiteral type to KeyValuePairs\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/mdiep",
        "name" : "Matt Diephouse"
      }
    ],
    "id" : "SE-0215",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "16857",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0215-conform-never-to-hashable-and-equatable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "089b7c63df1065bd7a6cd946ddeb45eb1b87eb32",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "Extend `Never` so it conforms to `Equatable` and `Hashable`.\n",
    "title" : " Conform Never to Equatable and Hashable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      {
        "link" : "https:\/\/github.com\/dan-zheng",
        "name" : "Dan Zheng"
      }
    ],
    "id" : "SE-0216",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "20305",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0216-dynamic-callable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "bde60e1bbbf47be27f5b38698d2018cc9c368213",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal is a follow-up to [SE-0195 - Introduce User-defined \"Dynamic\nMember Lookup\"\nTypes](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0195-dynamic-member-lookup.md),\nwhich shipped in Swift 4.2. It introduces a new `@dynamicCallable` attribute,\nwhich marks a type as being \"callable\" with normal syntax. It is simple\nsyntactic sugar which allows the user to write:\n",
    "title" : " Introduce user-defined dynamically \"callable\" types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "https:\/\/github.com\/davedelong",
        "name" : "Dave DeLong"
      },
      {
        "link" : "https:\/\/github.com\/pcantrell",
        "name" : "Paul Cantrell"
      },
      {
        "link" : "https:\/\/github.com\/erica",
        "name" : "Erica Sadun"
      },
      {
        "link" : "",
        "name" : "and several other folk"
      }
    ],
    "id" : "SE-0217",
    "link" : "0217-bangbang.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "d74ce4477c52bb1985fe60dd1cd4a904778c5aab",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal introduces an annotating forced-unwrapping operator to the Swift\nstandard library. It augments the `?`, `??`, and `!` family, adding `!!`. This\n\"unwrap or die\" operator provides code-sourced rationales for failed unwraps,\nsupporting self-documentation and safer development. The `!!` operator is\ncommonly implemented in the wider Swift Community and should be considered for\nofficial adoption.\n",
    "title" : " Introducing the !! \"Unwrap or Die\" operator to the Swift Standard Library\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/d-date",
        "name" : "Daiki Matsudate"
      }
    ],
    "id" : "SE-0218",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "15017",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0218-introduce-compact-map-values.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "b5b97fe62e74bdf8d28cee0ac198b5f03e3dccca",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal adds a combined filter\/map operation to `Dictionary`, as a\ncompanion to the `mapValues` and filter methods introduced by\n[SE-0165](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0165-dict.md).\nThe new compactMapValues operation corresponds to compactMap on Sequence.\n",
    "title" : " Introduce compactMapValues to Dictionary\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0219",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "1776",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0219-package-manager-dependency-mirroring.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "21cd61f6c6cb6a29fcd165a07a4330467efc1066",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "A dependency mirror refers to an alternate source location which exactly\nreplicates the contents of the original source. This is a proposal for adding\nsupport for dependency mirroring in SwiftPM.\n",
    "title" : " Package Manager Dependency Mirroring\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-8328",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-8328",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/khanlou",
        "name" : "Soroush Khanlou"
      }
    ],
    "id" : "SE-0220",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "16099",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "22289",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0220-count-where.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "17196a047e61750f1c57a1dcdaae5a42d87d0040",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "While Swift's `Sequence` models brings a lot of niceties that we didn't have\naccess to in Objective-C, like `map` and `filter`, there are other useful\noperations on sequences that the standard library doesn't support yet. One\ncurrent missing operation is `count(where:)`, which counts the number of\nelements in a `Sequence` that pass some test.\n",
    "title" : " count(where:)\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      },
      {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      }
    ],
    "id" : "SE-0221",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "20520",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0221-character-properties.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "95ff344375154b46df7b3c088d32c5ec229828ba",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "@allevato (a co-author here) proposed [Add Unicode Properties to\nUnicode.Scalar](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0211-unicode-scalar-properties.md),\nwhich exposes Unicode properties from the [Unicode Character\nDatabase](http:\/\/unicode.org\/reports\/tr44\/). These are Unicode expert\/enthusiast\noriented properties that give a finer granularity of control and answer\nhighly-technical and specific Unicody enquiries.\n",
    "title" : " Character Properties\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/TellowKrinkle",
        "name" : "TellowKrinkle"
      },
      {
        "link" : "https:\/\/github.com\/weissi",
        "name" : "Johannes Weiß"
      }
    ],
    "id" : "SE-0222",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14841",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0222-lazy-compactmap-sequence.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "c5cbcdb402101cd846cdafad99ccec17c480fbe1",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Chaining multiple `.map()`s and `.filter()`s on a lazy collection leads to\nsuboptimal codegen, as well as large, painful type names. To improve this, we\npropose adding a `LazyCompactMap{Sequence, Collection}` type along with some\noverloads on the other lazy collection types' `.map(_:)` and `.filter(_:)`\nfunctions which return this type to get better codegen and shorter type names.\n",
    "title" : " Lazy CompactMap Sequence\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0223",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "17389",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0223-array-uninitialized-initializer.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "024899b1580c82fba798d27ece13779cc489c30b",
    "status" : {
      "state" : ".withdrawn"
    },
    "summary" : "This proposal suggests a new initializer and method for `Array` and\n`ContiguousArray` that provide access to an array's uninitialized storage\nbuffer.\n",
    "title" : " Accessing an Array's Uninitialized Buffer\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3087",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3087",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/danielmartin",
        "name" : "Daniel Martín"
      }
    ],
    "id" : "SE-0224",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "14503",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "17960",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0224-ifswift-lessthan-operator.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "02053e5e134b2a5cdba9d0823e63cd5f4eabfdaa",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal augments the functionality implemented for proposal\n[SE-0020](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0020-if-swift-version.md)\nwith the introduction of a new valid operator in compilation condition: \"\\<\".\nThe aim is that the syntax `#if swift(<4.2)` is supported by the language.\n",
    "title" : " Support 'less than' operator in compilation conditions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-6852",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-6852",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/robmaceachern",
        "name" : "Robert MacEachern"
      },
      {
        "link" : "https:\/\/github.com\/SiliconUnicorn",
        "name" : "Micah Hansonbrook"
      }
    ],
    "id" : "SE-0225",
    "link" : "0225-binaryinteger-iseven-isodd-ismultiple.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "422df64a24e80ba510d37f37ce4a61fddce71aa5",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal adds `var isEven: Bool`, `var isOdd: Bool`, and `func\nisMultiple(of other: Self) -> Bool` to the `BinaryInteger` protocol. `isEven`\nand `isOdd` are convenience properties for querying the\n[parity](https:\/\/en.wikipedia.org\/wiki\/Parity_\\(mathematics\\)) of the integer\nand `isMultiple` is a more general function to determine whether an integer is a\nmultiple of another integer.\n",
    "title" : " Adding isMultiple to BinaryInteger\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0226",
    "link" : "0226-package-manager-target-based-dep-resolution.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "533e5885b44624363110b64afaaa0455b1b3e8ab",
    "status" : {
      "state" : ".implemented",
      "version" : "5.2"
    },
    "summary" : "This is a proposal for enhancing the package resolution process to resolve the\nminimal set of dependencies that are used in a package graph.\n",
    "title" : " Package Manager Target Based Dependency Resolution\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-8658",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-8658",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0227",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "18804",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "19382",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0227-identity-keypath.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "b3fb12a2ed750bdbebbddbad8b1304025e07e3d8",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "Add the ability to reference the identity key path, which refers to the entire\ninput value it is applied to.\n",
    "title" : " Identity key path\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0228",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "20214",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0228-fix-expressiblebystringinterpolation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "3fa6e757aa7a5d7225e925cbae657b2e51d82317",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "String interpolation is a simple and powerful feature for expressing complex,\nruntime-created strings, but the current version of the\n`ExpressibleByStringInterpolation` protocol has been deprecated since Swift 3.\nWe propose a new design that improves its performance, clarity, and efficiency.\n",
    "title" : " Fix ExpressibleByStringInterpolation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      }
    ],
    "id" : "SE-0229",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "20344",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0229-simd.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "ad8de6fc8aee20c04f5a8938454f675690d183d8",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal would expose a common subset of operations on the SIMD types\nsupported by most processors in the standard library. It is based on Apple's\n\\<simd\/simd.h\\> module, which is used throughout Apple's platforms as the common\ncurrency type for fixed-size vectors and matrices. It is not a complete\nre-implementation; rather it provides the low-level support needed to import any\nsuch library, and tries to make a number of things much nicer in Swift than they\nare in C or C++.\n",
    "title" : " SIMD Vectors\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/bjhomer",
        "name" : "BJ Homer"
      }
    ],
    "id" : "SE-0230",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "16942",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0230-flatten-optional-try.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "80be7e5aed0548ab7a906d608bd57611f59dbfc4",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "Swift's `try?` statement currently makes it easy to introduce a nested optional.\nNested optionals are difficult for users to reason about, and Swift tries to\navoid producing them in other common cases.\n",
    "title" : " Flatten nested optionals resulting from 'try?'\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/AnthonyLatsis",
        "name" : "Anthony Latsis"
      }
    ],
    "id" : "SE-0231",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "19207",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0231-optional-iteration.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "cb8ac69f6db493ea47d185817bc4137b14f10ce4",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Optionals are a key feature of Swift and a powerful tool that seamlessly\ninteracts with code. In particular, they serve a great means in expressing \"act\naccordingly if there's a value, skip otherwise\". Some vivid examples of such\nbehavior are optional chaining, optional invocation `foo?()`, `if let`,\n[optional\npatterns](https:\/\/docs.swift.org\/swift-book\/ReferenceManual\/Patterns.html#grammar_optional-pattern),\noptional assignments and `guard let`. This proposal considers further supporting\nthis convenience in `for-in` loops.\n",
    "title" : " Optional Iteration\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0232",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "19995",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0232-remove-customization-points.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "a4690680c5d940862102405bfd2f80af12d7453a",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal removes four customization points from protocols in the standard\nlibrary:\n",
    "title" : " Remove Some Customization Points from the Standard Library's Collection Hierarchy\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rxwei",
        "name" : "Richard Wei"
      }
    ],
    "id" : "SE-0233",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "20422",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0233-additive-arithmetic-protocol.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "9cb6bcbbff868be7ff9e81bf6c8a77fea91a094d",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal introduces a weakening of the existing `Numeric` protocol named\n`AdditiveArithmetic` , which defines additive arithmetic operators and a zero,\nmaking conforming types roughly correspond to the mathematic notion of an\n[additive group](https:\/\/en.wikipedia.org\/wiki\/Additive_group). This makes it\npossible for vector types to share additive arithmetic operators with scalar\ntypes, which enables generic algorithms over `AdditiveArithmetic` to apply to\nboth scalars and vectors.\n",
    "title" : " Make  Numeric  Refine a new  AdditiveArithmetic  Protocol\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0234",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "20221",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0234-remove-sequence-subsequence.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "f72379748f02914b397f0025fd7ad505cb68d409",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal recommends eliminating the associated type from `Sequence`, moving\nit up to start at `Collection`. Current customization points on `Sequence`\nreturning a `SubSequence` will be amended to be extensions returning concrete\ntypes.\n",
    "title" : " Remove Sequence.SubSequence\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jshier",
        "name" : "Jon Shier"
      }
    ],
    "id" : "SE-0235",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "21073",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "21225",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "21378",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0235-add-result.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "970e0b724422341174b017c4e2e054e758f24f92",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "Swift's current error-handling, using `throws`, `try`, and `catch`, offers\nautomatic and synchronous handling of errors through explicit syntax and runtime\nbehavior. However, it lacks the flexibility needed to cover all error\npropagation and handling in the language. `Result` is a type commonly used for\nmanual propagation and handling of errors in other languages and within the\nSwift community. Therefore this proposal seeks to add such a type to the Swift\nstandard library.\n",
    "title" : " Add Result to the Standard Library\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0236",
    "link" : "0236-package-manager-platform-deployment-settings.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "d960b744e8dbf72acf4716616995c988cbae8bdf",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This is a proposal for adding support for specifying a per-platform minimum\nrequired deployment target in the `Package.swift` manifest file.\n",
    "title" : " Package Manager Platform Deployment Settings\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0237",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "21138",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0237-contiguous-collection.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "907fefbb7065394cf063473389fffac82200f8ef",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This proposal introduces two new methods, on `Sequence` and `MutableCollection`.\nThese methods will allow generic code to make use of the\n`withUnsafe{Mutable}BufferPointer` idiom, as well as provide fast paths in the\nstandard library for adopting types.\n",
    "title" : " Introduce withContiguous{Mutable}StorageIfAvailable methods\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0238",
    "link" : "0238-package-manager-build-settings.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "a739eb65a88f7cbbba7efd3dba0d6402e0d49d20",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "This is a proposal for adding support for declaring some commonly used\ntarget-specific build settings in the `Package.swift` manifest file. As the name\nsuggests, target-specific build settings are only applied to a particular\ntarget. SwiftPM also aims to support cross-target build settings that go across\nthe target boundary and impart certain settings on a target's dependees, but\nthis proposal is only concerned with the former type of build settings and the\nlatter will be explored with a future proposal.\n",
    "title" : " Package Manager Target Specific Build Settings\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dlbuckley",
        "name" : "Dale Buckley"
      },
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Maxim Moiseev"
      }
    ],
    "id" : "SE-0239",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "19532",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "21857",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0239-codable-range.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "db707108b8497a208a6e4becc5e8dafee9650f21",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "[SE-0167](0167-swift-encoders.md) introduced `Codable` conformance for some\ntypes in the standard library, but not the `Range` family of types. This\nproposal adds that conformance.\n",
    "title" : " Add Codable conformance to Range types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/numist",
        "name" : "Scott Perry"
      },
      {
        "link" : "https:\/\/github.com\/kylemacomber",
        "name" : "Kyle Macomber"
      }
    ],
    "id" : "SE-0240",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "21845",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0240-ordered-collection-diffing.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "9e64b5a25fe164c1b1dd076f91bb7b089db3da3e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "This proposal describes additions to the standard library that provide an\ninterchange format for diffs as well as diffing\/patching functionality for\nappropriate collection types.\n",
    "title" : " Ordered Collection Diffing\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0241",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "22108",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0241-string-index-explicit-encoding-offset.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "e1ceb3a54cf148274da7fee0742d485073b46c57",
    "status" : {
      "state" : ".implemented",
      "version" : "5"
    },
    "summary" : "[SE-0180](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0180-string-index-overhaul.md)\nintroduced a computed variable and initializer surrounding the concept of an\n`encodedOffset` for serialization purposes. Unfortunately, that approach is\nflawed for its intended purpose and is commonly misused in ways that Swift 5 is\n[more likely to expose](https:\/\/bugs.swift.org\/browse\/SR-9749). It is too late\nin the Swift 5.0 release to solve all existing problems, so we propose\ndeprecating `encodedOffset` and introducing a targeted, semantics-preserving\nalternative.\n",
    "title" : " Deprecate String Index Encoded Offsets\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0242",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "19743",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0242-default-values-memberwise.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "4b6522f683640ca9e3d22541096a496724e8b055",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "This proposal aims to solve a simple outstanding problem with the way the Swift\ncompiler currently synthesizes the memberwise initializer for structures by\nsynthesizing default values for properties with default initializers.\n",
    "title" : " Synthesize default values for the memberwise initializer\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/tayloraswift",
        "name" : "Dianna Ma (“Taylor Swift”)"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      {
        "link" : "https:\/\/github.com\/johnno1962",
        "name" : "John Holdsworth"
      }
    ],
    "id" : "SE-0243",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "21873",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0243-codepoint-and-character-literals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "15a237095b03ebbd116ec2a6c5a91a06d8a67d46",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Swift’s `String` type is designed for Unicode correctness and abstracts away the\nunderlying binary representation of the string to model it as a `Collection` of\ngrapheme clusters. This is an appropriate string model for human-readable text,\nas to a human reader, the atomic unit of a string is (usually) the extended\ngrapheme cluster. When treated this way, many logical string operations “just\nwork” the way users expect.\n",
    "title" : " Integer-convertible character literals\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0244",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "22072",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0244-opaque-result-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "19e921660d2a1ba7ed11c8e58f3643cb82d19103",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "This proposal is the first part of a group of changes we're considering in a\n[design document for improving the UI of the generics\nmodel](https:\/\/forums.swift.org\/t\/improving-the-ui-of-generics\/22814). We'll try\nto make this proposal stand alone to describe opaque return types, their design,\nand motivation, but we also recommend reading the design document for more\nin-depth exploration of the relationships among other features we're\nconsidering. We'll link to relevant parts of that document throughout this\nproposal.\n",
    "title" : " Opaque Result Types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0245",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23134",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0245-array-uninitialized-initializer.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "2e19b1556078d52472e9e68951f92901712b332a",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "This proposal suggests a new initializer for `Array` and `ContiguousArray` that\nprovides access to an array's uninitialized storage buffer.\n",
    "title" : " Add an Array Initializer with Access to Uninitialized Storage\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3087",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3087",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      }
    ],
    "id" : "SE-0246",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23140",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0246-mathable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "78b6e7a3c8a3576f6900209c783e9d93868dc647",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "This proposal introduces two new protocols to the standard library:\n`ElementaryFunctions` and `Real`. These protocols combine to provide \"basic math\nfunctions\" in generic contexts for floating-point and SIMD types, and provide a\npath to extend that functionality to planned complex types in the future.\n",
    "title" : " Generic Math(s) Functions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0247",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23051",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0247-contiguous-strings.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "69527d9163714f5f8dab45f29180a552a08b575b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "One of the most common API requests from performance-minded users of string is a\nway to get direct access to the raw underlying code units. Now that [Swift 5\nuses UTF-8](https:\/\/forums.swift.org\/t\/string-s-abi-and-utf-8\/17676) for its\npreferred encoding, we can provide this.\n",
    "title" : " Contiguous Strings\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-6475",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-6475",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0248",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "22869",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0248-string-gaps-missing-apis.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "75b250aa83e0b725b58688f7b3445c252ea6e805",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "String and related types are missing trivial and obvious functionality, much of\nwhich currently exists internally but has not been made API. We propose adding 9\nnew methods\/properties and 3 new code unit views.\n",
    "title" : " String Gaps and Missing APIs\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-9955",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-9955",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephencelis",
        "name" : "Stephen Celis"
      },
      {
        "link" : "https:\/\/github.com\/gregomni",
        "name" : "Greg Titus"
      }
    ],
    "id" : "SE-0249",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "26054",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0249-key-path-literal-function-expressions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "2986b4b77290bcf1dc4157ad983f327dfa4e7360",
    "status" : {
      "state" : ".implemented",
      "version" : "5.2"
    },
    "summary" : "This proposal introduces the ability to use the key path expression\n`\\Root.value` wherever functions of `(Root) -> Value` are allowed.\n",
    "title" : " Key Path Expressions as Functions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/allevato",
        "name" : "Tony Allevato"
      },
      {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      }
    ],
    "id" : "SE-0250",
    "link" : "0250-swift-style-guide-and-formatter.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "d73191a9fbd95ade6aba605657e9c2eec9286b98",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "We propose that the Swift project adopt a set of code style guidelines and\nprovide a formatting tool that lets users easily diagnose and update their code\naccording to those guidelines. These guidelines would *not* be mandatory for all\nprojects, but encouraged for Swift code to follow for general consistency.\n",
    "title" : " Swift Code Style Guidelines and Formatter\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      }
    ],
    "id" : "SE-0251",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23421",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "24136",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0251-simd-additions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "9b5e896eff783c80e6f07d0ee00ad6142396d11a",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "Early adopters of SIMD types and protocols have encountered a few missing things\nas they've started to write more code that uses them. In addition, there are\nsome features we punted out of the original review because we were up against a\nhard time deadline to which we would like to give further consideration.\n",
    "title" : " SIMD additions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0252",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23436",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0252-keypath-dynamic-member-lookup.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "b0ef216db582ff15084b4550e9bf7694df66556b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "This proposal attempts to enable stronger-typed version of the dynamic member\nlookup by extending functionality of an existing `@dynamicMemberLookup`\nattribute with key path based variants.\n",
    "title" : " Key Path Member Lookup\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rxwei",
        "name" : "Richard Wei"
      },
      {
        "link" : "https:\/\/github.com\/dan-zheng",
        "name" : "Dan Zheng"
      }
    ],
    "id" : "SE-0253",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "24299",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0253-callable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "c84e66ab01334a25dd4f677e0d28a6556e6978c1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.2"
    },
    "summary" : "This proposal introduces \"statically\"\n[callable](https:\/\/en.wikipedia.org\/wiki\/Callable_object) values to Swift.\nCallable values are values that define function-like behavior and can be called\nusing function call syntax. In contrast to dynamically callable values\nintroduced in\n[SE-0216](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0216-dynamic-callable.md),\nthis feature supports statically declared arities, argument labels, and\nparameter types, and is not constrained to primary type declarations.\n",
    "title" : " Callable values of user-defined nominal types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      }
    ],
    "id" : "SE-0254",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23358",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0254-static-subscripts.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "ca63840d4f6fdfc5abc8542268f2152bf757cc98",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "We propose allowing `static subscript` and, in classes, `class subscript`\ndeclarations. These could be used through either `TypeName[index]` or\n`TypeName.self[index]` and would have all of the capabilities you would expect\nof a subscript. We also propose extending dynamic member lookup to static\nproperties by using static subscripts.\n",
    "title" : " Static and class subscripts\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/nate-chandler",
        "name" : "Nate Chandler"
      }
    ],
    "id" : "SE-0255",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23251",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0255-omit-return.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "7e3cf214a8d4f57a441db491cdce18d8d04603d7",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "Swift provides a pleasant shorthand for short closures: if a closure contains\njust a single expression, that expression is implicitly returned--the `return`\nkeyword can be omitted. We should provide this shorthand for functions as well.\n",
    "title" : " Implicit returns from single-expression functions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0256",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23616",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0256-contiguous-collection.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "190d91e6e88f231763cb0c9e71dbc27c4d6c7361",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "This proposal introduces two new protocols: `ContiguousCollection`, which\nrefines `Collection`, and `MutableContiguousCollection`, which refines\n`MutableCollection`. Both provide guaranteed access to an underlying unsafe\nbuffer.\n",
    "title" : " Introduce {Mutable}ContiguousCollection protocol\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/nate-chandler",
        "name" : "Nate Chandler"
      },
      {
        "link" : "https:\/\/github.com\/anandabits",
        "name" : "Matthew Johnson"
      }
    ],
    "id" : "SE-0257",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "22714",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0257-elide-comma.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "e0717264003c3bfa20276a1c7698af9e3e10f3cb",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "Swift requires a semicolon \"`;`\" to separate statements unless those statements\nare separated by newlines, in which case the semicolon can be elided. Currently,\nSwift requires a comma \"`,`\" to separate expressions even when those statements\nare separated by newlines. We should ease this restriction, allowing the comma\nbetween two expressions to be elided when they are separated by a newline.\n",
    "title" : " Eliding commas from multiline expression lists\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0258",
    "link" : "0258-property-wrappers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "9f42f0867c96e2d2b8f156fcb72986e91cc26bfa",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "There are property implementation patterns that come up repeatedly. Rather than\nhardcode a fixed set of patterns into the compiler (as we have done for `lazy`\nand `@NSCopying`), we should provide a general \"property wrapper\" mechanism to\nallow these patterns to be defined as libraries.\n",
    "title" : " Property Wrappers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      }
    ],
    "id" : "SE-0259",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23839",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0259-approximately-equal.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "ff167fbb1b592c6fa176f9f2a63cd4665d56a807",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "The internet is full advice about what not to do when comparing floating-point\nvalues:\n",
    "title" : " Approximate Equality for Floating Point\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jrose-apple",
        "name" : "Jordan Rose"
      },
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      }
    ],
    "id" : "SE-0260",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "24185",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0260-library-evolution.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "fbd6bc472465ad2ed0e5662aa9bc0a7041f98081",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "One of Swift's goals is to be a good language for libraries with binary\ncompatibility concerns, such as those shipped as part of Apple's OSs. This\nincludes giving library authors the flexibility to add to their public\ninterface, and to change implementation details, without breaking binary\ncompatibility. At the same time, it's important that library authors be able to\nopt out of this flexibility in favor of performance.\n",
    "title" : " Library Evolution for Stable ABIs\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/anandabits",
        "name" : "Matthew Johnson"
      },
      {
        "link" : "https:\/\/github.com\/kylemacomber",
        "name" : "Kyle Macomber"
      }
    ],
    "id" : "SE-0261",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "26022",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0261-identifiable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "48fcc60f47c9aaddaaeedd2dbd8fac9858c562a9",
    "status" : {
      "state" : ".implemented",
      "version" : "5.1"
    },
    "summary" : "This proposal introduces an `Identifiable` protocol, a general concept that is\nbroadly useful— for diff algorithms, user interface libraries, and other generic\ncode—to correlate snapshots of the state of an entity in order to identify\nchanges. It is a fundamental notion that deserves representation in the standard\nlibrary.\n",
    "title" : " Identifiable Protocol\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0262",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "25314",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0262-demangle.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "447a02c7f975f24467a3db52088e8348d661c19a",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "Introduce a new standard library function, `demangle`, that takes a mangled\nSwift symbol, like `$sSS7cStringSSSPys4Int8VG_tcfC`, and output the human\nreadable Swift symbol, like `Swift.String.init(cString:\nSwift.UnsafePointer<Swift.Int8>) -> Swift.String`.\n",
    "title" : " Demangle Function\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Catfish-Man",
        "name" : "David Smith"
      }
    ],
    "id" : "SE-0263",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "26007",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "30106",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0263-string-uninitialized-initializer.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "826f27abe96b2ec03a990a7f5743d760f224f896",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "This proposal suggests a new initializer for `String` that provides access to a\nString's uninitialized storage buffer.\n",
    "title" : " Add a String Initializer with Access to Uninitialized Storage\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-10288",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-10288",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "https:\/\/github.com\/moiseev",
        "name" : "Max Moiseev"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0264",
    "link" : "0264-stdlib-preview-package.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "a95e3eec1c947744219e3cb11f4d80ab2fd226ac",
    "status" : {
      "state" : ".implemented",
      "version" : ""
    },
    "summary" : "We propose changing the Swift Evolution process to publish accepted proposals as\nindividual SwiftPM packages, as well as a `SwiftPreview` package that bundles\nthese proposal packages together. This group of packages will form the initial\nlanding spot for certain additions to the Swift standard library.\n",
    "title" : " Standard Library Preview Package\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0265",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "24296",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0265-offset-indexing-and-slicing.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "fcb605aee2164c031ca52d92165ada0828f8927f",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This proposal introduces `OffsetBound`, which can represent a position in a\ncollection specified as an offset from either the beginning or end of the\ncollection (i.e. the collection’s “bounds”). Corresponding APIs provide a more\nconvenient abstraction over indices. The goal is to alleviate an expressivity\ngap in collection APIs by providing easy and safe means to access elements,\nindices, and slices from such offsets.\n",
    "title" : " Offset-Based Access to Indices, Elements, and Slices\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/forums.swift.org\/u\/taylorswift",
        "name" : "Dianna Ma (taylorswift)"
      }
    ],
    "id" : "SE-0266",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "25696",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0266-synthesized-comparable-for-enumerations.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "ef075cb97b6b0755be1d2ef4eef293e952e2b8bd",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "[SE-185](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0185-synthesize-equatable-hashable.md)\nintroduced synthesized, opt-in `Equatable` and `Hashable` conformances for\neligible types. Their sibling protocol `Comparable` was left out at the time,\nsince it was less obvious what types ought to be eligible for a synthesized\n`Comparable` conformance and where a comparison order might be derived from.\nThis proposal seeks to allow users to opt-in to synthesized `Comparable`\nconformances for `enum` types without raw values or associated values not\nthemselves conforming to `Comparable`, a class of types which I believe make\nexcellent candidates for this feature. The synthesized comparison order would be\nbased on the declaration order of the `enum` cases, and then the lexicographic\ncomparison order of the associated values for an `enum` case tie.\n",
    "title" : " Synthesized Comparable conformance for enum types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/AnthonyLatsis",
        "name" : "Anthony Latsis"
      }
    ],
    "id" : "SE-0267",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23489",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0267-where-on-contextually-generic.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "ab3e411b6f39ddaedd99566a450814b974ad2e6a",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "This proposal aims to lift the restriction on attaching `where` clauses to\nmember declarations that can reference only outer generic parameters. Simply\nput, this means the `'where' clause cannot be attached` error will be relaxed\nfor most declarations nested inside generic contexts:\n",
    "title" : " where clauses on contextually generic declarations\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/theblixguy",
        "name" : "Suyash Srijan"
      }
    ],
    "id" : "SE-0268",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "26632",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0268-didset-semantics.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "782c01c1d9985cab5f2a48976eb02ae70ba5ce0e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "Introduce two changes to `didSet` semantics -\n",
    "title" : " Refine didSet Semantics\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-5982",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-5982",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jumhyn",
        "name" : "Frederick Kellison-Linn"
      }
    ],
    "id" : "SE-0269",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "23934",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0269-implicit-self-explicit-capture.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "272a4386ab14d7d1ebfb42c8df3f87938e19908d",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "Modify the rule that all uses of `self` in escaping closures must be explicit by\nallowing for implicit uses of `self` in situations where the user has already\nmade their intent explicit, or where strong reference cycles are otherwise\nunlikely to occur. There are two situations covered by this proposal. The first\nis when the user has explicitly captured `self` in the closure's capture list,\nso that the following would compile without error:\n",
    "title" : " Increase availability of implicit self in @escaping closures when reference cycles are unlikely to occur\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-10218",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-10218",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      },
      {
        "link" : "https:\/\/github.com\/jmschonfeld",
        "name" : "Jeremy Schonfeld"
      }
    ],
    "id" : "SE-0270",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "69766",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0270-rangeset-and-collection-operations.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "f188ba482a9e7050dc955f2adf167f28fa6f679b",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "We can use a `Range<Index>` to refer to a group of consecutive positions in a\ncollection, but the standard library doesn't currently provide a way to refer to\ndiscontiguous positions in an arbitrary collection. I propose the addition of a\n`RangeSet` type that can represent any number of positions, along with\ncollection algorithms that operate on those positions.\n",
    "title" : " Add Collection Operations on Noncontiguous Elements\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      {
        "link" : "https:\/\/github.com\/aciidb0mb3r",
        "name" : "Ankit Aggarwal"
      }
    ],
    "id" : "SE-0271",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2381",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2510",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2520",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2607",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0271-package-manager-resources.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Buegling"
    },
    "sha" : "f83bbad6efcfdba7030dff660a4b283751a6fbb2",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "Packages should be able to contain images, data files, and other resources\nneeded at runtime. This proposal describes SwiftPM support for specifying such\npackage resources, and introduces a consistent way of accessing them from the\nsource code in the package.\n",
    "title" : " Package Manager Resources\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/bscothern",
        "name" : "Braden Scothern"
      },
      {
        "link" : "https:\/\/github.com\/ddunbar",
        "name" : "Daniel Dunbar"
      },
      {
        "link" : "https:\/\/github.com\/FranzBusch",
        "name" : "Franz Busch"
      }
    ],
    "id" : "SE-0272",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2509",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2511",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2514",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2588",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0272-swiftpm-binary-dependencies.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Bügling"
    },
    "sha" : "993b70a5e694fef8abc211678c3cf2ca665cbcda",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "SwiftPM currently supports source-only packages for several languages, and with\na very proscriptive build model which considerably limits exactly how the\ncompilation of the source can be performed. While this makes packages consistent\nand to some extent \"simple\", it limits their use in several important cases:\n",
    "title" : " Package Manager Binary Dependencies\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0273",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2428",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2598",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0273-swiftpm-conditional-target-dependencies.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Buegling"
    },
    "sha" : "720d6bc9f6e36201709d46cefdabd4c007e82425",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "This proposal introduces the ability for Swift package authors to conditionalize\ntarget dependencies on platform and configuration with a similar syntax to the\none introduced in [SE-0238](0238-package-manager-build-settings.md) for build\nsettings. This gives developers more flexibility to describe complex target\ndependencies to support multiple platforms or different configuration\nenvironments.\n",
    "title" : " Package Manager Conditional Target Dependencies\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      },
      {
        "link" : "https:\/\/github.com\/davedelong",
        "name" : "Dave DeLong"
      }
    ],
    "id" : "SE-0274",
    "link" : "0274-magic-file.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift\/",
      "name" : "Ben Cohen"
    },
    "sha" : "68a70169514d73063bc175e4ac37d1fe6927b4c4",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "Today, `#file` evaluates to a string literal containing the full path to the\ncurrent source file. We propose to instead have it evaluate to a human-readable\nstring containing the filename and module name, while preserving the existing\nbehavior in a new `#filePath` expression.\n",
    "title" : " Concise magic file names\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/adellibovi",
        "name" : "Alfredo Delli Bovi"
      }
    ],
    "id" : "SE-0275",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "28966",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0275-allow-more-characters-like-whitespaces-and-punctuations-for-escaped-identifiers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "0129be339a2fbd3dd64865494bd35839601e6213",
    "status" : {
      "state" : ".rejected"
    },
    "summary" : "Swift has a beautiful concise yet expressive syntax. As part of that, escaped\nidentifiers are adopted to allow usage of reserved keywords. This proposal wants\nto extend the character allowance for escaped identifiers with more Unicode\nscalars, like whitespace and punctuation.\n",
    "title" : " Allow more characters (like whitespaces and punctuations) for escaped identifiers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/owenv",
        "name" : "Owen Voorhees"
      }
    ],
    "id" : "SE-0276",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "27776",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0276-multi-pattern-catch-clauses.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "48bb92369692e9d4f5634e943a6f023fd887f7a1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "Currently, each catch clause in a do-catch statement may only contain a single\npattern and where clause. This is inconsistent with the behavior of cases in\nswitch statements, which provide similar functionality. It also makes some error\nhandling patterns awkward to express. This proposal extends the grammar of catch\nclauses to support a comma-separated list of patterns (with optional where\nclauses), resolving this inconsistency.\n",
    "title" : " Multi-Pattern Catch Clauses\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/stephentyrone",
        "name" : "Stephen Canon"
      }
    ],
    "id" : "SE-0277",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "30130",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0277-float16.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "83e40bf265804296abd9b9fe1d7c5f5b8c293d7e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "Introduce the `Float16` type conforming to the `BinaryFloatingPoint` and\n`SIMDScalar` protocols, binding the IEEE 754 *binary16* format (aka *float16*,\n*half-precision*, or *half*), and bridged by the compiler to the C `_Float16`\ntype.\n",
    "title" : " Float16\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hartbit",
        "name" : "David Hart"
      }
    ],
    "id" : "SE-0278",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "2535",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "2606",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0278-package-manager-localized-resources.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/neonichu",
      "name" : "Boris Buegling"
    },
    "sha" : "5f253cdbf3b488bc3cd3fdc0a72cfdb0af757229",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "This proposal builds on top of the [Package Manager\nResources](0271-package-manager-resources.md) proposal to allow defining\nlocalized versions of resources in the SwiftPM manifest and have them\nautomatically accessible at runtime using the same APIs.\n",
    "title" : " Package Manager Localized Resources\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/kylemacomber",
        "name" : "Kyle Macomber"
      },
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      },
      {
        "link" : "https:\/\/github.com\/douggregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      }
    ],
    "id" : "SE-0279",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "31052",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0279-multiple-trailing-closures.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "6bb53f18ebacdf15b42304082491b8f5131983fe",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "",
    "title" : " Multiple Trailing Closures\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/theblixguy",
        "name" : "Suyash Srijan"
      }
    ],
    "id" : "SE-0280",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "28916",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0280-enum-cases-as-protocol-witnesses.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "b837d99485ae365cb58b73cde43e2dd76744f8ff",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "The aim of this proposal is to lift an existing restriction, which is that enum\ncases cannot participate in protocol witness matching.\n",
    "title" : " Enum cases as protocol witnesses\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-3170",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-3170",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      },
      {
        "link" : "https:\/\/github.com\/nate-chandler",
        "name" : "Nate Chandler"
      },
      {
        "link" : "https:\/\/github.com\/ricketson",
        "name" : "Matt Ricketson"
      }
    ],
    "id" : "SE-0281",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "30693",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0281-main-attribute.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "204ff7e2ba213a6bb590afaaa4c33d0f926fdeaf",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "A Swift language feature for designating a type as the entry point for beginning\nprogram execution. Instead of writing top-level code, users can use the `@main`\nattribute on a single type. Libraries and frameworks can then provide custom\nentry-point behavior through protocols or class inheritance.\n",
    "title" : " @main: Type-Based Program Entry Points\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lorentey",
        "name" : "Karoy Lorentey"
      }
    ],
    "id" : "SE-0282",
    "link" : "0282-atomics.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "77a5489906b6dca72dbaf9677b90d9b355ef7852",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "This proposal adopts a C\/C++-style weak concurrency memory model in Swift,\ndescribing how Swift code interoperates with concurrency primitives imported\nfrom C.\n",
    "title" : " Clarify the Swift memory consistency model ⚛︎\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-9144",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-9144",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0283",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "28833",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0283-tuples-are-equatable-comparable-hashable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "21526400bbc58377ccb28380572ba8bcdbf2a38a",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Introduce `Equatable`, `Comparable`, and `Hashable` conformance for all tuples\nwhose elements are themselves `Equatable`, `Comparable`, and `Hashable`.\n",
    "title" : " Tuples Conform to Equatable, Comparable, and Hashable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/owenv",
        "name" : "Owen Voorhees"
      }
    ],
    "id" : "SE-0284",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "29735",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0284-multiple-variadic-parameters.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "3ec42bab994c0139e0356a165ead5836af1a1d78",
    "status" : {
      "state" : ".implemented",
      "version" : "5.4"
    },
    "summary" : "Currently, variadic parameters in Swift are subject to two main restrictions:\n",
    "title" : " Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      }
    ],
    "id" : "SE-0285",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "32700",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0285-ease-pound-file-transition.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "0bcfa20a2cbb75368ef331fc1ef004312578921b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "In\n[SE-0274](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0274-magic-file.md),\nthe core team accepted a proposal to change the behavior of `#file`. This\nproposal modifies that plan to transition into new behavior more gradually,\ntreating it as a source break requiring a new language version mode to fully\nadopt.\n",
    "title" : " Ease the transition to concise magic file strings\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0286",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "33092",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0286-forward-scan-trailing-closures.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "4399a100cfc0a3f7e4f3b09f579513020c586041",
    "status" : {
      "state" : ".implemented",
      "version" : "5.3"
    },
    "summary" : "[SE-0279 \"Multiple Trailing\nClosures\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0279-multiple-trailing-closures.md)\nthreaded the needle between getting the syntax we wanted for multiple trailing\nclosures without breaking source compatibility. One aspect of that compromise\nwas to extend (rather than replace) the existing rule for matching a trailing\nclosure to a parameter by scanning *backward* from the end of the parameter\nlist.\n",
    "title" : " Forward-scan matching for trailing closures\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jumhyn",
        "name" : "Frederick Kellison-Linn"
      }
    ],
    "id" : "SE-0287",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "31679",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0287-implicit-member-chains.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "27fd9da22c71185dfe649d0139ca632c231e1576",
    "status" : {
      "state" : ".implemented",
      "version" : "5.4"
    },
    "summary" : "When the type of an expression is implied by the context, Swift allows\ndevelopers to use what is formally referred to as an \"implicit member\nexpression,\" sometimes referred to as \"leading dot syntax\":\n",
    "title" : " Extend implicit member syntax to cover chains of member references\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/dingobye",
        "name" : "Ding Ye"
      }
    ],
    "id" : "SE-0288",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "24766",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0288-binaryinteger-ispower.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "2dbcbd23884c50930eca3c1cbb0993761230c9af",
    "status" : {
      "state" : ".previewing"
    },
    "summary" : "Checking some mathematical properties of integers (e.g. parity, divisibility,\netc.) is widely used in scientific and engineering applications. Swift brings a\nlot of convenience when performing such checks, thanks to the relevant methods\n(e.g. `isMultiple(of:)`) provided by the standard library. However there are\nstill some other cases not yet supported. One of those useful checks that are\ncurrently missing is to tell if an integer is power of another, of which the\nimplementation is non-trivial. Apart from inconvenience, user-implemented code\ncan bring inefficiency, poor readability, and even incorrectness. To address\nthis problem, this proposal would like to add a public API `isPower(of:)`, as an\nextension method, to the `BinaryInteger` protocol.\n",
    "title" : " Adding isPower(of:) to BinaryInteger\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0289",
    "link" : "0289-result-builders.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "a0313d6e0087fbddf18bdc8f2ee90fb1b210ad9d",
    "status" : {
      "state" : ".implemented",
      "version" : "5.4"
    },
    "summary" : "This proposal describes *result builders*, a new feature which allows certain\nfunctions (specially-annotated, often via context) to implicitly build up a\nresult value from a sequence of components.\n",
    "title" : " Result builders\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rockbruno",
        "name" : "Bruno Rocha"
      }
    ],
    "id" : "SE-0290",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "33932",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0290-negative-availability.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "965167c85755a1cc2e7325a3f9085c096f2bf275",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "Swift historically supported the `#available` condition to check if a specific\nsymbol **is** available for usage, but not the opposite. In this proposal, we'll\npresent cases where checking for the **unavailability** of something is\nnecessary, the ugly workaround needed to achieve it today and how a new\n`#unavailable` condition can fix it.\n",
    "title" : " Unavailability Condition\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Bügling"
      },
      {
        "link" : "https:\/\/github.com\/yim-lee",
        "name" : "Yim Lee"
      },
      {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      }
    ],
    "id" : "SE-0291",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3030",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0291-package-collections.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "6bcce67935453080fb7f266a17b6c5243b969109",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "This is a proposal for adding support for **Package Collections** to SwiftPM. A\npackage collection is a curated list of packages and associated metadata which\nmakes it easier to discover an existing package for a particular use case.\nSwiftPM will allow users to subscribe to these collections, search them via the\n`swift package-collection` command-line interface, and will make their contents\naccessible to any clients of libSwiftPM. This proposal is focused on the shape\nof the command-line interface and the format of configuration data related to\npackage collections.\n",
    "title" : " Package Collections\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/clarkbw",
        "name" : "Bryan Clark"
      },
      {
        "link" : "https:\/\/github.com\/whitneyimura",
        "name" : "Whitney Imura"
      },
      {
        "link" : "https:\/\/github.com\/mattt",
        "name" : "Mattt Zmuda"
      }
    ],
    "id" : "SE-0292",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3023",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0292-package-registry-service.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "9cfafb083233d26024562eec621e905b92d871d4",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Swift Package Manager downloads dependencies using Git. Our proposal defines a\nstandard web service interface that it can also use to download dependencies\nfrom a package registry.\n",
    "title" : " Package Registry Service\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/filip-sakel",
        "name" : "Filip Sakel"
      }
    ],
    "id" : "SE-0293",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "34272",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "36344",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0293-extend-property-wrappers-to-function-and-closure-parameters.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "2aec32f6cd2f5b17edd3fbf6859f063655b03dc1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Property Wrappers were [introduced in\nSwift 5.1](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0258-property-wrappers.md),\nand have since become a popular mechanism for abstracting away common accessor\npatterns for properties. Currently, applying a property wrapper is solely\npermitted on local variables and type properties. However, with increasing\nadoption, demand for extending *where* property wrappers can be applied has\nemerged. This proposal aims to extend property wrappers to function and closure\nparameters.\n",
    "title" : " Extend Property Wrappers to Function and Closure Parameters\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      }
    ],
    "id" : "SE-0294",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3045",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0294-package-executable-targets.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "31aa5593b712e6d31901d5540bb84d7aed6b6378",
    "status" : {
      "state" : ".implemented",
      "version" : "5.4"
    },
    "summary" : "This proposal lets Swift Package authors declare targets as executable in the\npackage manifest. This replaces the current approach of inferring executability\nbased on the presence of a source file with the base name `main` at the top\nlevel of the target source directory.\n",
    "title" : " Declaring executable targets in Package Manifests\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-13924",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-13924",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/drexin",
        "name" : "Dario Rexin"
      }
    ],
    "id" : "SE-0295",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "34855",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0295-codable-synthesis-for-enums-with-associated-values.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "6bbe546b9db8c1573de332140872b77da89a39d5",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Codable was introduced in\n[SE-0166](https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0166-swift-archival-serialization.md)\nwith support for synthesizing `Encodable` and `Decodable` conformance for\n`class` and `struct` types, that only contain values that also conform to the\nrespective protocols.\n",
    "title" : " Codable synthesis for enums with associated values\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0296",
    "link" : "0296-async-await.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "81ed1153c629423373a5425d96024bff9bad1989",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Modern Swift development involves a lot of asynchronous (or \"async\") programming\nusing closures and completion handlers, but these APIs are hard to use. This\ngets particularly problematic when many asynchronous operations are used, error\nhandling is required, or control flow between asynchronous calls gets\ncomplicated. This proposal describes a language extension to make this a lot\nmore natural and less error prone.\n",
    "title" : " Async\/await\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0297",
    "link" : "0297-concurrency-objc.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/lattner",
      "name" : "Chris Lattner"
    },
    "sha" : "a0caa5de14189ec064f2c0bb6404af675374cb31",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Swift's concurrency feature involves asynchronous functions and actors. While\nObjective-C does not have corresponding language features, asynchronous APIs are\ncommon in Objective-C, expressed manually through the use of completion\nhandlers. This proposal provides bridging between Swift's concurrency features\n(e.g., `async` functions) and the convention-based expression of asynchronous\nfunctions in Objective-C. It is intended to allow the wealth of existing\nasynchronous Objective-C APIs to be immediately usable with Swift's concurrency\nmodel.\n",
    "title" : " Concurrency Interoperability with Objective-C\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      },
      {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      }
    ],
    "id" : "SE-0298",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "35224",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0298-asyncsequence.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "3f491cafb410c75f64f3284554120071fea10f48",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Swift's\n[async\/await](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0296-async-await.md)\nfeature provides an intuitive, built-in way to write and use functions that\nreturn a single value at some future point in time. We propose building on top\nof this feature to create an intuitive, built-in way to write and use functions\nthat return many values over time.\n",
    "title" : " Async\/Await: Sequences\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      },
      {
        "link" : "https:\/\/github.com\/sl",
        "name" : "Sam Lazarus"
      },
      {
        "link" : "https:\/\/github.com\/ricketson",
        "name" : "Matt Ricketson"
      }
    ],
    "id" : "SE-0299",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "34523",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0299-extend-generic-static-member-lookup.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "a5896abceedf447157e21e7982541ce864b9a19f",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Using static member declarations to provide semantic names for commonly used\nvalues which can then be accessed via leading dot syntax is an important tool in\nAPI design, reducing type repetition and improving call-site legibility.\nCurrently, when a parameter is generic, there is no effective way to take\nadvantage of this syntax. This proposal aims to relax restrictions on accessing\nstatic members on protocols to afford the same call-site legibility to generic\nAPIs.\n",
    "title" : " Extending Static Member Lookup in Generic Contexts\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad Malawski"
      }
    ],
    "id" : "SE-0300",
    "link" : "0300-continuation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "39abd0ecb12770c47e8e567b42b4a0d7194879e6",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Asynchronous Swift code needs to be able to work with existing synchronous code\nthat uses techniques such as completion callbacks and delegate methods to\nrespond to events. Asynchronous tasks can suspend themselves on\n**continuations** which synchronous code can then capture and invoke to resume\nthe task in response to an event.\n",
    "title" : " Continuations for interfacing async tasks with synchronous code\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/owenv",
        "name" : "Owen Voorhees"
      }
    ],
    "id" : "SE-0301",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3034",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0301-package-editing-commands.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "a2f1ac6b6c4b987b762eabfc19a9439a5cf82557",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Because Swift package manifests are written in Swift using the\nPackageDescription API, it is difficult to automate common tasks like adding a\nnew product, target, or dependency. This proposal introduces new `swift package`\nsubcommands to perform some common editing tasks which can streamline users'\nworkflows and enable new higher-level tools.\n",
    "title" : " Package Editor Commands\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      {
        "link" : "https:\/\/github.com\/douggregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0302",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "35264",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0302-concurrent-value-and-concurrent-closures.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "a0bb795637cbd02d023b531e2c017b970b20004b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "A key goal of the Swift Concurrency effort is to “provide a mechanism for\nisolating state in concurrent programs to eliminate data races.” Such a\nmechanism will be a major progression for widely used programming languages —\nmost of them provide concurrent programming abstractions in a way that subjects\nprogrammers to a wide range of bugs, including race conditions, deadlocks and\nother problems.\n",
    "title" : " Sendable and @Sendable closures\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      },
      {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      }
    ],
    "id" : "SE-0303",
    "link" : "0303-swiftpm-extensible-build-tools.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "c8b4af215a3e4f8db8dfca4f666af0bb4d8dc963",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "This is a proposal for extensible build tools support in Swift Package Manager.\nThe initial set of functionality is intentionally basic, and focuses on a\ngeneral way of extending the build command graph through plugins.\n",
    "title" : " Package Manager Extensible Build Tools\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad Malawski"
      }
    ],
    "id" : "SE-0304",
    "link" : "0304-structured-concurrency.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "7ead7e314056154bda242879f36fd5de7ca8b8a8",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "[`async`\/`await`](0296-async-await.md) is a language mechanism for writing\nnatural, efficient asynchronous code. Asynchronous functions (introduced with\n`async`) can give up the thread on which they are executing at any given\nsuspension point (marked with `await`), which is necessary for building\nhighly-concurrent systems.\n",
    "title" : " Structured concurrency\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      },
      {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tom Doron"
      }
    ],
    "id" : "SE-0305",
    "link" : "0305-swiftpm-binary-target-improvements.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "eefe754cc963441e395c5570bb35f6e1c4e76827",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "This proposal extends SwiftPM binary targets to also support other kinds of\nprebuilt artifacts, such as command line tools. It does not in and of itself add\nsupport for non-Darwin binary libraries, although the proposed improvements\ncould be a step towards such support.\n",
    "title" : " Package Manager Binary Target Improvements\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad Malawski"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0306",
    "link" : "0306-actors.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "9fcfec964476c99d6f8b208c2b5a000400f47565",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "The Swift concurrency model intends to provide a safe programming model that\nstatically detects [data\nraces](https:\/\/en.wikipedia.org\/wiki\/Race_condition#Data_race) and other common\nconcurrency bugs. The [Structured\nConcurrency](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0304-structured-concurrency.md)\nproposal introduces a way to define concurrent tasks and provides data-race\nsafety for functions and closures. This model is suitable for a number of common\ndesign patterns, including things like parallel maps and concurrent callback\npatterns, but is limited to working with state that is captured by closures.\n",
    "title" : " Actors\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0307",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "34401",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0307-allow-interchangeable-use-of-double-cgfloat-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "1d58e9c5cb09893a4fb5626bd4a23bcc36e256b1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "I propose to extend the language and allow Double and CGFloat types to be used\ninterchangeably by means of transparently converting one type into the other as\na sort of retroactive typealias between these two types. This is a *narrowly*\ndefined implicit conversion intended to be part of the *existing family* of\nimplicit conversions (including NSType \\<=\\> CFType conversions) supported by\nSwift to strengthen Objective-C and Swift interoperability. The only difference\nbetween the proposed conversion and existing ones is related to the fact that\ninterchangeability implies both narrowing conversion (`Double` -\\> `CGFloat`)\nand widening one (`CGFloat` -\\> `Double`) on 32-bit platforms. This proposal is\nnot about generalizing support for implicit conversions to the language.\n",
    "title" : " Allow interchangeable use of CGFloat and Double types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rintaro",
        "name" : "Rintaro Ishizaki"
      }
    ],
    "id" : "SE-0308",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "35097",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0308-postfix-if-config-expressions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "c086807efba2785c27d74282ae5ded73cb7eff9a",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Swift has conditional compilation block `#if ... #endif` which allows code to be\nconditionally compiled depending on the value of one or more compilation\nconditions. Currently, unlike `#if` in C family languages, the body of each\nclause must surround complete statements. However, in some cases, especially in\nresult builder contexts, demand for applying `#if` to partial expressions has\nemerged. This proposal expands `#if ... #endif` to be able to surround postfix\nmember expressions.\n",
    "title" : " if for postfix member expressions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/AnthonyLatsis",
        "name" : "Anthony Latsis"
      },
      {
        "link" : "https:\/\/github.com\/filip-sakel",
        "name" : "Filip Sakel"
      },
      {
        "link" : "https:\/\/github.com\/theblixguy",
        "name" : "Suyash Srijan"
      }
    ],
    "id" : "SE-0309",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "33767",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "39492",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "41198",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0309-unlock-existential-types-for-all-protocols.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "39d7025c20e1912b2eaef968e0a4fa93b7ceec39",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Swift allows one to use a protocol as a type when its *requirements* meet a\nrather unintuitive list of criteria, among which is the absence of associated\ntype requirements, and emits the following error otherwise: `Protocol can only\nbe used as a generic constraint because it has 'Self' or associated type\nrequirements`. Our objective is to *alleviate* this limitation so as to impact\nonly the ability to access certain members (instead of preemptively sealing off\nthe entire protocol interface), and adjust the specified criteria to further\nreduce the scope of the restriction.\n",
    "title" : " Unlock existentials for all protocols\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      }
    ],
    "id" : "SE-0310",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "36430",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "36670",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "37225",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0310-effectful-readonly-properties.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "c8a87f070b923b649825c5d279c015fa86787036",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "Nominal types such as classes, structs, and enums in Swift support [computed\nproperties](https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/Properties.html) and\n[subscripts](https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/Subscripts.html),\nwhich are members of the type that invoke programmer-specified computations when\ngetting or setting them. The recently accepted proposal\n[SE-0296](0296-async-await.md) introduced asynchronous functions via `async`, in\nconjunction with `await`, but did not specify that computed properties or\nsubscripts can support effects like asynchrony. Furthermore, to take full\nadvantage of `async` properties, the ability to specify that a property `throws`\nis also important. This document aims to partially fill in this gap by proposing\na syntax and semantics for effectful read-only computed properties and\nsubscripts.\n",
    "title" : " Effectful Read-only Properties\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      }
    ],
    "id" : "SE-0311",
    "link" : "0311-task-locals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "f75964704121e2c58cd9058c84bb6661c0b7e673",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "With Swift embracing asynchronous functions and actors, asynchronous code will\nbe everywhere.\n",
    "title" : " Task Local Values\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/timvermeulen",
        "name" : "Tim Vermeulen"
      }
    ],
    "id" : "SE-0312",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "36851",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0312-indexed-and-enumerated-zip-collections.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "7a0261c0c2dc54d65232fabab7f170a8cfa7c159",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This proposal aims to fix the lack of `Collection` conformance of the sequences\nreturned by `zip(_:_:)` and `enumerated()`, preventing them from being used in a\ncontext that requires a `Collection`. Also included is the addition of the\n`indexed()` method on `Collection` as a more ergonomic, efficient, and correct\nalternative to `c.enumerated()` and `zip(c.indices, c)`.\n",
    "title" : " Add indexed() and Collection conformances for enumerated() and zip(_:_:)\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      }
    ],
    "id" : "SE-0313",
    "link" : "0313-actor-isolation-control.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "e26608bc28f2f3234a8509a8d22a75a48f228277",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "The [Swift actors\nproposal](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md)\nintroduces the notion of *actor-isolated* declarations, which are declarations\nthat can safely access an actor's isolated state. In that proposal, all instance\nmethods, instance properties, and instance subscripts on an actor type are\nactor-isolated, and they can synchronously use those declarations on `self`.\nThis proposal generalizes the notion of actor isolation to allow better control,\nincluding the ability to have actor-isolated declarations that aren't part of an\nactor type (e.g., they can be non-member functions) and have non-isolated\ndeclarations that are instance members of an actor type (e.g., because they are\nbased on immutable, non-isolated actor state). This allows better abstraction of\nthe use of actors, additional actor operations that are otherwise not\nexpressible safely in the system, and enables some conformances to existing,\nsynchronous protocols.\n",
    "title" : " Improved control over actor isolation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      },
      {
        "link" : "https:\/\/github.com\/parkera",
        "name" : "Tony Parker"
      },
      {
        "link" : "https:\/\/github.com\/bendjones",
        "name" : "Ben D. Jones"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0314",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "36921",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0314-async-stream.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "9906ef3d64e474bb80f2f257e0232fdc0e373620",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "The continuation types added in\n[SE-0300](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0300-continuation.md)\nact as adaptors for synchronous code that signals completion by calling a\ndelegate method or callback function. For code that instead yields multiple\nvalues over time, this proposal adds new types to support implementing an\n`AsyncSequence` interface.\n",
    "title" : " AsyncStream and AsyncThrowingStream\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jumhyn",
        "name" : "Frederick Kellison-Linn"
      }
    ],
    "id" : "SE-0315",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "36740",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0315-placeholder-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "a52173e1f424de9abbf74c390a937920341e2dd3",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "When Swift's type inference is unable to work out the type of a particular\nexpression, it requires the programmer to provide the necessary type context\nexplicitly. However, all mechanisms for doing this require the user to write out\nthe entire type signature, even if only one portion of that type is actually\nneeded by the compiler. E.g.,\n",
    "title" : " Type placeholders (formerly, \"Placeholder types\")\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0316",
    "link" : "0316-global-actors.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "2b135ba136a4370107e95d0a38911946ffac9866",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "[Actors](0306-actors.md) are a new kind of reference type that protect their\ninstance data from concurrent access. Swift actors achieve this with *actor\nisolation*, which ensures (at compile time) that all accesses to that instance\ndata go through a synchronization mechanism that serializes execution.\n",
    "title" : " Global actors\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      }
    ],
    "id" : "SE-0317",
    "link" : "0317-async-let.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "1416501ce1520497fdeaa2fc2e726a2e2d90aa9e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "[Structured concurrency](0304-structured-concurrency.md) provides a paradigm for\nspawning concurrent *child tasks* in scoped *task groups*, establishing a\nwell-defined hierarchy of tasks which allows for cancellation, error\npropagation, priority management, and other tricky details of concurrency\nmanagement to be handled transparently.\n",
    "title" : " async let bindings\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/miggs597",
        "name" : "Miguel Perez"
      }
    ],
    "id" : "SE-0318",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3514",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0318-package-creation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "1ad4a894a549a40e273a9cbc0956037c896fe8d2",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "In order to clearly separate the roles of transforming an existing directory of\nsource files into a Swift package, from creating a new package from scratch we\npropose adding a new command `swift package create`. `swift package init` will\ncontinue to exist as is, but will be updated to focus on the former, while the\nnew `swift package create` will focus on the latter.\n",
    "title" : " Package Creation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/kylemacomber",
        "name" : "Kyle Macomber"
      }
    ],
    "id" : "SE-0319",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "38103",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0319-never-identifiable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "18ff5962d1c1290a11358c0fa4c8764f0f2c3f99",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5"
    },
    "summary" : "This proposal conforms `Never` to `Identifiable` to make it usable as a \"bottom\ntype\" for generic constraints that require `Identifiable`.\n",
    "title" : " Conform Never to Identifiable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/mortenbekditlevsen",
        "name" : "Morten Bek Ditlevsen"
      }
    ],
    "id" : "SE-0320",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "34458",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0320-codingkeyrepresentable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "cc8d6f1191e4d46a31b698f9d88b8a1823140411",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "The current conformance of Swift's `Dictionary` to the `Codable` protocols has a\nsomewhat-surprising limitation in that dictionaries whose key type is not\n`String` or `Int` (values directly representable in `CodingKey` types) encode\nnot as `KeyedContainer`s but as `UnkeyedContainer`s. This behavior has caused\nmuch confusion for users and I would like to offer a way to improve the\nsituation.\n",
    "title" : " Allow coding of non String \/ Int keyed Dictionary into a KeyedContainer\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/whitneyimura",
        "name" : "Whitney Imura"
      },
      {
        "link" : "https:\/\/github.com\/mattt",
        "name" : "Mattt Zmuda"
      }
    ],
    "id" : "SE-0321",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3671",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0321-package-registry-publish.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "68d324463a3b781d183eeb07ed583549f47a0809",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "The [package registry\nservice](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0292-package-registry-service.md \"Package Registry Service\")\ndefines endpoints for fetching packages.\n",
    "title" : " Package Registry Service - Publish Endpoint\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/grynspan",
        "name" : "Jonathan Grynspan"
      }
    ],
    "id" : "SE-0322",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "37666",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0322-temporary-buffers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "05be569820c8aa06867a90e25b7ce150c9cfd21e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "This proposal introduces new Standard Library functions for manipulating\ntemporary buffers that are preferentially allocated on the stack instead of the\nheap.\n",
    "title" : " Temporary uninitialized buffers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/etcwilde",
        "name" : "Evan Wilde"
      }
    ],
    "id" : "SE-0323",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "38604",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0323-async-main-semantics.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "c3349c342401c79b144fe3c296c4e1eb0c667b59",
    "status" : {
      "state" : ".implemented",
      "version" : "5.5.2"
    },
    "summary" : "Program setup generally occurs in the main function where developers expect to\nperform operations before other parts of the program are run. Objective-C, C++,\nand C have initializers that are run before the main entrypoint runs and can\ninteract with Swift's concurrency systems in ways that are hard to reason about.\nIn the Swift concurrency model, the developer-written asynchronous main function\nis wrapped in a task and enqueued on the main queue when the main entrypoint is\nrun. If an initializer inserts a task on the main queue, that task may be\nexecuted before the main function, so setup is performed after initializer tasks\nare run.\n",
    "title" : " Asynchronous Main Semantics\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      },
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0324",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "37956",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0324-c-lang-pointer-arg-conversion.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "bb1978950efb94299fc853fd0d8dd1235ec0ca5d",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "C has special rules for pointer aliasing, for example allowing `char *` to alias\nother pointer types, and allowing pointers to signed and unsigned types to\nalias. The usability of some C APIs relies on the ability to easily cast\npointers within the boundaries of those rules. Swift generally disallows typed\npointer conversion. See [SE-0107 UnsafeRawPointer\nAPI](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0107-unsaferawpointer.md).\nTeaching the Swift compiler to allow pointer conversion within the rules of C\nwhen invoking functions imported from C headers will dramatically improve\ninteroperability with no negative impact on type safety.\n",
    "title" : " Relax diagnostics for pointer arguments to C functions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-10246",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-10246",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      }
    ],
    "id" : "SE-0325",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3758",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0325-swiftpm-additional-plugin-apis.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "2cb066de8db89b83dff7e5de03ff44de10480a43",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "[SE-0303](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0303-swiftpm-extensible-build-tools.md)\nintroduced the ability to define *build tool plugins* in SwiftPM, allowing\ncustom tools to be invoked while building a package. In support of this, SE-0303\nintroduced a minimal initial API through which plugins can access information\nabout the target for which they are invoked.\n",
    "title" : " Additional Package Plugin APIs\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0326",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "38577",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "40397",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "41730",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0326-extending-multi-statement-closure-inference.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "0ed3efe8f0dbeae15294a6eb6bb5f210e42a6ccd",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "I propose to improve inference behavior of multi-statement closures by enabling\nparameter and result type inference from the closure body. This will make type\ninference less surprising for developers, and remove the existing behavior cliff\nwhere adding one more expression or statement to a closure could result in a\ncompilation failure.\n",
    "title" : " Enable multi-statement closure parameter\/result type inference\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      },
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad Malawski"
      }
    ],
    "id" : "SE-0327",
    "link" : "0327-actor-initializers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "12c686b3840c29da84506f28675fd28b57601dfb",
    "status" : {
      "state" : ".implemented",
      "version" : "5.10"
    },
    "summary" : "Actors are a relatively new nominal type in Swift that provides data-race safety\nfor its mutable state. The protection is achieved by *isolating* the mutable\nstate of each actor instance to at most one task at a time. The proposal that\nintroduced actors ([SE-0306](0306-actors.md)) is quite large and detailed, but\nmisses some of the subtle aspects of creating and destroying an actor's isolated\nstate. This proposal aims to shore up the definition of an actor, to clarify\n*when* the isolation of the data begins and ends for an actor instance, along\nwith *what* can be done inside the body of an actor's `init` and `deinit`\ndeclarations.\n",
    "title" : " On Actors and Initialization\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/willtunnels",
        "name" : "Benjamin Driscoll"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0328",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "38392",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0328-structural-opaque-result-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "650dfc867a9d624a2630b71986b6afe149878039",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "An [opaque result\ntype](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0244-opaque-result-types.md)\nmay be used as the result type of a function, the type of a variable, or the\nresult type of a subscript. In all cases, the opaque result type must be the\nentire type. This proposal recommends lifting that restriction and allowing\nopaque result types in \"structural\" positions.\n",
    "title" : " Structural opaque result types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      }
    ],
    "id" : "SE-0329",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40609",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0329-clock-instant-duration.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "743e21a61d34a7c6b240bc82418c7340ee269a9e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "The concepts of time can be broken down into three distinct parts:\n",
    "title" : " Clock, Instant, and Duration\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/johnno1962",
        "name" : "John Holdsworth"
      }
    ],
    "id" : "SE-0330",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "19347",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0330-collection-conditionals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "ea6892efaff901c3e0a858860f3e21e4cf7e4ac8",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This is a lightning proposal to extend the existing Swift language slightly to\nallow `#if` conditional inclusion of elements in array and dictionary literals.\nFor example:\n",
    "title" : " Conditionals in Collections\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-8743",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-8743",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      }
    ],
    "id" : "SE-0331",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "39218",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0331-remove-sendable-from-unsafepointer.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "c392413e480d346e5ebca6f32684f5d75bdc26a9",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "[SE-0302](0302-concurrent-value-and-concurrent-closures.md) introduced the\n`Sendable` protocol, including `Sendable` requirements for various language\nconstructs, conformances of various standard library types to `Sendable`, and\ninference rules for non-public types to implicitly conform to `Sendable`.\nSE-0302 states that the unsafe pointer types conform to `Sendable`:\n",
    "title" : " Remove Sendable conformance from unsafe pointer types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/abertelrud",
        "name" : "Anders Bertelrud"
      }
    ],
    "id" : "SE-0332",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "3855",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0332-swiftpm-command-plugins.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "91de701c7c9679cbd03990dc2bfc72ca13894d77",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "[SE-0303](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0303-swiftpm-extensible-build-tools.md)\nintroduced the ability to define *build tool plugins* in SwiftPM, allowing\ncustom tools to be automatically invoked during a build. This proposal extends\nthat plugin support to allow the definition of custom *command plugins* —\nplugins that users can invoke directly from the SwiftPM CLI, or from an IDE that\nsupports Swift Packages, in order to perform custom actions on their packages.\n",
    "title" : " Package Manager Command Plugins\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/glessard",
        "name" : "Guillaume Lessard"
      },
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      }
    ],
    "id" : "SE-0333",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "39529",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0333-with-memory-rebound.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "850529c3a5bad3261493e67ea74a347aab8eddb3",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "The function `withMemoryRebound(to:capacity:_ body:)` executes a closure while\ntemporarily binding a range of memory to a different type than the callee is\nbound to. We propose to lift some notable limitations of `withMemoryRebound` and\nenable rebinding to a larger set of types, as well as rebinding the memory\npointed to by raw memory pointers and buffers.\n",
    "title" : " Expand usability of withMemoryRebound\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-11082",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-11082",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-11087",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-11087",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/glessard",
        "name" : "Guillaume Lessard"
      },
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      }
    ],
    "id" : "SE-0334",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "39639",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0334-pointer-usability-improvements.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "ffae2587ad21b3d39b18abbf0baf5eb9f72a99f1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "This proposal introduces some quality-of-life improvements for `UnsafePointer`\nand its `Mutable` and `Raw` variants.\n",
    "title" : " Pointer API Usability Improvements\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "rdar:\/\/64342031",
        "link" : "rdar:\/\/64342031",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "SR-11156",
        "link" : "https:\/\/bugs.swift.org\/browse\/SR-11156",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "rdar:\/\/53272880",
        "link" : "rdar:\/\/53272880",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      },
      {
        "assignee" : "",
        "id" : "rdar:\/\/22541346",
        "link" : "rdar:\/\/22541346",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0335",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40282",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0335-existential-any.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "67f9d90e38bc7be5a585bae849fb69d9f4ae79d8",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "Existential types in Swift have an extremely lightweight spelling: a plain\nprotocol name in type context means an existential type. Over the years, this\nhas risen to the level of **active harm** by causing confusion, leading\nprogrammers down the wrong path that often requires them to re-write code once\nthey hit a fundamental [limitation of value-level\nabstraction](https:\/\/forums.swift.org\/t\/improving-the-ui-of-generics\/22814#heading--limits-of-existentials).\nThis proposal makes the impact of existential types explicit in the language by\nannotating such types with `any`.\n",
    "title" : " Introduce existential any\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      },
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      }
    ],
    "id" : "SE-0336",
    "link" : "0336-distributed-actor-isolation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "6b641d4b0ecccb0cf395bc3106054e3d29868fa6",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "With the recent introduction of\n[actors](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md)\nto the language, Swift gained powerful and foundational building blocks for\nexpressing *thread-safe* concurrent programs. This proposal is the first in a\nseries of proposals aiming to extend Swift's actor runtime with the concept of\n*distributed actors*, allowing developers leverage the actor model not only in\nlocal, but also distributed settings.\n",
    "title" : " Distributed Actor Isolation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/beccadax",
        "name" : "Becca Royal-Gordon"
      }
    ],
    "id" : "SE-0337",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40680",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0337-support-incremental-migration-to-concurrency-checking.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/AirspeedSwift",
      "name" : "Ben Cohen"
    },
    "sha" : "7eb12f0c81fb93cdcea6bc0ee1e8522726328a0e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.6"
    },
    "summary" : "Swift 5.5 introduced mechanisms to eliminate data races from the language,\nincluding the `Sendable` protocol\n([SE-0302](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0302-concurrent-value-and-concurrent-closures.md))\nto indicate which types have values that can safely be used across task and\nactor boundaries, and global actors\n([SE-0316](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0316-global-actors.md))\nto help ensure proper synchronization with (e.g.) the main actor. However,\nSwift 5.5 does not fully enforce `Sendable` nor all uses of the main actor\nbecause interacting with modules which have not been updated for Swift\nConcurrency was found to be too onerous. We propose adding features to help\ndevelopers migrate their code to support concurrency and interoperate with other\nmodules that have not yet adopted it, providing a smooth path for the Swift\necosystem to eliminate data races.\n",
    "title" : " Incremental migration to concurrency checking\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      }
    ],
    "id" : "SE-0338",
    "link" : "0338-clarify-execution-non-actor-async.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "191f0d26e0298810b41d59c5a2a00aba9a3d10a8",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "[SE-0306](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md),\nwhich introduced actors to Swift, states that `async` functions may be\nactor-isolated, meaning that they formally run on some actor's executor. Nothing\nin either SE-0306 or\n[SE-0296](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0296-async-await.md)\n(`async`\/`await`) ever specifies where asynchronous functions that *aren't*\nactor-isolated run. This proposal clarifies that they do not run on any actor's\nexecutor, and it tightens up the rules for [sendability\nchecking](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0302-concurrent-value-and-concurrent-closures.md)\nto avoid a potential data race.\n",
    "title" : " Clarify the Execution of Non-Actor-Isolated Async Functions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/elsh",
        "name" : "Ellie Shin"
      }
    ],
    "id" : "SE-0339",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40899",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "4023",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0339-module-aliasing-for-disambiguation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "a8e1dfdceedba536bbaa6fcc1db14621152389ec",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Swift does not allow multiple modules in a program to share the same name, and\nattempts to do so will fail to build. These name collisions can happen in a\nreasonable program when using multiple packages developed independently from\neach other. This proposal introduces a way to resolve these conflicts without\nmaking major, invasive changes to a package's source by turning a module name in\nsource into an alias, a different unique name.\n",
    "title" : " Module Aliasing For Disambiguation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/etcwilde",
        "name" : "Evan Wilde"
      }
    ],
    "id" : "SE-0340",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40769",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0340-swift-noasync.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "3a952297524195014ec177740fc48e4662c93640",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "The Swift concurrency model allows tasks to resume on different threads from the\none they were suspended on. For this reason, API that relies on thread-local\nstorage, locks, mutexes, and semaphores, should not be used across suspension\npoints.\n",
    "title" : " Unavailable From Async Attribute\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0341",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40993",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0341-opaque-parameters.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/AirspeedSwift",
      "name" : "Ben Cohen"
    },
    "sha" : "7b3261d75b2bc48776c2437bfe8464e54a7e2bea",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Swift's syntax for generics is designed for generality, allowing one to express\ncomplicated sets of constraints amongst the different inputs and outputs of a\nfunction. For example, consider an eager concatenation operation that builds an\narray from two sequences:\n",
    "title" : " Opaque Parameter Declarations\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "neonichu"
      },
      {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "tomerd"
      }
    ],
    "id" : "SE-0342",
    "link" : "0342-static-link-runtime-libraries-by-default-on-supported-platforms.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tkremenek",
      "name" : "Ted Kremenek"
    },
    "sha" : "c532b0179c73a3d09c20809ff138cc10e1fe304d",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Swift 5.3.1 introduced [statically linking the Swift runtime libraries on\nLinux](https:\/\/forums.swift.org\/t\/static-linking-on-linux-in-swift-5-3-1\/). With\nthis feature, users can set the `--static-swift-stdlib` flag when invoking\nSwiftPM commands (or the long form `-Xswiftc -static-stdlib`) in order to\nstatically link the Swift runtime libraries into the program.\n",
    "title" : " Statically link Swift runtime libraries by default on supported platforms\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/etcwilde",
        "name" : "Evan Wilde"
      }
    ],
    "id" : "SE-0343",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40963",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "40998",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "41061",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0343-top-level-concurrency.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "47ab917535dbbceaf08c02496764f05deb60409b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Bringing concurrency to top-level code is an expected continuation of the\nconcurrency work in Swift. This pitch looks to iron out the details of how\nconcurrency will work in top-level code, specifically focusing on how top-level\nvariables are protected from data races, and how a top-level code context goes\nfrom a synchronous context to an asynchronous context.\n",
    "title" : " Concurrency in Top-level Code\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      },
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      },
      {
        "link" : "https:\/\/github.com\/drexin",
        "name" : "Dario Rexin"
      },
      {
        "link" : "https:\/\/github.com\/tomerd",
        "name" : "Tomer Doron"
      }
    ],
    "id" : "SE-0344",
    "link" : "0344-distributed-actor-runtime.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter\/",
      "name" : "Joe Groff"
    },
    "sha" : "1025b7e4b400521e6a5f155c5cfc0150f699b7ad",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "With the recent introduction of\n[actors](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md)\nto the language, Swift gained powerful and foundational building blocks for\nexpressing *thread-safe* concurrent programs. Actors guarantee thread-safety\nthanks to actor-isolation of mutable state they encapsulate.\n",
    "title" : " Distributed Actor Runtime\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/calda",
        "name" : "Cal Stephens"
      }
    ],
    "id" : "SE-0345",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40694",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0345-if-let-shorthand.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "1df831f37f4f126e7f59db812b108bcb8e3a393e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Optional binding using `if let foo = foo { ... }`, to create an unwrapped\nvariable that shadows an existing optional variable, is an extremely common\npattern. This pattern requires the author to repeat the referenced identifier\ntwice, which can cause these optional binding conditions to be verbose,\nespecially when using lengthy variable names. We should introduce a shorthand\nsyntax for optional binding when shadowing an existing variable:\n",
    "title" : " if let shorthand for shadowing an existing optional variable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/slavapestov",
        "name" : "Slava Pestov"
      }
    ],
    "id" : "SE-0346",
    "link" : "0346-light-weight-same-type-syntax.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "5bbf8aabc35ebd3f85478c46622133a33314af20",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "As a step toward the goal of improving the UI of generics outlined in [Improving\nthe UI of\nGenerics](https:\/\/forums.swift.org\/t\/improving-the-ui-of-generics\/22814#heading--directly-expressing-constraints),\nthis proposal introduces a new syntax for conforming a generic parameter and\nconstraining an associated type via a same-type requirement.\n",
    "title" : " Lightweight same-type requirements for primary associated types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0347",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41436",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0347-type-inference-from-default-exprs.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "1f1b90eda362373a4d53ffd28803034aef2010ab",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "It's currently impossible to use a default value expression with a generic\nparameter type to default the argument and its type:\n",
    "title" : " Type inference from default expressions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rxwei",
        "name" : "Richard Wei"
      }
    ],
    "id" : "SE-0348",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41576",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0348-buildpartialblock.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "62f6bf220ffc5f0edf827eb007931a9b6504c0c2",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "",
    "title" : " buildPartialBlock for result builders\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/glessard",
        "name" : "Guillaume Lessard"
      },
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      }
    ],
    "id" : "SE-0349",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41033",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0349-unaligned-loads-and-stores.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "26c9b30d14feceb6599a266429e9985ae44c423e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Swift does not currently provide a clear way to load data from an arbitrary\nsource of bytes, such as a binary file, in which data may be stored without\nrespect for in-memory alignment. This proposal aims to rectify the situation,\nmaking workarounds unnecessary.\n",
    "title" : " Unaligned Loads and Stores from Raw Memory\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0350",
    "link" : "0350-regex-type-overview.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "2eef59ffb0af617dd0e0620736dc3ab1d0dedd99",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Swift strings provide an obsessively Unicode-forward model of programming with\nstrings. String processing with `Collection`'s algorithms is woefully inadequate\nfor many day-to-day tasks compared to other popular programming and scripting\nlanguages.\n",
    "title" : " Regex Type and Overview\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rxwei",
        "name" : "Richard Wei"
      },
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      },
      {
        "link" : "https:\/\/github.com\/azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0351",
    "link" : "0351-regex-builder.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "079da96df0b17fbe8dad272fdf1f79c9b8d2445c",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "[Declarative string\nprocessing](https:\/\/github.com\/apple\/swift-experimental-string-processing\/blob\/main\/Documentation\/DeclarativeStringProcessing.md)\naims to offer powerful pattern matching capabilities with expressivity, clarity,\ntype safety, and ease of use. To achieve this, we propose to introduce a\nresult-builder-based DSL, **regex builder**, for creating and composing regular\nexpressions (**regex**es).\n",
    "title" : " Regex builder DSL\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0352",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41996",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0352-implicit-open-existentials.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "3528f0790913f09ec6d1590394715d34cab46d92",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Existential types in Swift allow one to store a value whose specific type is\nunknown and may change at runtime. The dynamic type of that stored value, which\nwe refer to as the existential's *underlying type*, is known only by the set of\nprotocols it conforms to and, potentially, its superclass. While existential\ntypes are useful for expressing values of dynamic type, they are necessarily\nrestricted because of their dynamic nature. Recent proposals have made\n[existential types more\nexplicit](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0335-existential-any.md)\nto help developers understand this dynamic nature, as well as [making\nexistential types more\nexpressive](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0309-unlock-existential-types-for-all-protocols.md)\nby removing a number of limitations. However, a fundamental issue with\nexistential types remains, that once you have a value of existential type it is\n*very* hard to use generics with it. Developers usually encounter this via the\nerror message \"protocol 'P' as a type cannot conform to itself\":\n",
    "title" : " Implicitly Opened Existentials\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/codafi",
        "name" : "Robert Widmann"
      }
    ],
    "id" : "SE-0353",
    "link" : "0353-constrained-existential-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "bb89a02536fb9be564d89483df23f3167b44ffe7",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Existential types complement the Swift type system’s facilities for abstraction.\nLike generics, they enable a function to take and return multiple possible\ntypes. Unlike generic parameter types, existential types need not be known up\nfront when passed as inputs to a function. Further, concrete types can be\n*erased* (hidden behind the interface of a protocol) when returned from a\nfunction. There has been a flurry of activity in this space\nwith[SE-0309](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0309-unlock-existential-types-for-all-protocols.md#covariant-erasure-for-associated-types)\nunblocking the remaining restrictions on using protocols with associated types\nas existential types, and\n[SE-0346](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0346-light-weight-same-type-syntax.md)\npaving the way for a lightweight constraint syntax for the associated types of\nprotocols. Building directly upon those ideas, this proposal seeks to re-use the\nsyntax of lightweight associated type constraints in the context of existential\ntypes.\n",
    "title" : " Constrained Existential Types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hamishknight",
        "name" : "Hamish Knight"
      },
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      },
      {
        "link" : "https:\/\/github.com\/DaveEwing",
        "name" : "David Ewing"
      }
    ],
    "id" : "SE-0354",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "42119",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "58835",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0354-regex-literals.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "c3668431a0669c6133ba9d896daf87e4fcb2fee7",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "We propose the introduction of regex literals to Swift source code, providing\ncompile-time checks and typed-capture inference. Regex literals help complete\nthe story told in *[Regex Type and\nOverview](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0350-regex-type-overview.md)*.\n",
    "title" : " Regex Literals\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hamishknight",
        "name" : "Hamish Knight"
      },
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      }
    ],
    "id" : "SE-0355",
    "link" : "0355-regex-syntax-run-time-construction.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "4efc27242aa4ca783413abf2d6f91bb2f50ddd14",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "A regex declares a string processing algorithm using syntax familiar across a\nvariety of languages and tools throughout programming history. We propose the\nability to create a regex at run time from a string containing regex syntax\n(detailed here), API for accessing the match and captures, and a means to\nconvert between an existential capture representation and concrete types.\n",
    "title" : " Regex Syntax and Run-time Construction\n"
  },
  {
    "authors" : [
      {
        "link" : "http:\/\/github.com\/bitjammer",
        "name" : "Ashley Garland"
      }
    ],
    "id" : "SE-0356",
    "link" : "0356-swift-snippets.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "c0090e3bdee8edf312408332f66f6832302234a7",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "This proposal describes a convention for writing a new form of sample code\ncalled *snippets*. Snippets are short, single-file examples that can build and\nrun from within a Swift package, with access to other code within that package,\nand can be used in a variety of ways.\n",
    "title" : " Swift Snippets\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/itingliu",
        "name" : "Tina Liu"
      },
      {
        "link" : "https:\/\/github.com\/milseman",
        "name" : "Michael Ilseman"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      },
      {
        "link" : "https:\/\/github.com\/timvermeulen",
        "name" : "Tim Vermeulen"
      }
    ],
    "id" : "SE-0357",
    "link" : "0357-regex-string-processing-algorithms.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "44629f4b7f0b793b48d9afa8eb3205a3dda757d4",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "The Swift standard library's string processing algorithms are underpowered\ncompared to other popular programming and scripting languages. Some of these\nomissions can be found in `NSString`, but these fundamental algorithms should\nhave a place in the standard library.\n",
    "title" : " Regex-powered string processing algorithms\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lorentey",
        "name" : "Karoy Lorentey"
      }
    ],
    "id" : "SE-0358",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41843",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0358-primary-associated-types-in-stdlib.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "1a67f2bf324ad250ac8f535e57eb30b94d20129a",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "[SE-0346](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0346-light-weight-same-type-syntax.md)\nintroduced the concept of primary associated types to the language. This\ndocument proposes to adopt this feature in the Swift Standard Library, adding\nprimary associated types to select existing protocols. Additionally, we provide\nsome general API design recommendations that protocol authors may find helpful\nwhen adding support for this language feature.\n",
    "title" : " Primary Associated Types in the Standard Library\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/artemcm",
        "name" : "Artem Chikin"
      },
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "https:\/\/github.com\/nkcsgexi",
        "name" : "Xi Ge"
      }
    ],
    "id" : "SE-0359",
    "link" : "0359-build-time-constant-values.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "2742a8e9a8aeb23e951a9bd1a75871f5c3399461",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "A Swift language feature for requiring certain values to be knowable at\ncompile-time. This is achieved through an attribute, `@const`, constraining\nproperties and function parameters to have compile-time knowable values. Such\ninformation forms a foundation for richer compile-time features in the future,\nsuch as extraction and validation of values at compile time.\n",
    "title" : " Build-Time Constant Values\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0360",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "42072",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "42104",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "42167",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "42456",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0360-opaque-result-types-with-availability.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "423f045aa3fe9450822328a398f8b4095197f871",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Since their introduction in\n[SE-0244](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0244-opaque-result-types.md),\nopaque result types have become a powerful tool of type-level abstraction that\nallows library authors to hide implementation details of their APIs.\n",
    "title" : " Opaque result types with limited availability\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0361",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41172",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0361-bound-generic-extensions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "a33895fa041bf8982ebd6a4a75a8c34382ea817e",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "Specifying the type arguments to a generic type in Swift is almost always\nwritten in angle brackets, such as `Array<String>`. Extensions are a notable\nexception, and if you attempt to extend `Array<String>`, the compiler reports\nthe following error message:\n",
    "title" : " Extensions on bound generic types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0362",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "59055",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "5632",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0362-piecemeal-future-features.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "4fc84085062779bd0c8af12c71f4629a6b04bbfd",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "Swift 6 is accumulating a number of improvements to the language that have\nenough source-compatibility impact that they could not be enabled by default in\nprior language modes (Swift 4.x and Swift 5.x). These improvements are already\nimplemented in the Swift compiler behind the Swift 6 language mode, but they are\ninaccessible to users, and will remain so until Swift 6 becomes available as a\nlanguage mode. There are several reasons why we should consider making these\nimprovements available sooner:\n",
    "title" : " Piecemeal adoption of upcoming language improvements\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      },
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0363",
    "link" : "0363-unicode-for-string-processing.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "43bbe84b05d57654876e103d4c468e8a34c7ec20",
    "status" : {
      "state" : ".implemented",
      "version" : "5.7"
    },
    "summary" : "This proposal describes `Regex`'s rich Unicode support during regex matching,\nalong with the character classes and options that define and modify that\nbehavior.\n",
    "title" : " Unicode for String Processing\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/harlanhaskins",
        "name" : "Harlan Haskins"
      }
    ],
    "id" : "SE-0364",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "36068",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0364-retroactive-conformance-warning.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/stephentyrone",
      "name" : "Steve Canon"
    },
    "sha" : "76c417acaa7cab3627f29a8b3aae732251205396",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Many Swift libraries vend currency protocols, like Equatable, Hashable, Codable,\namong others, that unlock worlds of common functionality for types that conform\nto them. Sometimes, if a type from another module does not conform to a common\ncurrency protocols, developers will declare a conformance of that type to that\nprotocol within their module. However, protocol conformances are globally unique\nwithin a process in the Swift runtime, and if multiple modules declare the same\nconformance, it can cause major problems for library clients and hinder the\nability to evolve libraries over time.\n",
    "title" : " Warning for Retroactive Conformances of External Types\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/calda",
        "name" : "Cal Stephens"
      }
    ],
    "id" : "SE-0365",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40702",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "61520",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0365-implicit-self-weak-capture.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "a71d51d2c709e10ddf2f3a55058599ba9691ce55",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "As of\n[SE-0269](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0269-implicit-self-explicit-capture.md),\nimplicit `self` is permitted in closures when `self` is written explicitly in\nthe capture list. We should extend this support to `weak self` captures, and\npermit implicit `self` as long as `self` has been unwrapped.\n",
    "title" : " Allow implicit self for weak self captures, after self is unwrapped\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/gottesmm",
        "name" : "Michael Gottesman"
      },
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0366",
    "link" : "0366-move-function.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "29f66dd9dda9683633c75c8e4888536bbf402bd1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "In this document, we propose adding a new operator, marked by the\ncontext-sensitive keyword `consume`, to the language. `consume` ends the\nlifetime of a specific local `let`, local `var`, or function parameter, and\nenforces this by causing the compiler to emit a diagnostic upon any use after\nthe consume. This allows for code that relies on **forwarding ownership** of\nvalues for performance or correctness to communicate that requirement to the\ncompiler and to human readers. As an example:\n",
    "title" : " consume operator to end the lifetime of a variable binding\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0367",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "60208",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0367-conditional-attributes.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "b6ca2bb8ec393146d8b4ba7c453476ae1f9698ca",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "Over time, Swift has introduced a number of new attributes to communicate\nadditional information in source code. Existing code can then be updated to take\nadvantage of these new constructs to improve its behavior, providing more\nexpressive capabilities, better compile-time checking, better performance, and\nso on.\n",
    "title" : " Conditional compilation for attributes\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/benrimmington",
        "name" : "Ben Rimmington"
      }
    ],
    "id" : "SE-0368",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "40722",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62733",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0368-staticbigint.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "4c86fb5ff01a590f7d45d7db24a0d89b9c0f80b1",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "Integer literals in Swift source code can express an arbitrarily large value.\nHowever, types outside of the standard library which conform to\n`ExpressibleByIntegerLiteral` are restricted in practice in how large of a\nliteral value they can be built with, because the value passed to\n`init(integerLiteral:)` must be of a type supported by the standard library.\nThis makes it difficult to write new integer types outside of the standard\nlibrary.\n",
    "title" : " StaticBigInt\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/benpious",
        "name" : "Ben Pious"
      }
    ],
    "id" : "SE-0369",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "60133",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0369-add-customdebugdescription-conformance-to-anykeypath.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "6f58d7aff82458481497e2d1721863a293644d75",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "This proposal is to add conformance to the protocol\n`CustomDebugStringConvertible` to `AnyKeyPath`.\n",
    "title" : " Add CustomDebugStringConvertible conformance to AnyKeyPath\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/glessard",
        "name" : "Guillaume Lessard"
      }
    ],
    "id" : "SE-0370",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41608",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0370-pointer-family-initialization-improvements.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "4c107ed4edb979972ac46721acd016042ed388ba",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "The types in the `UnsafeMutablePointer` family typically require manual\nmanagement of memory allocations, including the management of their\ninitialization state. Unfortunately, not every relevant type in the family has\nthe necessary functionality to fully manage the initialization state of the\nmemory it represents. The states involved are, after allocation:\n",
    "title" : " Pointer Family Initialization Improvements and Better Buffer Slices\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/nickolas-pohilets",
        "name" : "Mykola Pokhylets"
      }
    ],
    "id" : "SE-0371",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "60057",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0371-isolated-synchronous-deinit.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jumhyn",
      "name" : "Frederick Kellison-Linn"
    },
    "sha" : "7c5bc9d02de09a4325f217f64d6d2e64f3c535b4",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This feature allows `deinit`'s of actors and global-actor isolated types (GAITs)\nto access non-sendable isolated state, lifting restrictions imposed imposed by\n[SE-0327](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0327-actor-initializers.md).\nThis is achieved by providing runtime support for hopping onto executors in\n`__deallocating_deinit()`'s.\n",
    "title" : " Isolated synchronous deinit\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0372",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "60936",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0372-document-sorting-as-stable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/allevato",
      "name" : "Tony Allevato"
    },
    "sha" : "2449d0ae3c037b6183d2aaf0a044bb792ef619a4",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "Swift's sorting algorithm was changed to be stable before Swift 5, but we've\nnever updated the documentation to provide that guarantee. Let's commit to the\nsorting algorithm being stable so that people can rely on that behavior.\n",
    "title" : " Document Sorting as Stable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0373",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "60839",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0373-vars-without-limits-in-result-builders.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "ec428914b27ede9d711d0e400b3109ab0408d3b9",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "The implementation of the result builder transform (introduced by\n[SE-0289](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0289-result-builders.md))\nplaces a number of limitations on local variable declarations in the transformed\nfunction. Specifically, local variables need to have an initializer expression,\nthey cannot be computed, they cannot have observers, and they cannot have\nattached property wrappers. None of these restrictions were explicit in the\nSE-0289 proposal, but they are a *de facto* part of the current feature.\n",
    "title" : " Lift all limitations on variables in result builders\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/mbrandonw",
        "name" : "Brandon Williams"
      },
      {
        "link" : "https:\/\/github.com\/stephencelis",
        "name" : "Stephen Celis"
      }
    ],
    "id" : "SE-0374",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "61222",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0374-clock-sleep-for.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/stephentyrone",
      "name" : "Steve Canon"
    },
    "sha" : "f9653cc4e085f240cbb0918fb510a33ec0d9e746",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "The `Clock` protocol introduced in Swift 5.7 provides a way to suspend until a\nfuture instant, but does not provide a way to sleep for a duration. This differs\nfrom the static `sleep` methods on `Task`, which provide both a way to sleep\nuntil an instant or for a duration.\n",
    "title" : " Add sleep(for:) to Clock\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0375",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "61321",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0375-opening-existential-optional.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "f49ac874164142642589d9c6724794193d07e6ce",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "[SE-0352 \"Implicitly Opened\nExistentials\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0352-implicit-open-existentials.md)\nhas a limitation that prevents the opening of an existential argument when the\ncorresponding parameter is optional. This proposal changes that behavior, so\nthat such a call will succeed when a (non-optional) existential argument is\npassed to a parameter of optional type:\n",
    "title" : " Opening existential arguments to optional parameters\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/tshortli",
        "name" : "Allan Shortlidge"
      }
    ],
    "id" : "SE-0376",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "41271",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "41348",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "41416",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "41612",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0376-function-back-deployment.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jumhyn",
      "name" : "Frederick Kellison-Linn"
    },
    "sha" : "c5b2465127535e54254bf518c0b7e3c040fba44b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "This proposal introduces a `@backDeployed` attribute to allow ABI-stable\nlibraries to make their own public APIs available on older OSes. When a\n`@backDeployed` API isn't present in the library that ships with an older OS, a\nclient running on that OS can still use the API because a fallback copy of its\nimplementation has been emitted into the client.\n",
    "title" : " Function Back Deployment\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/gottesmm",
        "name" : "Michael Gottesman"
      },
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      }
    ],
    "id" : "SE-0377",
    "link" : "0377-parameter-ownership-modifiers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "f7947acd3acaa80d5bc8d86c477a8a571a4bff23",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "We propose new `borrowing` and `consuming` parameter modifiers to allow\ndevelopers to explicitly choose the ownership convention that a function uses to\nreceive immutable parameters. Applying one of these modifiers to a parameter\ncauses that parameter binding to no longer be implicitly copyable, and potential\ncopies need to be marked with the new `copy x` operator. This allows for\nfine-tuning of performance by reducing the number of ARC calls or copies needed\nto call a function, and provides a necessary prerequisite feature for\nnoncopyable types to specify whether a function consumes a noncopyable value or\nnot.\n",
    "title" : " borrowing and consuming parameter ownership modifiers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/yim-lee",
        "name" : "Yim Lee"
      }
    ],
    "id" : "SE-0378",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "5838",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0378-package-registry-auth.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "5b20615c83d10dc11a8199713d6e507257b06089",
    "status" : {
      "state" : ".implemented",
      "version" : "5.8"
    },
    "summary" : "A package registry may require authentication for some or all of its API in\norder to identify user performing the action and authorize the request\naccordingly.\n",
    "title" : " Package Registry Authentication\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/maxovtsin",
        "name" : "Max Ovtsin"
      }
    ],
    "id" : "SE-0379",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "34199",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0379-opt-in-reflection-metadata.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "ddbcb87a6caac053b4ebb0d86d18ddecedaf8a45",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This proposal seeks to increase the safety, efficiency, and secrecy of Swift\nReflection Metadata by improving the existing mechanism and providing the\nopportunity to express a requirement on Reflection Metadata in APIs that consume\nit.\n",
    "title" : " Swift Opt-In Reflection Metadata\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/airspeedswift",
        "name" : "Ben Cohen"
      },
      {
        "link" : "https:\/\/github.com\/hamishknight",
        "name" : "Hamish Knight"
      }
    ],
    "id" : "SE-0380",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "62178",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0380-if-switch-expressions.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "b2958c3d2f6e1708eb67bfb86586e6bc810c2893",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "This proposal introduces the ability to use `if` and `switch` statements as\nexpressions, for the purpose of:\n",
    "title" : " if and switch expressions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/Lukasa",
        "name" : "Cory Benfield"
      },
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad Malawski"
      }
    ],
    "id" : "SE-0381",
    "link" : "0381-task-group-discard-results.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "7c4a2c0d3b1a0daf972d87995abfdeb4b94753ca",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "We propose to introduce a new type of structured concurrency task group:\n`Discarding[Throwing]TaskGroup`. This type of group is similar to `TaskGroup`\nhowever it discards results of its child tasks immediately. It is specialized\nfor potentially never-ending task groups, such as top-level loops of http or\nother kinds of rpc servers.\n",
    "title" : " DiscardingTaskGroups\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0382",
    "link" : "0382-expression-macros.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "ed50456376a50e8a5fc52e173e7e18d9f37c0bc4",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Expression macros provide a way to extend Swift with new kinds of expressions,\nwhich can perform arbitrary syntactic transformations on their arguments to\nproduce new code. Expression macros make it possible to extend Swift in ways\nthat were only previously possible by introducing new language features, helping\ndevelopers build more expressive libraries and eliminate extraneous boilerplate.\n",
    "title" : " Expression Macros\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/codafi",
        "name" : "Robert Widmann"
      }
    ],
    "id" : "SE-0383",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "62151",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0383-deprecate-uiapplicationmain-and-nsapplicationmain.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "d3fb74e5ca400a849a77548bfd84831656ac96fb",
    "status" : {
      "state" : ".implemented",
      "version" : "5.10"
    },
    "summary" : "`@UIApplicationMain` and `@NSApplicationMain` used to be the standard way for\niOS and macOS apps respectively to declare a synthesized platform-specific\nentrypoint for an app. These functions have since been obsoleted by\n[SE-0281](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0281-main-attribute.md)'s\nintroduction of the `@main` attribute, and they now represent a confusing bit of\nduplication in the language. This proposal seeks to deprecate these alternative\nentrypoint attributes in favor of `@main` in pre-Swift 6, and it makes their use\nin Swift 6 a hard error.\n",
    "title" : " Deprecate @UIApplicationMain and @NSApplicationMain\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/NuriAmari",
        "name" : "Nuri Amari"
      }
    ],
    "id" : "SE-0384",
    "link" : "0384-importing-forward-declared-objc-interfaces-and-protocols.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/allevato",
      "name" : "Tony Allevato"
    },
    "sha" : "9669e7d0199123f475acd5e0dfada1287e568181",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "This proposal seeks to improve the usability of existing Objective-C libraries\nfrom Swift by reducing the negative impact forward declarations have on API\nvisibility from Swift. We wish to start synthesizing placeholder types to\nrepresent forward declared Objective-C interfaces and protocols in Swift.\n",
    "title" : " Importing Forward Declared Objective-C Interfaces and Protocols\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      },
      {
        "link" : "https:\/\/github.com\/stmontgomery",
        "name" : "Stuart Montgomery"
      }
    ],
    "id" : "SE-0385",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "62426",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62738",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62818",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62850",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62920",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "63057",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0385-custom-reflection-metadata.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "8c7d571cf9d1259488d2df47033973041cbd1016",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "In Swift, declarations are annotated with attributes to opt into both built-in\nlanguage features (e.g. `@available`) and library functionality (e.g.\n`@RegexComponentBuilder`). This proposal introduces the ability to attach\nlibrary-defined reflection metadata to declarations using custom attributes,\nwhich can then be queried by the library to opt client code into library\nfunctionality.\n",
    "title" : " Custom Reflection Metadata\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/elsh",
        "name" : "Ellie Shin"
      },
      {
        "link" : "https:\/\/github.com\/xymus",
        "name" : "Alexis Laferriere"
      }
    ],
    "id" : "SE-0386",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "62700",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62704",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62652",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "62652",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0386-package-access-modifier.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "3376ac883dddf36c8abf89df6f65f3a980259571",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "This proposal introduces `package` as a new access modifier. Currently, to\naccess a symbol in another module, that symbol needs to be declared `public`.\nHowever, a symbol being `public` allows it to be accessed from any module at\nall, both within a package and from outside of a package, which is sometimes\nundesirable. We need a new access modifier to enable more control over the\nvisibility scope of such symbols.\n",
    "title" : " New access modifier: package\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/MaxDesiatov",
        "name" : "Max Desiatov"
      },
      {
        "link" : "https:\/\/github.com\/compnerd",
        "name" : "Saleem Abdulrasool"
      },
      {
        "link" : "https:\/\/github.com\/etcwilde",
        "name" : "Evan Wilde"
      }
    ],
    "id" : "SE-0387",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "5911",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "5922",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "6023",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "6186",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0387-cross-compilation-destinations.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/shahmishal",
      "name" : "Mishal Shah"
    },
    "sha" : "c93ca111de77585d027900529bd2f107ad66223a",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Cross-compilation is a common development use case. When cross-compiling, we\nneed to refer to these concepts:\n",
    "title" : " Swift SDKs for Cross-Compilation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/FranzBusch",
        "name" : "Franz Busch"
      }
    ],
    "id" : "SE-0388",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "62968",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0388-async-stream-factory.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/beccadax",
      "name" : "Becca Royal-Gordon"
    },
    "sha" : "d249793ad40442ea6eff9e323ff949b2cc67d51b",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "We propose introducing helper methods for creating `AsyncStream` and\n`AsyncThrowingStream` instances which make the stream's continuation easier to\naccess.\n",
    "title" : " Convenience Async[Throwing]Stream.makeStream methods\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/rxwei",
        "name" : "Richard Wei"
      }
    ],
    "id" : "SE-0389",
    "link" : "0389-attached-macros.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/allevato",
      "name" : "Tony Allevato"
    },
    "sha" : "4a619a43b68d1febe798f12b7c9eb4f822c06d41",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Attached macros provide a way to extend Swift by creating and extending\ndeclarations based on arbitrary syntactic transformations on their arguments.\nThey make it possible to extend Swift in ways that were only previously possible\nby introducing new language features, helping developers build more expressive\nlibraries and eliminate extraneous boilerplate.\n",
    "title" : " Attached Macros\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      {
        "link" : "https:\/\/github.com\/gottesmm",
        "name" : "Michael Gottesman"
      },
      {
        "link" : "https:\/\/github.com\/atrick",
        "name" : "Andrew Trick"
      },
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      }
    ],
    "id" : "SE-0390",
    "link" : "0390-noncopyable-structs-and-enums.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/stephentyrone",
      "name" : "Stephen Canon"
    },
    "sha" : "461edfb55776225bb0e5a3d44fdcc062cd146077",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "This proposal introduces the concept of **noncopyable** types (also known as\n\"move-only\" types). An instance of a noncopyable type always has unique\nownership, unlike normal Swift types which can be freely copied.\n",
    "title" : " Noncopyable structs and enums\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/yim-lee",
        "name" : "Yim Lee"
      }
    ],
    "id" : "SE-0391",
    "link" : "0391-package-registry-publish.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/tomerd",
      "name" : "Tom Doron"
    },
    "sha" : "af6ba211991124d9dc81145c84ab1cb52dc122c5",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "A package registry makes packages available to consumers. Starting with\nSwift 5.7, SwiftPM supports dependency resolution and package download using any\nregistry that implements the [service\nspecification](https:\/\/github.com\/apple\/swift-package-manager\/blob\/main\/Documentation\/PackageRegistry\/Registry.md)\nproposed alongside with\n[SE-0292](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0292-package-registry-service.md).\nSwiftPM does not yet provide any tooling for publishing packages, so package\nauthors must manually prepare the contents (e.g., source archive) and interact\nwith the registry on their own to publish a package release. This proposal aims\nto standardize package publishing such that SwiftPM can offer a complete and\nwell-rounded experience for using package registries.\n",
    "title" : " Package Registry Publish\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      },
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      }
    ],
    "id" : "SE-0392",
    "link" : "0392-custom-actor-executors.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "ab0b5ffe0f69cb9fbac977121b694e0ec76dcbc7",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "As Swift Concurrency continues to mature it is becoming increasingly important\nto offer adopters tighter control over where exactly asynchronous work is\nactually executed.\n",
    "title" : " Custom Actor Executors\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/slavapestov",
        "name" : "Slava Pestov"
      }
    ],
    "id" : "SE-0393",
    "link" : "0393-parameter-packs.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "97cb16133f2bcabd6f2f87f7dfaffe4bea968e4d",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Many modern Swift libraries include ad-hoc variadic APIs with an arbitrary upper\nbound, typically achieved with overloads that each have a different fixed number\nof type parameters and corresponding arguments. Without variadic generic\nprogramming support in the language, these ad-hoc variadic APIs have a\nsignificant cost on library maintenance and the developer experience of using\nthese APIs.\n",
    "title" : " Value and Type Parameter Packs\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/neonichu",
        "name" : "Boris Buegling"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0394",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "6185",
        "repository" : "swift-package-manager",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "6200",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0394-swiftpm-expression-macros.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/beccadax",
      "name" : "Becca Royal-Gordon"
    },
    "sha" : "f018470cf8309c4d02774894aee5fc998dfa208c",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Macros provide a way to extend Swift by performing arbitrary syntactic\ntransformations on input source code to produce new code. One example for this\nare expression macros which were previously proposed in\n[SE-0382](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0382-expression-macros.md).\nThis proposal covers how custom macros are defined, built and distributed as\npart of a Swift package.\n",
    "title" : " Package Manager Support for Custom Macros\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/phausler",
        "name" : "Philippe Hausler"
      },
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0395",
    "link" : "0395-observability.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/airspeedswift",
      "name" : "Ben Cohen"
    },
    "sha" : "9a03397eeeea6c5e26cf968d231ff31976d8f1b2",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Making responsive apps often requires the ability to update the presentation\nwhen underlying data changes. The *observer pattern* allows a subject to\nmaintain a list of observers and notify them of specific or general state\nchanges. This has the advantages of not directly coupling objects together and\nallowing implicit distribution of updates across potential multiple observers.\nAn observable object needs no specific information about its observers.\n",
    "title" : " Observation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/natecook1000",
        "name" : "Nate Cook"
      }
    ],
    "id" : "SE-0396",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "64899",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0396-never-codable.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/allevato",
      "name" : "Tony Allevato"
    },
    "sha" : "be3ecd86ea4f07b694c07c7aa47f40ce4fc5f3be",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Extend `Never` so that it conforms to the `Encodable` and `Decodable` protocols,\ntogether known as `Codable`.\n",
    "title" : " Conform Never to Codable\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/rxwei",
        "name" : "Richard Wei"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0397",
    "link" : "0397-freestanding-declaration-macros.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "c0d3352011907650d4cb796a5e3952aef2dc1eb3",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "[SE-0382 \"Expression\nmacros\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0382-expression-macros.md)\nintroduced macros into Swift. The approach involves an explicit syntax for uses\nof macros (prefixed by `#`), type checking for macro arguments prior to macro\nexpansion, and macro expansion implemented via separate programs that operate on\nthe syntax tree of the arguments.\n",
    "title" : " Freestanding Declaration Macros\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/slavapestov",
        "name" : "Slava Pestov"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0398",
    "link" : "0398-variadic-types.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/Jumhyn",
      "name" : "Frederick Kellison-Linn"
    },
    "sha" : "d0cb8e1c3a713f3f6b63deb75ba15519cf4fa9bb",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Previously [SE-0393](0393-parameter-packs.md) introduced type parameter packs\nand several related concepts, allowing generic function declarations to abstract\nover a variable number of types. This proposal generalizes these ideas to\ngeneric type declarations.\n",
    "title" : " Allow Generic Types to Abstract Over Packs\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/sophiapoirier",
        "name" : "Sophia Poirier"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0399",
    "link" : "0399-tuple-of-value-pack-expansion.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "89182688258ef04e54c8c88d918fb151aba2c0ac",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Building upon the **Value and Type Parameter Packs** proposal\n[SE-0393](https:\/\/forums.swift.org\/t\/se-0393-value-and-type-parameter-packs\/63859),\nthis proposal enables referencing a tuple value that contains a value pack\ninside a pack repetition pattern.\n",
    "title" : " Tuple of value pack expansion\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/douggregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0400",
    "link" : "0400-init-accessors.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/Jumhyn",
      "name" : "Frederick Kellison-Linn"
    },
    "sha" : "3736f14eb5c5faa26bc27499a9fb186ccb4034db",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "Init accessors generalize the out-of-line initialization feature of property\nwrappers to allow any computed property on types to opt into definite\ninitialization analysis, and subsume initialization of a set of stored\nproperties with custom initialization code.\n",
    "title" : " Init Accessors\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/bjhomer",
        "name" : "BJ Homer"
      }
    ],
    "id" : "SE-0401",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "63884",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0401-remove-property-wrapper-isolation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "b5c0e1dbbfcc49cab4a9aaafa900cfe59260f40d",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "[SE-0316: Global\nActors](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0316-global-actors.md)\nintroduced annotations like `@MainActor` to isolate a type, function, or\nproperty to a particular global actor. It also introduced various rules for how\nthat global actor isolation could be inferred. One of those rules was:\n",
    "title" : " Remove Actor Isolation Inference caused by Property Wrappers\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0402",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "66967",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "1859",
        "repository" : "swift-syntax",
        "type" : "pull"
      }
    ],
    "link" : "0402-extension-macros.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "b47ef4ee4a051fe5a27914d2348df7dd7cbe0061",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9"
    },
    "summary" : "This proposal generalizes the `conformance` macro role as an `extension` macro\nrole that can add a member list to an extension in addition to a protocol and\n`where` clause.\n",
    "title" : " Generalize conformance macros as extension macros\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ncooke3",
        "name" : "Nick Cooke"
      }
    ],
    "id" : "SE-0403",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "5919",
        "repository" : "swift-package-manager",
        "type" : "pull"
      }
    ],
    "link" : "0403-swiftpm-mixed-language-targets.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/compnerd",
      "name" : "Saleem Abdulrasool"
    },
    "sha" : "16e7b95f95ea4dfc92793daaa033883e1543e13b",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "This is a proposal for adding package manager support for targets containing\nboth Swift and [C based language\nsources](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0038-swiftpm-c-language-targets.md)\n(henceforth, referred to as mixed language sources). Currently, a target’s\nsource can be either Swift or a C based language\n([SE-0038](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0038-swiftpm-c-language-targets.md)),\nbut not both.\n",
    "title" : " Package Manager Mixed Language Target Support\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/karwa",
        "name" : "Karl Wagner"
      }
    ],
    "id" : "SE-0404",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "66247",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0404-nested-protocols.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "9722c8b2809e6f05c650eb946242eaa9113ae9e6",
    "status" : {
      "state" : ".implemented",
      "version" : "5.10"
    },
    "summary" : "Allows protocols to be nested in non-generic `struct\/class\/enum\/actor`s, and\nfunctions.\n",
    "title" : " Allow Protocols to be Nested in Non-Generic Contexts\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/glessard",
        "name" : "Guillaume Lessard"
      }
    ],
    "id" : "SE-0405",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "68419",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "68423",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0405-string-validating-initializers.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/allevato",
      "name" : "Tony Allevato"
    },
    "sha" : "cab4200b94d074155a15fe5a8f2f841e6ea8a4dd",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "We propose adding new `String` failable initializers that validate encoded\ninput, and return `nil` when the input contains any invalid elements.\n",
    "title" : " String Initializers with Encoding Validation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/FranzBusch",
        "name" : "Franz Busch"
      }
    ],
    "id" : "SE-0406",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "66488",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0406-async-stream-backpressure.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "a07c84c1df14f3d7c5126eeee16c1b5768693f52",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "[SE-0314](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0314-async-stream.md)\nintroduced new `Async[Throwing]Stream` types which act as root asynchronous\nsequences. These two types allow bridging from synchronous callbacks such as\ndelegates to an asynchronous sequence. This proposal adds a new way of\nconstructing asynchronous streams with the goal to bridge backpressured systems\ninto an asynchronous sequence. Furthermore, this proposal aims to clarify the\ncancellation behaviour both when the consuming task is cancelled and when the\nproduction side indicates termination.\n",
    "title" : " Backpressure support for AsyncStream\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0407",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "67758",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0407-member-macro-conformances.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "18da0265e719b307962e51811cbb9f8b6f40261c",
    "status" : {
      "state" : ".implemented",
      "version" : "5.9.2"
    },
    "summary" : "The move from conformance macros to extension macros in\n[SE-0402](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0402-extension-macros.md)\nincluded the ability for extension macros to learn about which protocols the\ntype already conformed to (e.g., because a superclass conformed or an explicit\nconformance was stated somewhere), so that the macro could avoid adding\ndeclarations and conformances that aren't needed. It also meant that any new\ndeclarations added are part of an extension---not the original type\ndefinition---which is generally beneficial, because it means that (e.g.) a new\ninitializer doesn't suppress the memberwise initializer. It's also usually\nconsidered good form to split protocol conformances out into their own\nextensions.\n",
    "title" : " Member Macro Conformances\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/simanerush",
        "name" : "Sima Nerush"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0408",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "67594",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0408-pack-iteration.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor\/",
      "name" : "Doug Gregor"
    },
    "sha" : "b625affbc96ed2ec78fe31b4d789228973f11c85",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "Building upon the Value and Type Parameter Packs proposal\n[SE-0393](https:\/\/forums.swift.org\/t\/se-0393-value-and-type-parameter-packs\/63859),\nthis proposal enables iterating over each element in a value pack and bind each\nvalue to a local variable using a `for-in` syntax.\n",
    "title" : " Pack Iteration\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/xymus",
        "name" : "Alexis Laferrière"
      }
    ],
    "id" : "SE-0409",
    "link" : "0409-access-level-on-imports.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/Jumhyn",
      "name" : "Frederick Kellison-Linn"
    },
    "sha" : "2a92cca6a3b4f95b3faacade8c30dc9beef8aa5c",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Declaring the visibility of a dependency with an access-level modifier on import\ndeclarations enables enforcing which declarations can reference the imported\nmodule. A dependency can be marked as being visible only to the source file,\nmodule, package, or to all clients. This brings the familiar behavior of the\naccess level of declarations to dependencies and imported declarations. This\nfeature can hide implementation details from clients and helps to manage\ndependency creep.\n",
    "title" : " Access-level modifiers on import declarations\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/lorentey",
        "name" : "Karoy Lorentey"
      },
      {
        "link" : "https:\/\/github.com\/Azoy",
        "name" : "Alejandro Alonso"
      }
    ],
    "id" : "SE-0410",
    "link" : "0410-atomics.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/jckarter",
      "name" : "Joe Groff"
    },
    "sha" : "7a3f5dca0bf5e0626e9c119a941fe1dc1a39d5f0",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "This proposal adds a limited set of low-level atomic operations to the Standard\nLibrary, including native spellings for C++-style memory orderings. Our goal is\nto enable intrepid library authors and developers writing system level code to\nstart building synchronization constructs directly in Swift.\n",
    "title" : " Low-Level Atomic Operations ⚛︎\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "SR-9144",
        "link" : "https:\/\/github.com\/apple\/swift\/issues\/51640",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0411",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "68794",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0411-isolated-default-values.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "32cdb7fdea5ca985297f4da0c93fc7da6f77944a",
    "status" : {
      "state" : ".implemented",
      "version" : "5.10"
    },
    "summary" : "Default value expressions are permitted for default arguments and default stored\nproperty values. There are several issues with the current actor isolation rules\nfor default value expressions: the rules for stored properties admit data races,\nthe rules for default argument values are overly restrictive, and the rules\nbetween the different places you can use default value expressions are\ninconsistent with each other, making the actor isolation model harder to\nunderstand. This proposal unifies the actor isolation rules for default value\nexpressions, eliminates data races, and improves expressivity by safely allowing\nisolation for default values.\n",
    "title" : " Isolated default value expressions\n",
    "trackingBugs" : [
      {
        "assignee" : "",
        "id" : "apple\/swift#58177",
        "link" : "https:\/\/github.com\/apple\/swift\/issues\/58177",
        "radar" : "",
        "resolution" : "",
        "status" : "",
        "title" : "",
        "updated" : ""
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/sophiapoirier",
        "name" : "Sophia Poirier"
      }
    ],
    "id" : "SE-0412",
    "link" : "0412-strict-concurrency-for-global-variables.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "43ab2546efb8ed422cb85d74e4ed2ab4d3d094df",
    "status" : {
      "state" : ".implemented",
      "version" : "5.10"
    },
    "summary" : "This proposal defines options for the usage of global variables free of data\nraces. Within this proposal, global variables encompass any storage of static\nduration: `let`s and stored `var`s that are either declared at global scope or\nas static member variables.\n",
    "title" : " Strict concurrency for global variables\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/minuscorp",
        "name" : "Jorge Revuelta (@minuscorp)"
      },
      {
        "link" : "https:\/\/github.com\/torstenlehmann",
        "name" : "Torsten Lehmann"
      },
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0413",
    "link" : "0413-typed-throws.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/stephentyrone",
      "name" : "Steve Canon"
    },
    "sha" : "4c09a03947c61ada97fbd2f5e39646e363c099da",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Swift's error handling model allows functions and closures marked `throws` to\nnote that they can exit by throwing an error. The error values themselves are\nalways type-erased to `any Error`. This approach encourages errors to be handled\ngenerically, and remains a good default for most code. However, there are some\nplaces where the type erasure is unfortunate, because it doesn't allow for more\nprecise error typing in narrow places where it is possible and desirable to\nhandle all errors, or where the costs of type erasure are prohibitive.\n",
    "title" : " Typed throws\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/gottesmm",
        "name" : "Michael Gottesman"
      },
      {
        "link" : "https:\/\/github.com\/jturcotti",
        "name" : "Joshua Turcotti"
      }
    ],
    "id" : "SE-0414",
    "link" : "0414-region-based-isolation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/hborla",
      "name" : "Holly Borla"
    },
    "sha" : "2b078d129dd3942df8a63315f1d2d82bbac2c614",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Swift Concurrency assigns values to *isolation domains* determined by actor and\ntask boundaries. Code running in distinct isolation domains can execute\nconcurrently, and `Sendable` checking defines away concurrent access to shared\nmutable state by preventing non-`Sendable` values from being passed across\nisolation boundaries full stop. In practice, this is a significant semantic\nrestriction, because it forbids natural programming patterns that are free of\ndata races.\n",
    "title" : " Region based Isolation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0415",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "70034",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0415-function-body-macros.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/allevato",
      "name" : "Tony Allevato"
    },
    "sha" : "14f1e3783ce14ae2472afa4b6c6e9e2e0cae11c0",
    "status" : {
      "state" : ".returnedForRevision"
    },
    "summary" : "Macros augment Swift programs with additional code, which can include new\ndeclarations, expressions, and statements. One of the key ways in which one\nmight want to augment code---synthesizing or updating the body of a\nfunction---is not currently supported by the macro system. One can create new\nfunctions that have their own function bodies, but not provide, augment, or\nreplace function bodies for a function declared by the user.\n",
    "title" : " Function Body Macros\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/jumhyn",
        "name" : "Frederick Kellison-Linn"
      }
    ],
    "id" : "SE-0416",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "39612",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0416-keypath-function-subtyping.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/rjmccall",
      "name" : "John McCall"
    },
    "sha" : "bf28446a715705bde596af77de99a2efc8de4183",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Today, keypath literals can only be narrowly converted to a function which\nexactly matches the argument and return type. This proposal allows key path\nliterals to partake in the full generality of the conversions we allow between\narbitrary function types, so that the following code compiles without error:\n",
    "title" : " Subtyping for keypath literals as functions\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ktoso",
        "name" : "Konrad 'ktoso' Malawski"
      },
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/FranzBusch",
        "name" : "Franz Busch"
      }
    ],
    "id" : "SE-0417",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "68793",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0417-task-executor-preference.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "9064a6e840a512cbb0b86f92b7e219698ab1669b",
    "status" : {
      "state" : ".accepted"
    },
    "summary" : "Swift Concurrency uses tasks and actors to model concurrency and primarily\nrelies on actor isolation to determine where a specific piece of code shall\nexecute.\n",
    "title" : " Task Executor Preference\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/angela-laar",
        "name" : "Angela Laar"
      },
      {
        "link" : "https:\/\/github.com\/kavon",
        "name" : "Kavon Farvardin"
      },
      {
        "link" : "https:\/\/github.com\/xedin",
        "name" : "Pavel Yaskevich"
      }
    ],
    "id" : "SE-0418",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "67498",
        "repository" : "swift",
        "type" : "pull"
      },
      {
        "account" : "apple",
        "id" : "70076",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0418-inferring-sendable-for-methods.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/beccadax",
      "name" : "Becca Royal-Gordon"
    },
    "sha" : "9bc4e1bc045f6e52f0f74dfa48e9cf1902bcd46d",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "This proposal is focused on a few corner cases in the language surrounding\nfunctions as values and key path literals when using concurrency. We propose\nSendability should be inferred for partial and unapplied methods. We also\npropose to lift a Sendability restriction placed on key path literals in\n[SE-0302](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0302-concurrent-value-and-concurrent-closures.md#key-path-literals)\nby allowing the developers to control whether key path literal is Sendable or\nnot. The goal is to improve flexibility, simplicity, and ergonomics without\nsignificant changes to Swift.\n",
    "title" : " Inferring Sendable for methods and key path literals\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/al45tair",
        "name" : "Alastair Houghton"
      }
    ],
    "id" : "SE-0419",
    "link" : "0419-backtrace-api.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/stephentyrone",
      "name" : "Steve Canon"
    },
    "sha" : "5c4f7aea4e580b04dce11bb4a2686f1641f61cfe",
    "status" : {
      "end" : "2024-02-06",
      "start" : "2024-01-23",
      "state" : ".activeReview"
    },
    "summary" : "This year we are improving the usability of Swift for command line and\nserver-side development by adding first-class support for backtraces to Swift.\n",
    "title" : " Swift Backtrace API\n",
    "warnings" : [
      {
        "kind" : "warning",
        "message" : "Review ended on 2024-02-06 08:00:00 +0000.",
        "stage" : "validate"
      }
    ]
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/rjmccall",
        "name" : "John McCall"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      },
      {
        "link" : "https:\/\/github.com\/douggregor",
        "name" : "Doug Gregor"
      }
    ],
    "id" : "SE-0420",
    "link" : "0420-inheritance-of-actor-isolation.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/xwu",
      "name" : "Xiaodi Wu"
    },
    "sha" : "d08f15153fac22880b2ef64cec2b7f4c84dcc26b",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "Under Swift's [actors\ndesign](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0306-actors.md),\nevery function in Swift has an actor isolation: it is either isolated to some\nspecific actor or non-isolated. It is sometimes useful to be able to give a\nfunction the same actor isolation as its caller, either to give it access to\nactor-isolated data or just to avoid unnecessary suspensions. This proposal\nallows `async` functions to opt in to this behavior.\n",
    "title" : " Inheritance of actor isolation\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/douggregor",
        "name" : "Doug Gregor"
      },
      {
        "link" : "https:\/\/github.com\/hborla",
        "name" : "Holly Borla"
      }
    ],
    "id" : "SE-0421",
    "link" : "0421-generalize-async-sequence.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/Jumhyn",
      "name" : "Freddy Kellison-Linn"
    },
    "sha" : "31c20d8eff260df8b55c78e0e092ac09433503c7",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "This proposal generalizes `AsyncSequence` in two ways:\n",
    "title" : " Generalize effect polymorphism for AsyncSequence and AsyncIteratorProtocol\n"
  },
  {
    "authors" : [
      {
        "link" : "https:\/\/github.com\/ApolloZhu",
        "name" : "Apollo Zhu"
      }
    ],
    "id" : "SE-0422",
    "implementation" : [
      {
        "account" : "apple",
        "id" : "70602",
        "repository" : "swift",
        "type" : "pull"
      }
    ],
    "link" : "0422-caller-side-default-argument-macro-expression.md",
    "reviewManager" : {
      "link" : "https:\/\/github.com\/DougGregor",
      "name" : "Doug Gregor"
    },
    "sha" : "675eba015c04b108e5bf1bf888e718af9cef7142",
    "status" : {
      "state" : ".implemented",
      "version" : "6.0"
    },
    "summary" : "This proposal aims to lift the restriction afore set in [SE-0382 \"Expression\nmacros\"](https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0382-expression-macros.md)\nto allow non-built-in expression macros as caller-side default argument\nexpressions.\n",
    "title" : " Expression macro as caller-side default argument\n"
  }
]