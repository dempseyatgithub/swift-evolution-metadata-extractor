{
  "commit" : "",
  "creationDate" : "2024-03-27T15:41:19Z",
  "implementationVersions" : [
    "2.2", "3", "3.0"
  ],
  "proposals" : [
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/review-se-0071-allow-most-keywords-in-member-references\/2346\/1",
          "name" : "review"
        },
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0071-allow-most-keywords-in-member-references\/2421",
          "name" : "acceptance"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Missing valid proposal ID; SE-0000 is reserved.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0000",
      "link" : "0000-reserved-proposal-id.md",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "reviewManagers" : [
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "Argument labels are an important part of the interface of a Swift function, describing what particular arguments to the function do and improving readability. Sometimes, the most natural label for an argument coincides with a language keyword, such as `in`, `repeat`, or `defer`. Such keywords should be allowed as argument labels, allowing better expression of these interfaces.",
      "title" : "Allow (most) keywords as argument labels",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-344",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-344",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ],
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Missing review manager(s).",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Missing proposal ID link (SE-NNNN)[NNNN-filename.md].",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "",
      "link" : "",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "reviewManagers" : [
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "Argument labels are an important part of the interface of a Swift function, describing what particular arguments to the function do and improving readability. Sometimes, the most natural label for an argument coincides with a language keyword, such as `in`, `repeat`, or `defer`. Such keywords should be allowed as argument labels, allowing better expression of these interfaces.",
      "title" : "Allow (most) keywords as argument labels",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-344",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-344",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ],
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Missing review manager(s).",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Missing list of metadata fields.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "",
      "link" : "",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "reviewManagers" : [
      ],
      "sha" : "",
      "status" : {
        "reason" : "Status extraction not attempted",
        "state" : "error"
      },
      "summary" : "Curried function declaration syntax `func foo(x: Int)(y: Int)` is of limited usefulness and creates a lot of language and implementation complexity. We should remove it.",
      "title" : "Removing currying `func` declaration syntax"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/se-0003-removing-var-from-function-parameters-and-pattern-matching\/1230",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0003",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8a5ed405bf1f92ec3fc97fa46e52528d2e8d67d9",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0003-missing-status-field.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jopamer",
        "name" : "Joe Pamer"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/jopamer",
          "name" : "Joe Pamer"
        }
      ],
      "sha" : "",
      "status" : {
        "reason" : "Status extraction failed",
        "state" : "error"
      },
      "summary" : "There has been some confusion of semantics when a function parameter is marked as `inout` compared to `var`. Both give a mutable local copy of a value but parameters marked `inout` are automatically written back.",
      "title" : "Removing `var` from Function Parameters",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Status not found in the proposal's details list.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Missing or invalid proposal status.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0004",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8e12008d2b34a605f8766310f53d5668f3d50955",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0004-invalid-status-field.md",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "reviewManagers" : [
      ],
      "sha" : "",
      "status" : {
        "reason" : "Status extraction failed",
        "state" : "error"
      },
      "summary" : "The increment\/decrement operators in Swift were added very early in the development of Swift, as a carry-over from C.  These were added without much consideration, and haven't been thought about much since then.  This document provides a fresh look at them, and ultimately recommends we just remove them entirely, since they are confusing and not carrying their weight.",
      "title" : "Remove the `++` and `--` operators",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Missing review manager(s).",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-with-modification-se-0005-better-translation-of-objective-c-apis-into-swift\/1668",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0005",
      "link" : "0005-status-field-not-strong.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "reason" : "Status extraction failed",
        "state" : "error"
      },
      "summary" : "This proposal describes how we can improve Swift's \"Clang Importer\", which is responsible for mapping C and Objective-C APIs into Swift, to translate the names of Objective-C functions, types, methods, properties, etc. into names that more closely align with the [Swift API Design Guidelines](https:\/\/swift.org\/documentation\/api-design-guidelines) being developed as part of Swift 3. Our approach focuses on the differences between the Objective-C [Coding Guidelines for Cocoa](https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Conceptual\/CodingGuidelines\/CodingGuidelines.html) and the Swift API Design Guidelines, using some simple linguistic analysis to aid the automatic translation from Objective-C names to more \"Swifty\" names.",
      "title" : "Better Translation of Objective-C APIs Into Swift",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Status not found in the proposal's details list.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Maxim Moiseev"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-with-modifications-se-0006-apply-api-guidelines-to-the-standard-library\/1667",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0006",
      "link" : "0006-malformed-proposal-link.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "3"
      },
      "summary" : "[Swift API Design Guidelines](https:\/\/swift.org\/documentation\/api-design-guidelines) being developed as part of Swift 3.  It is important that the Standard Library is an exemplar of Swift API Design Guidelines: the APIs from the Standard Library are, probably, the most frequently used Swift APIs in any application domain; the Standard Library also sets precedent for other libraries.",
      "title" : "Apply API Guidelines to the Standard Library"
    },
    {
      "authors" : [
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Proposal Markdown file is empty.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "",
      "link" : "",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "reviewManagers" : [
      ],
      "sha" : "",
      "status" : {
        "reason" : "Status extraction not attempted",
        "state" : "error"
      },
      "summary" : "",
      "title" : ""
    },
    {
      "authors" : [
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Proposal Markdown file is empty.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "",
      "link" : "",
      "reviewManager" : {
        "link" : "",
        "name" : ""
      },
      "reviewManagers" : [
      ],
      "sha" : "",
      "status" : {
        "reason" : "Status extraction not attempted",
        "state" : "error"
      },
      "summary" : "",
      "title" : ""
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/hartbit",
          "name" : "David Hart"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/rejected-se-0009-require-self-for-accessing-instance-members\/930",
          "name" : "Rationale"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Proposal contains no content.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0009",
      "link" : "0009-title-is-a-paragraph.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "The current version of Swift (2.1) requires using `self` when accessing instance members in closures. The proposal suggests extending this to all member accesses (as is intrinsically the case in Objective-C). It has the benefit of documenting instance properties vs local variables and instance functions vs local functions or closures.",
      "title" : ""
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/rejected-se-0010-add-staticstring-unicodescalarview\/1530",
          "name" : "Rationale"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Proposal ID must include four decimal digits.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-010",
      "link" : "010-wrong-number-proposal-id-digits.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "There is no way to create a substring of a `StaticString` that is still typed as `StaticString`. There should be.",
      "title" : "Add StaticString.UnicodeScalarView"
    },
    {
      "authors" : [
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0011-replace-typealias-keyword-with-associatedtype-for-associated-type-declarations\/990",
          "name" : "Rationale"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Missing author(s).",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0011",
      "link" : "0011-missing-authors-field.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "The `typealias` keyword is currently used to declare two kinds of types:",
      "title" : "Replace `typealias` keyword with `associatedtype` for associated type declarations",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-511",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-511",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/rejected-se-0013-remove-partial-application-of-non-final-super-methods\/1157",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0013",
      "link" : "0013-scheduled-for-review-malformed-date-range.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "end" : "",
        "start" : "",
        "state" : "scheduledForReview"
      },
      "summary" : "Prior to Swift 2.2, calls to superclass methods like `super.foo()` in Native Swift classes were dispatched statically by recording a reference to the function and calling it directly by its mangled name. In Swift 2.2, class methods invoked via `super` will use dynamic dispatch. That is, the method will be looked up in the superclass's vtable at runtime. However, if the method is marked with `final`, it will use the old static dispatch, since no class will be able to override it.",
      "title" : "Remove Partial Application of Non-Final Super Methods (Swift 2.2)",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Missing or invalid dates for a review period.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0014-constraining-anysequence-init\/924",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0014",
      "link" : "0014-active-review-missing-dates.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "end" : "",
        "start" : "",
        "state" : "activeReview"
      },
      "summary" : "In order to allow `AnySequence` delegate calls to the underlying sequence, its initializer should have extra constraints.",
      "title" : "Constraining `AnySequence.init`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-474",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-474",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ],
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Missing or invalid dates for a review period.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lilyball",
          "name" : "Lily Ballard"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/review-add-a-lazy-flatmap-for-sequences-of-optionals\/695\/4",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0015",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "408",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0015-implemented-missing-version.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/dabrahams",
        "name" : "Dave Abrahams"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : ""
      },
      "summary" : "Implement comparison operators on tuples up to some arity.",
      "title" : "Tuple comparison operators"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/MichaelBuckley",
          "name" : "Michael Buckley"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0016-adding-initializers-to-int-and-uint-to-convert-from-unsafepointer-and-unsafemutablepointer\/2005",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0016",
      "link" : "0016-implemented-empty-parenthesis.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : ""
      },
      "summary" : "Just as users can create `Unsafe[Mutable]Pointer`s from `Int`s and `UInt`s, they should be able to create Ints and UInts from `Unsafe[Mutable]Pointer`s. This will allow users to call C functions with `intptr_t` and `uintptr_t` parameters, and will allow users to perform more advanced pointer arithmetic than is allowed by `UnsafePointer`s.",
      "title" : "Add initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1115",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1115",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jtbandes",
          "name" : ""
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0017-change-unmanaged-to-use-unsafepointer\/2461",
          "name" : "Rationale"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Author name contains extra markup; expected a link with plaintext contents.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0017",
      "link" : "0017-author-extra-markup.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "3"
      },
      "summary" : "The standard library [`Unmanaged<Instance>` struct](https:\/\/github.com\/apple\/swift\/blob\/master\/stdlib\/public\/core\/Unmanaged.swift) provides a type-safe object wrapper that does not participate in ARC; it allows the user to make manual retain\/release calls.",
      "title" : "Change `Unmanaged` to use `UnsafePointer`",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1485",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1485",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/mxcl",
          "name" : "Max Howell"
        },
        {
          "link" : "https:\/\/github.com\/ddunbar",
          "name" : "Daniel Dunbar"
        },
        {
          "link" : "https:\/\/github.com\/mattt",
          "name" : "Mattt Thompson"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0019-swift-testing-package-manager\/1155",
          "name" : "Rationale"
        }
      ],
      "id" : "",
      "link" : "0019-proposal-id-extra-markup.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/rballard",
        "name" : "Rick Ballard"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/rballard",
          "name" : "Rick Ballard"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "3"
      },
      "summary" : "Testing is an essential part of modern software development. Tight integration of testing into the Swift Package Manager will help ensure a stable and reliable packaging ecosystem.",
      "title" : "Swift Testing",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-592",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-592",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ],
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Proposal ID contains extra markup; expected a link with plaintext contents.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/bitjammer",
          "name" : "Ashley Garland"
        }
      ],
      "discussions" : [
      ],
      "id" : "SE-0020",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "c32fb8e7b9a67907e8b6580a46717c6a345ec7c6",
          "repository" : "swift",
          "type" : "commit"
        },
        {
          "account" : "apple",
          "id" : "67498",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0020-invalid-implementation-link-in-list.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "This proposal aims to add a new build configuration option to Swift 2.2: `#if swift`.",
      "title" : "Swift Language Version Build Configuration",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Implementation links to a non-Swift repository.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/review-naming-functions-with-argument-labels\/1046\/11",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0021",
      "link" : "0021-invalid-implementation-link.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "Swift includes support for first-class functions, such that any function (or method) can be placed into a value of function type. However, when specifying the name of a function, one can only provide the base name, (e.g., `insertSubview`) without the argument labels. For overloaded functions, this means that one must disambiguate based on type information, which is awkward and verbose. This proposal allows one to provide argument labels when referencing a function, eliminating the need to provide type context in most cases.",
      "title" : "Naming Functions with Argument Labels",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Implementation links to a non-Swift repository.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0022-referencing-the-objective-c-selector-of-a-method\/1194",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0022",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "1170",
          "repository" : "swift",
          "type" : "pull"
        }
      ],
      "link" : "0022-invalid-review-manager-link.md",
      "reviewManager" : {
        "link" : "",
        "name" : "Joe Groff"
      },
      "reviewManagers" : [
        {
          "link" : "",
          "name" : "Joe Groff"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "In Swift 2, Objective-C selectors are written as string literals (e.g., `\"insertSubview:aboveSubview:\"`) in the type context of a `Selector`. This proposal seeks to replace this error-prone approach with `Selector` initialization syntax that refers to a specific method via its Swift name.",
      "title" : "Referencing the Objective-C selector of a method",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Review manager's link doesn't refer to a GitHub profile. Link removed.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/dabrahams",
          "name" : "Dave Abrahams"
        },
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        },
        {
          "link" : "https:\/\/github.com\/gribozavr",
          "name" : "Dmitri Gribenko"
        },
        {
          "link" : "",
          "name" : "Ted Kremenek"
        },
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        },
        {
          "link" : "",
          "name" : "Alex Migicovsky"
        },
        {
          "link" : "https:\/\/github.com\/moiseev",
          "name" : "Max Moiseev"
        },
        {
          "link" : "",
          "name" : "Ali Ozer"
        },
        {
          "link" : "https:\/\/github.com\/parkera",
          "name" : "Tony Parker"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-with-modifications-se-0023-api-design-guidelines\/1666",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0023",
      "link" : "0023-author-link-variants.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "3"
      },
      "summary" : "The design of commonly-used libraries has a large impact on the overall feel of a programming language. Great libraries feel like an extension of the language itself, and consistency across libraries elevates the overall development experience. To aid in the construction of great Swift libraries, one of the major goals for Swift 3 is to define a set of API design guidelines and to apply those design guidelines consistently.",
      "title" : "API Design Guidelines",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Author's link doesn't refer to a GitHub profile. Link removed.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jcampbell05",
          "name" : "James Campbell"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/rejected-se-0024-optional-value-setter\/1528",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0024",
      "link" : "0024-active-review-ended.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "end" : "2024-01-05T00:00:00Z",
        "start" : "2024-01-01T00:00:00Z",
        "state" : "activeReview"
      },
      "summary" : "Introduce a new operator an \"Optional Value Setter\". If the optional is set via this operator then the new value is only set if there isn't an already existing value.",
      "title" : "Optional Value Setter `??=`",
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Review ended on 2024-01-05 00:00:00 +0000.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "Ilya Belenkiy"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/se-0025-scoped-access-level-next-steps\/1797\/131",
          "name" : "Rationale"
        }
      ],
      "id" : "SE-0025",
      "link" : "0025-scheduled-review-ended.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "end" : "2024-01-31T00:00:00Z",
        "start" : "2024-01-16T00:00:00Z",
        "state" : "scheduledForReview"
      },
      "summary" : "Scoped access level allows hiding implementation details of a class or a class extension at the class\/extension level, instead of a file. It is a concise expression of the intent that a particular part of a class or extension definition is there only to implement a public API for other classes or extensions and must not be used directly anywhere outside of the scope of the class or the extension.",
      "title" : "Scoped Access Level",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-1275",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-1275",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ],
      "warnings" : [
        {
          "code" : 0,
          "kind" : "warning",
          "message" : "Review ended on 2024-01-31 00:00:00 +0000.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "",
          "name" : "David Scrève"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/proposal-draff-abstract-classes-and-methods\/965",
          "name" : "pitch"
        },
        {
          "link" : "https:\/\/forums.swift.org\/t\/review-se-0026-abstract-classes-and-methods\/1580",
          "name" : "review"
        },
        {
          "link" : "https:\/\/forums.swift.org\/t\/deferred-se-0026-abstract-classes-and-methods\/1705",
          "name" : "deferral"
        },
        {
          "link" : "https:\/\/forums.swift.org\/t\/returning-or-rejecting-all-the-deferred-evolution-proposals\/60724",
          "name" : "rejection"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Failed to extract upcoming feature flag.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0026",
      "link" : "0026-missing-upcoming-feature-flag.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter\/",
        "name" : "Joe Groff"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/jckarter\/",
          "name" : "Joe Groff"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "When developing framework and reusable code, we need to develop classes that are partially abstract with partial implementation. Protocol and protocol extensions provide this, but they cannot have attributes as classes have. A partial class combines the behavior of a class with the requirement of implementing methods in inherited class like protocols.",
      "title" : "Abstract classes and methods"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/zwaldowski",
          "name" : "Zachary Waldowski"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/rejected-se-0027-expose-code-unit-initializers-on-string\/1529",
          "name" : "Rationale"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Upcoming feature flag should not contain whitespace.",
          "stage" : "validate",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0027",
      "link" : "0027-malformed-upcoming-feature-flag.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "rejected"
      },
      "summary" : "Going back and forth from Strings to their byte representations is an important part of solving many problems, including object serialization, binary and text file formats, wire\/network interfaces, and cryptography. Swift has such utilities, but currently only exposed through `String.Type.fromCString(_:)` and `String.Type.fromCStringRepairingIllFormedUTF8(_:)`.",
      "title" : "Expose code unit initializers on String"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/erica",
          "name" : "Erica Sadun"
        }
      ],
      "discussions" : [
        {
          "link" : "https:\/\/forums.swift.org\/t\/accepted-se-0028-modernizing-swifts-debugging-identifiers-line-etc\/1303",
          "name" : "Rationale"
        }
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Failed to extract previous proposal IDs.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0028",
      "link" : "0028-missing-previous-proposal-id.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/lattner",
        "name" : "Chris Lattner"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "2.2"
      },
      "summary" : "This proposal aims to eliminate Swift's use of \"[screaming snake case](https:\/\/en.wikipedia.org\/wiki\/Snake_case)\" like `__FILE__` and `__FUNCTION__` and replacing identifier instances with common [octothorpe-prefixed](https:\/\/en.wiktionary.org\/wiki\/octothorpe) lowercase `#identifier` representations.",
      "title" : "Modernizing Swift's Debugging Identifiers",
      "trackingBugs" : [
        {
          "assignee" : "",
          "id" : "SR-669",
          "link" : "https:\/\/bugs.swift.org\/browse\/SR-669",
          "radar" : "",
          "resolution" : "",
          "status" : "",
          "title" : "",
          "updated" : ""
        }
      ]
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/lattner",
          "name" : "Chris Lattner"
        }
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Missing Review field.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0029",
      "implementation" : [
        {
          "account" : "apple",
          "id" : "8e12008d2b34a605f8766310f53d5668f3d50955",
          "repository" : "swift",
          "type" : "commit"
        }
      ],
      "link" : "0029-missing-review-field.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/jckarter",
        "name" : "Joe Groff"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "implemented",
        "version" : "3.0"
      },
      "summary" : "Function call expressions (which include several syntactic forms that apply an argument list to something of function type) currently have a dual nature in Swift.  Given something like:",
      "title" : "Remove implicit tuple splat behavior from function applications"
    },
    {
      "authors" : [
        {
          "link" : "https:\/\/github.com\/jckarter",
          "name" : "Joe Groff"
        }
      ],
      "discussions" : [
      ],
      "errors" : [
        {
          "code" : 0,
          "kind" : "error",
          "message" : "Failed to extract discussions from Review field.",
          "stage" : "parse",
          "suggestion" : ""
        }
      ],
      "id" : "SE-0030",
      "link" : "0030-malformed-review-links.md",
      "reviewManager" : {
        "link" : "https:\/\/github.com\/DougGregor",
        "name" : "Doug Gregor"
      },
      "reviewManagers" : [
        {
          "link" : "https:\/\/github.com\/DougGregor",
          "name" : "Doug Gregor"
        }
      ],
      "sha" : "",
      "status" : {
        "state" : "withdrawn"
      },
      "summary" : "There are property implementation patterns that come up repeatedly. Rather than hardcode a fixed set of patterns into the compiler, we should provide a general \"property behavior\" mechanism to allow these patterns to be defined as libraries.",
      "title" : "Property Behaviors"
    }
  ],
  "schemaVersion" : "0.1.0",
  "toolVersion" : "0.1.0"
}
